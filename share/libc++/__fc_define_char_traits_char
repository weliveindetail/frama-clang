/**************************************************************************/
/*                                                                        */
/*  This file is part of Frama-Clang                                      */
/*                                                                        */
/*  Copyright (C) 2012-2021                                               */
/*    CEA (Commissariat à l'énergie atomique et aux énergies              */
/*         alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

#ifndef _STD_FC_DEFINE_CHAR_TRAITS_CHAR
#define _STD_FC_DEFINE_CHAR_TRAITS_CHAR

#include "__fc_define_streampos"
#include "__fc_define_streamoff"

namespace std {

  template <class c> struct char_traits;

  template <> struct char_traits<char> {
    typedef char char_type;
    typedef int int_type;
    typedef __fc_std::streampos pos_type;
    typedef __fc_std::streamoff off_type;
    typedef mbstate_t state_type;
    static void assign(char_type& c1, const char_type& c2);
    static bool eq(char_type c1, char_type c2);
    static bool lt(char_type c1, char_type c2);
    static
    int compare(const char_type* s1, const char_type* s2, size_t n);
    static size_t length(const char_type* s);
    static const char_type*
    find(const char_type* s, size_t n, const char_type& a);
    static char_type*
    move(char_type* s1, const char_type* s2, size_t n);
    static char_type*
    copy(char_type* s1, const char_type* s2, size_t n);
    static char_type* assign(char_type* s, size_t n, char_type a);
    static int_type not_eof(int_type c);
    static char_type to_char_type(int_type c);
    static int_type to_int_type(char_type c);
    static bool eq_int_type(int_type c1, int_type c2);
    static int_type eof();
  };

 template<> struct char_traits<wchar_t> {
   typedef wchar_t char_type;
   typedef int int_type;
   typedef __fc_std::streampos pos_type;
   typedef __fc_std::streamoff off_type;
   typedef mbstate_t state_type;
    static void assign(char_type& c1, const char_type& c2);
    static bool eq(char_type c1, char_type c2);
    static bool lt(char_type c1, char_type c2);
    static
    int compare(const char_type* s1, const char_type* s2, size_t n);
    static size_t length(const char_type* s);
    static const char_type*
    find(const char_type* s, size_t n, const char_type& a);
    static char_type*
    move(char_type* s1, const char_type* s2, size_t n);
    static char_type*
    copy(char_type* s1, const char_type* s2, size_t n);
    static char_type* assign(char_type* s, size_t n, char_type a);
    static int_type not_eof(int_type c);
    static char_type to_char_type(int_type c);
    static int_type to_int_type(char_type c);
    static bool eq_int_type(int_type c1, int_type c2);
    static int_type eof();
};

}

#endif

// Local Variables:
// mode: c++
// End:
