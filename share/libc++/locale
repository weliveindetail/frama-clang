/**************************************************************************/
/*                                                                        */
/*  This file is part of Frama-Clang                                      */
/*                                                                        */
/*  Copyright (C) 2012-2021                                               */
/*    CEA (Commissariat à l'énergie atomique et aux énergies              */
/*         alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

#ifndef _STD_LOCALE
#define _STD_LOCALE

#include <string>
#include <bitset>
#include <ios>
#include <ctime>

namespace std {
  // 22.3.1, locale:
  class locale { 
  public:
    // types:
    class facet {
    protected:
      explicit facet(size_t refs = 0);
      virtual ~facet();
      facet(const facet&) = delete;
      void operator=(const facet&) = delete;
    };

    class id {
      public:
      id();
      void operator=(const id&) = delete;
      id(const id&) = delete;
    };

    typedef int category;
    static const category none = 0;
    static const category ctype = 1;
    static const category numeric = 1 << 1;
    static const category collate = 1 << 2;
    static const category time = 1 << 3;
    static const category monetary = 1 << 4;
    static const category messages = 1 << 5;
    static const category all =
      collate | ctype | monetary | numeric | time | messages;

    // construct/copy/destroy:
    locale() noexcept;
    locale(const locale& other) noexcept;
    explicit locale(const char* std_name);
    explicit locale(const string& std_name);
    locale(const locale& other, const char* std_name, category);
    locale(const locale& other, const string& std_name, category);
    template <class Facet> locale(const locale& other, Facet* f);
    locale(const locale& other, const locale& one, category);
    ~locale();

    const locale& operator=(const locale& other) noexcept;
    template <class Facet> locale combine(const locale& other) const;
    // locale operations:
    basic_string<char> name() const;
    bool operator==(const locale& other) const;
    bool operator!=(const locale& other) const;
    template <class charT, class traits, class Allocator>
    bool operator()(const basic_string<charT,traits,Allocator>& s1,
                    const basic_string<charT,traits,Allocator>& s2) const;
    // global locale objects:
    static locale global(const locale&);
    static const locale& classic();
  };

  template <class Facet> const Facet& use_facet(const locale&);
  template <class Facet> bool has_facet(const locale&) noexcept;

  // 22.3.3, convenience interfaces:
  template <class charT> bool isspace (charT c, const locale& loc);
  template <class charT> bool isprint (charT c, const locale& loc);
  template <class charT> bool iscntrl (charT c, const locale& loc);
  template <class charT> bool isupper (charT c, const locale& loc);
  template <class charT> bool islower (charT c, const locale& loc);
  template <class charT> bool isalpha (charT c, const locale& loc);
  template <class charT> bool isdigit (charT c, const locale& loc);
  template <class charT> bool ispunct (charT c, const locale& loc);
  template <class charT> bool isxdigit(charT c, const locale& loc);
  template <class charT> bool isalnum (charT c, const locale& loc);
  template <class charT> bool isgraph (charT c, const locale& loc);
  template <class charT> charT toupper(charT c, const locale& loc);
  template <class charT> charT tolower(charT c, const locale& loc);

  template <class Codecvt, class Elem = wchar_t,
            class Wide_alloc = std::allocator<Elem>,
            class Byte_alloc = std::allocator<char> >
  class wstring_convert {
    public:
    typedef std::basic_string<char, char_traits<char>, Byte_alloc> byte_string;
    typedef std::basic_string<Elem, char_traits<Elem>, Wide_alloc> wide_string;
    typedef typename Codecvt::state_type state_type;
    typedef typename wide_string::traits_type::int_type int_type;
    wstring_convert(Codecvt *pcvt = new Codecvt);
    wstring_convert(Codecvt *pcvt, state_type state);
    wstring_convert(const byte_string& byte_err,
                    const wide_string& wide_err = wide_string());
    ~wstring_convert();

    wide_string from_bytes(char byte);
    wide_string from_bytes(const char *ptr);
    wide_string from_bytes(const byte_string& str);
    wide_string from_bytes(const char *first, const char *last);
    byte_string to_bytes(Elem wchar);
    byte_string to_bytes(const Elem *wptr);
    byte_string to_bytes(const wide_string& wstr);
    byte_string to_bytes(const Elem *first, const Elem *last);
    size_t converted() const;
    state_type state() const;
  private:
    byte_string byte_err_string;
    wide_string wide_err_string;
    Codecvt *cvtptr;
    state_type cvtstate;
    size_t cvtcount;
  };

  template <class Codecvt, class Elem = wchar_t, class Tr = char_traits<Elem> >
  class wbuffer_convert {
  public:
    typedef typename Tr::state_type state_type;
    wbuffer_convert(std::streambuf *bytebuf = 0,
                    Codecvt *pcvt = new Codecvt,
                    state_type state = state_type());
    std::streambuf *rdbuf() const;
    std::streambuf *rdbuf(std::streambuf *bytebuf);
    state_type state() const;
  private:
    std::streambuf *bufptr;
    Codecvt *cvtptr;
    state_type cvtstate;
  };

  // 22.4.1, ctype:
  class ctype_base {
  public:
    typedef bitset<8> mask;

    #define __FC_ALPHA (1<<5)
    #define __FC_DIGIT (1<<6)
    #define __FC_PUNCT (1<<7)

    static constexpr mask space = 1 << 0;
    static constexpr mask print = 1 << 1;
    static constexpr mask cntrl = 1 << 2;
    static constexpr mask upper = 1 << 3;
    static constexpr mask lower = 1 << 4;
    static constexpr mask alpha = __FC_ALPHA;
    static constexpr mask digit = __FC_DIGIT;
    static constexpr mask punct = __FC_PUNCT;
    static constexpr mask xdigit = 1 << 8;
    static constexpr mask alnum = __FC_ALPHA | __FC_DIGIT;
    static constexpr mask graph = __FC_ALPHA | __FC_DIGIT | __FC_PUNCT;
  };

  template <class charT> class ctype : public locale::facet, public ctype_base {
  public:
    typedef charT char_type;
    explicit ctype(size_t refs = 0);
    bool is(mask m, charT c) const;
    const charT* is(const charT* low, const charT* high, mask* vec) const;
    const charT* scan_is(
      mask m, const charT* low, const charT* high) const;
    const charT* scan_not(
      mask m, const charT* low, const charT* high) const;
    charT toupper(charT c) const;
    const charT* toupper(charT* low, const charT* high) const;
    charT tolower(charT c) const;
    const charT* tolower(charT* low, const charT* high) const;
    charT widen(char c) const;
    const char* widen(const char* low, const char* high, charT* to) const;
    char narrow(charT c, char dfault) const;
    const charT* narrow(
      const charT* low, const charT*, char dfault, char* to) const;
    static locale::id id;
  protected:
    ~ctype();
    virtual bool do_is(mask m, charT c) const;
    virtual const charT* do_is(
      const charT* low, const charT* high, mask* vec) const;
    virtual const charT* do_scan_is(
      mask m, const charT* low, const charT* high) const;
    virtual const charT* do_scan_not(
      mask m, const charT* low, const charT* high) const;
    virtual charT do_toupper(charT) const;
    virtual const charT* do_toupper(charT* low, const charT* high) const;
    virtual charT do_tolower(charT) const;
    virtual const charT* do_tolower(charT* low, const charT* high) const;
    virtual charT do_widen(char) const;
    virtual const char* do_widen(
      const char* low, const char* high, charT* dest) const;
    virtual char do_narrow(charT, char dfault) const;
    virtual const charT* do_narrow(
      const charT* low, const charT* high, char dfault, char* dest) const;
  };

  template <class charT>
  class ctype_byname : public ctype<charT> {
  public:
    typedef typename ctype<charT>::mask mask;
    explicit ctype_byname(const char*, size_t refs = 0);
    explicit ctype_byname(const string&, size_t refs = 0);
  protected:
    ~ctype_byname();
  };

// specialization
  template <> class ctype<char> : public locale::facet, public ctype_base {
  public:
    typedef char char_type;
    explicit ctype(
      const mask* tab = 0, bool del = false, size_t refs = 0);
    bool is(mask m, char c) const;
    const char* is(const char* low, const char* high, mask* vec) const;
    const char* scan_is (mask m, const char* low, const char* high) const;
    const char* scan_not(mask m, const char* low, const char* high) const;
    char toupper(char c) const;
    const char* toupper(char* low, const char* high) const;
    char tolower(char c) const;
    const char* tolower(char* low, const char* high) const;
    char widen(char c) const;
    const char* widen(const char* low, const char* high, char* to) const;
    char narrow(char c, char dfault) const;
    const char* narrow(
      const char* low, const char* high, char dfault, char* to) const;
    static locale::id id;
    static const size_t table_size = 256;
    const mask* table() const noexcept;
    static const mask* classic_table() noexcept;
  protected:
    ~ctype();
    virtual char do_toupper(char c) const;
    virtual const char* do_toupper(char* low, const char* high) const;
    virtual char do_tolower(char c) const;
    virtual const char* do_tolower(char* low, const char* high) const;
    virtual char do_widen(char c) const;
    virtual const char* do_widen(
      const char* low, const char* high, char* to) const;
    virtual char do_narrow(char c, char dfault) const;
    virtual const char* do_narrow(
      const char* low, const char* high, char dfault, char* to) const;
  };

  // Conversion between encodings
  
  class codecvt_base {
  public:
    enum result { ok, partial, error, noconv };
  };

  template <class internT, class externT, class stateT>
  class codecvt : public locale::facet, public codecvt_base {
  public:
    typedef internT intern_type;
    typedef externT extern_type;
    typedef stateT state_type;
    explicit codecvt(size_t refs = 0);
    result out(
      stateT& state,
      const internT* from, const internT* from_end, const internT*& from_next,
      externT* to, externT* to_end, externT*& to_next) const;
    result unshift(
      stateT& state, externT* to, externT* to_end, externT*& to_next) const;
    result in(
      stateT& state,
      const externT* from, const externT* from_end, const externT*& from_next,
      internT* to, internT* to_end, internT*& to_next) const;
    int encoding() const noexcept;
    bool always_noconv() const noexcept;
    int length(
      stateT&, const externT* from, const externT* end, size_t max) const;
    int max_length() const noexcept;
    static locale::id id;
  protected:
    ~codecvt();
    virtual result do_out(
      stateT& state,
      const internT* from, const internT* from_end, const internT*& from_next,
      externT* to, externT* to_end, externT*& to_next) const;
    virtual result do_in(
      stateT& state,
      const externT* from, const externT* from_end, const externT*& from_next,
      internT* to, internT* to_end, internT*& to_next) const;
    virtual result do_unshift(
      stateT& state, externT* to, externT* to_end, externT*& to_next) const;
    virtual int do_encoding() const noexcept;
    virtual bool do_always_noconv() const noexcept;
    virtual int do_length(
      stateT&, const externT* from, const externT* end, size_t max) const;
    virtual int do_max_length() const noexcept;
  };

  template <class internT, class externT, class stateT>
  class codecvt_byname : public codecvt<internT, externT, stateT> {
  public:
    explicit codecvt_byname(const char*, size_t refs = 0);
    explicit codecvt_byname(const string&, size_t refs = 0);
  protected:
    ~codecvt_byname();
  };

  // numeric
  template <class charT, class InputIterator = istreambuf_iterator<charT> >
  class num_get : public locale::facet {
  public:
    typedef charT char_type;
    typedef InputIterator iter_type;
    explicit num_get(size_t refs = 0);
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, bool& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base& , ios_base::iostate& err, long& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base& , ios_base::iostate& err, long long& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, unsigned short& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, unsigned int& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, unsigned long& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base& , ios_base::iostate& err, unsigned long long& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, float& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, double& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, long double& v) const;
    iter_type get(
      iter_type in, iter_type end,
      ios_base&, ios_base::iostate& err, void*& v) const;
    static locale::id id;
  protected:
    ~num_get();
    virtual iter_type do_get(
      iter_type, iter_type, ios_base&, ios_base::iostate& err, bool& v) const;
    virtual iter_type do_get(
      iter_type, iter_type, ios_base&, ios_base::iostate& err, long& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, long long& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, unsigned short& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, unsigned int& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, unsigned long& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, unsigned long long& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, float& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, double& v) const;
    virtual iter_type do_get(
      iter_type, iter_type,
      ios_base&, ios_base::iostate& err, long double& v) const;
    virtual iter_type do_get(
      iter_type, iter_type, ios_base&, ios_base::iostate& err, void*& v) const;
  };

  template <class charT, class OutputIterator = ostreambuf_iterator<charT> >
  class num_put : public locale::facet {
  public:
    typedef charT char_type;
    typedef OutputIterator iter_type;
    explicit num_put(size_t refs = 0);
    iter_type put(iter_type s, ios_base& f, char_type fill, bool v) const;
    iter_type put(iter_type s, ios_base& f, char_type fill, long v) const;
    iter_type put(iter_type s, ios_base& f, char_type fill, long long v) const;
    iter_type put(
      iter_type s, ios_base& f, char_type fill, unsigned long v) const;
    iter_type put(
      iter_type s, ios_base& f, char_type fill, unsigned long long v) const;
    iter_type put(iter_type s, ios_base& f, char_type fill, double v) const;
    iter_type put(
      iter_type s, ios_base& f, char_type fill, long double v) const;
    iter_type put(
      iter_type s, ios_base& f, char_type fill, const void* v) const;
    static locale::id id;
  protected:
    ~num_put();
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, bool v) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, long v) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, long long v) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, unsigned long) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, unsigned long long) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, double v) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, long double v) const;
    virtual iter_type do_put(
      iter_type, ios_base&, char_type fill, const void* v) const;
  };

  template <class charT> class numpunct : public locale::facet {
  public:
    typedef charT char_type;
    typedef basic_string<charT> string_type;
    explicit numpunct(size_t refs = 0);
    char_type decimal_point() const;
    char_type thousands_sep() const;
    string_type grouping() const;
    string_type truename() const;
    string_type falsename() const;
    static locale::id id;
  protected:
    ~numpunct();
    virtual char_type do_decimal_point() const;
    virtual char_type do_thousands_sep() const;
    virtual string_type do_grouping() const;
    virtual string_type do_truename() const;
    virtual string_type do_falsename() const;
  };
  
  template <class charT> class numpunct_byname : public numpunct<charT> {
  public:
    typedef charT char_type;
    typedef basic_string<charT> string_type;
    explicit numpunct_byname(const char*, size_t refs = 0);
    explicit numpunct_byname(const string&, size_t refs = 0);
  protected: ~numpunct_byname();
  };

  // collation:
  template <class charT> class collate : public locale::facet {
  public:
    typedef charT char_type;
    typedef basic_string<charT> string_type;
    explicit collate(size_t refs = 0);
    int compare(
      const charT* low1, const charT* high1,
      const charT* low2, const charT* high2) const;
    string_type transform(const charT* low, const charT* high) const;
    long hash(const charT* low, const charT* high) const;
    static locale::id id;
  protected:
    ~collate();
    virtual int do_compare(
      const charT* low1, const charT* high1,
      const charT* low2, const charT* high2) const;
    virtual string_type do_transform(const charT* low, const charT* high) const;
    virtual long do_hash (const charT* low, const charT* high) const;
  };

  template <class charT> class collate_byname : public collate<charT> {
  public:
    typedef basic_string<charT> string_type;
    explicit collate_byname(const char*, size_t refs = 0);
    explicit collate_byname(const string&, size_t refs = 0);
  protected:
    ~collate_byname();
  };

  // date and time:
  class time_base {
  public:
    enum dateorder { no_order, dmy, mdy, ymd, ydm };
  };

  template <class charT, class InputIterator = istreambuf_iterator<charT> >
  class time_get : public locale::facet, public time_base {
  public:
    typedef charT char_type;
    typedef InputIterator iter_type;
    explicit time_get(size_t refs = 0);
    dateorder date_order() const { return do_date_order(); }
    iter_type get_time(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm* t) const;
    iter_type get_date(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm* t) const;
    iter_type get_weekday(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm* t) const;
    iter_type get_monthname(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm* t) const;
    iter_type get_year(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm* t) const;
    iter_type get(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm *t, char format,
      char modifier = 0) const;
    iter_type get(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm *t, const char_type *fmt,
      const char_type *fmtend) const;
    static locale::id id;
  protected:
    ~time_get();
    virtual dateorder do_date_order() const;
    virtual iter_type do_get_time(
      iter_type s, iter_type end,
      ios_base&, ios_base::iostate& err, tm* t) const;
    virtual iter_type do_get_date(
      iter_type s, iter_type end,
      ios_base&, ios_base::iostate& err, tm* t) const;
    virtual iter_type do_get_weekday(
      iter_type s, iter_type end,
      ios_base&, ios_base::iostate& err, tm* t) const;
    virtual iter_type do_get_monthname(
      iter_type s, iter_type end,
      ios_base&, ios_base::iostate& err, tm* t) const;
    virtual iter_type do_get_year(
      iter_type s, iter_type end,
      ios_base&, ios_base::iostate& err, tm* t) const;
    virtual iter_type do_get(
      iter_type s, iter_type end,
      ios_base& f, ios_base::iostate& err, tm *t,
      char format, char modifier) const;
  };

  template <class charT, class InputIterator = istreambuf_iterator<charT> >
  class time_get_byname : public time_get<charT, InputIterator> {
  public:
    typedef time_base::dateorder dateorder;
    typedef InputIterator iter_type;
    explicit time_get_byname(const char*, size_t refs = 0);
    explicit time_get_byname(const string&, size_t refs = 0);
  protected:
    ~time_get_byname();
  };

  template <class charT, class OutputIterator = ostreambuf_iterator<charT> >
  class time_put : public locale::facet {
  public:
    typedef charT char_type;
    typedef OutputIterator iter_type;
    explicit time_put(size_t refs = 0);
    iter_type put(
      iter_type s, ios_base& f, char_type fill, const tm* tmb,
      const charT* pattern, const charT* pat_end) const;
    iter_type put(
      iter_type s, ios_base& f, char_type fill,
      const tm* tmb, char format, char modifier = 0) const;
    static locale::id id;
  protected:
    ~time_put();
    virtual iter_type do_put(
      iter_type s, ios_base&, char_type, const tm* t,
      char format, char modifier) const;
  };

  template <class charT, class OutputIterator = ostreambuf_iterator<charT> >
  class time_put_byname : public time_put<charT, OutputIterator> {
  public:
    typedef charT char_type;
    typedef OutputIterator iter_type;
    explicit time_put_byname(const char*, size_t refs = 0);
    explicit time_put_byname(const string&, size_t refs = 0);
  protected:
    ~time_put_byname();
  };

  // money:
  class money_base {
  public:
    enum part { none, space, symbol, sign, value };
    struct pattern { char field[4]; };
  };

  template <class charT, class InputIterator = istreambuf_iterator<charT> >
  class money_get : public locale::facet {
  public:
    typedef charT char_type;
    typedef InputIterator iter_type;
    typedef basic_string<charT> string_type;
    explicit money_get(size_t refs = 0);
    iter_type get(
      iter_type s, iter_type end, bool intl, ios_base& f,
      ios_base::iostate& err, long double& units) const;
    iter_type get(
      iter_type s, iter_type end, bool intl, ios_base& f,
      ios_base::iostate& err, string_type& digits) const;
    static locale::id id;
  protected:
    ~money_get();
    virtual iter_type do_get(
      iter_type, iter_type, bool, ios_base&,
      ios_base::iostate& err, long double& units) const;
    virtual iter_type do_get(
      iter_type, iter_type, bool, ios_base&,
      ios_base::iostate& err, string_type& digits) const;
  };

  template <class charT, class OutputIterator = ostreambuf_iterator<charT> >
  class money_put : public locale::facet {
  public:
    typedef charT char_type;
    typedef OutputIterator iter_type;
    typedef basic_string<charT> string_type;
    explicit money_put(size_t refs = 0);
    iter_type put(
      iter_type s, bool intl, ios_base& f,
      char_type fill, long double units) const;
    iter_type put(
      iter_type s, bool intl, ios_base& f,
      char_type fill, const string_type& digits) const;
    static locale::id id;
  protected:
    ~money_put();
    virtual iter_type do_put(
      iter_type, bool, ios_base&, char_type fill, long double units) const;
    virtual iter_type do_put(
      iter_type, bool, ios_base&,
      char_type fill, const string_type& digits) const;
  };

  template <class charT, bool International = false>
  class moneypunct : public locale::facet, public money_base {
  public:
    typedef charT char_type;
    typedef basic_string<charT> string_type;
    explicit moneypunct(size_t refs = 0);
    charT decimal_point() const;
    charT thousands_sep() const;
    string grouping() const;
    string_type curr_symbol() const;
    string_type positive_sign() const;
    string_type negative_sign() const;
    int frac_digits() const;
    pattern pos_format() const;
    pattern neg_format() const;
    static locale::id id;
    static const bool intl = International;
  protected:
    ~moneypunct();
    virtual charT do_decimal_point() const;
    virtual charT do_thousands_sep() const;
    virtual string do_grouping() const;
    virtual string_type do_curr_symbol() const;
    virtual string_type do_positive_sign() const;
    virtual string_type do_negative_sign() const;
    virtual int do_frac_digits() const;
    virtual pattern do_pos_format() const;
    virtual pattern do_neg_format() const;
  };

  template <class charT, bool Intl = false>
  class moneypunct_byname : public moneypunct<charT, Intl> {
  public:
    typedef money_base::pattern pattern;
    typedef basic_string<charT> string_type;
    explicit moneypunct_byname(const char*, size_t refs = 0);
    explicit moneypunct_byname(const string&, size_t refs = 0);
  protected:
    ~moneypunct_byname();
  };

  // message retrieval:
  class messages_base {
  public:
    typedef int catalog;
  };

  template <class charT>
  class messages : public locale::facet, public messages_base {
  public:
    typedef charT char_type;
    typedef basic_string<charT> string_type;
    explicit messages(size_t refs = 0);
    catalog open(const basic_string<char>& fn, const locale&) const;
    string_type get(
      catalog c, int set, int msgid, const string_type& dfault) const;
    void close(catalog c) const;
    static locale::id id;
  protected:
    ~messages();
    virtual catalog do_open(const basic_string<char>&, const locale&) const;
    virtual string_type do_get(
      catalog, int set, int msgid, const string_type& dfault) const;
    virtual void do_close(catalog) const;
  };

  template <class charT> class messages_byname : public messages<charT> {
  public:
    typedef messages_base::catalog catalog;
    typedef basic_string<charT> string_type;
    explicit messages_byname(const char*, size_t refs = 0);
    explicit messages_byname(const string&, size_t refs = 0);
  protected:
    ~messages_byname();
  };
}

#endif

// Local Variables:
// mode: c++
// End:
