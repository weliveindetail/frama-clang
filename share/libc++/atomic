/**************************************************************************/
/*                                                                        */
/*  This file is part of Frama-Clang                                      */
/*                                                                        */
/*  Copyright (C) 2012-2020                                               */
/*    CEA (Commissariat à l'énergie atomique et aux énergies              */
/*         alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

#ifndef __STD_ATOMIC
#define __STD_ATOMIC

#include <cstdint>
#include <cstddef>
#include<utility>

// TODO: put this information into machdep.
#define ATOMIC_CHAR_LOCK_FREE 2
#define ATOMIC_CHAR16_T_LOCK_FREE 2
#define ATOMIC_CHAR32_T_LOCK_FREE 2
#define ATOMIC_WCHAR_T_LOCK_FREE 2
#define ATOMIC_SHORT_LOCK_FREE 2
#define ATOMIC_INT_LOCK_FREE 2
#define ATOMIC_LONG_LOCK_FREE 2
#define ATOMIC_LLONG_LOCK_FREE 2

#define ATOMIC_VAR_INIT(value) { value }

namespace std {
  typedef
  enum memory_order
    {
     memory_order_relaxed,
     memory_order_consume,
     memory_order_acquire,
     memory_order_release,
     memory_order_acq_rel,
     memory_order_seq_cst
    } memory_order;

  template <class T> T kill_dependency(T y);

  template <class T> struct atomic {
    bool is_lock_free() const volatile;
    bool is_lock_free() const;
    void store(T, memory_order = memory_order_seq_cst) volatile;
    void store(T, memory_order = memory_order_seq_cst);
    T load(memory_order = memory_order_seq_cst) const volatile;
    T load(memory_order = memory_order_seq_cst) const;
    operator T() const volatile;
    operator T() const;
    T exchange(T, memory_order = memory_order_seq_cst) volatile;
    T exchange(T, memory_order = memory_order_seq_cst);
    bool compare_exchange_weak(T&, T, memory_order, memory_order) volatile;
    bool compare_exchange_weak(T&, T, memory_order, memory_order);
    bool compare_exchange_strong(T&, T, memory_order, memory_order) volatile;
    bool compare_exchange_strong(T&, T, memory_order, memory_order);
    bool compare_exchange_weak(T&, T, memory_order = memory_order_seq_cst) volatile;
    bool compare_exchange_weak(T&, T, memory_order = memory_order_seq_cst);
    bool compare_exchange_strong(T&, T, memory_order = memory_order_seq_cst) volatile;
    bool compare_exchange_strong(T&, T, memory_order = memory_order_seq_cst);
    atomic() = default;
    constexpr atomic(T);
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;
    T operator=(T) volatile;
    T operator=(T);
  };

template<class integral>  struct __atomic {
  private:
    integral __val;
  public:
    bool is_lock_free() const volatile { return ATOMIC_CHAR_LOCK_FREE == 2; };
    bool is_lock_free() const { return ATOMIC_CHAR_LOCK_FREE == 2; };

    void store(integral c, memory_order o = memory_order_seq_cst) volatile;
    void store(integral c, memory_order o = memory_order_seq_cst);
    integral load(memory_order = memory_order_seq_cst) const volatile;
    integral load(memory_order = memory_order_seq_cst) const;

    operator integral() const volatile;
    operator integral() const;

    integral exchange(integral, memory_order = memory_order_seq_cst) volatile;
    integral exchange(integral, memory_order = memory_order_seq_cst);
    bool compare_exchange_weak(
      integral&, integral, memory_order, memory_order) volatile;
    bool compare_exchange_weak(integral&, integral, memory_order, memory_order);
    bool compare_exchange_strong(
      integral&, integral, memory_order, memory_order) volatile;
    bool compare_exchange_strong(
      integral&, integral, memory_order, memory_order);
    bool compare_exchange_weak(
      integral&, integral, memory_order = memory_order_seq_cst) volatile;
    bool compare_exchange_weak(
      integral&, integral, memory_order = memory_order_seq_cst);
    bool compare_exchange_strong(
      integral&, integral, memory_order = memory_order_seq_cst) volatile;
    bool compare_exchange_strong(
      integral&, integral, memory_order = memory_order_seq_cst);
    integral fetch_add(integral, memory_order = memory_order_seq_cst) volatile;
    integral fetch_add(integral, memory_order = memory_order_seq_cst);
    integral fetch_sub(integral, memory_order = memory_order_seq_cst) volatile;
    integral fetch_sub(integral, memory_order = memory_order_seq_cst);
    integral fetch_and(integral, memory_order = memory_order_seq_cst) volatile;
    integral fetch_and(integral, memory_order = memory_order_seq_cst);
    integral fetch_or(integral, memory_order = memory_order_seq_cst) volatile;
    integral fetch_or(integral, memory_order = memory_order_seq_cst);
    integral fetch_xor(integral, memory_order = memory_order_seq_cst) volatile;
    integral fetch_xor(integral, memory_order = memory_order_seq_cst);

    __atomic() = default;
    constexpr __atomic(integral);
    __atomic(const __atomic&) = delete;
    __atomic& operator=(const __atomic&) = delete;
    __atomic& operator=(const __atomic&) volatile = delete;
    integral operator=(integral) volatile;
    integral operator=(integral);

    integral operator++(int) volatile;
    integral operator++(int);
    integral operator--(int) volatile;
    integral operator--(int);
    integral operator++() volatile;
    integral operator++();
    integral operator--() volatile;
    integral operator--();
    integral operator+=(integral) volatile;
    integral operator+=(integral);
    integral operator-=(integral) volatile;
    integral operator-=(integral);
    integral operator&=(integral) volatile;
    integral operator&=(integral);
    integral operator|=(integral) volatile;
    integral operator|=(integral);
    integral operator^=(integral) volatile;
    integral operator^=(integral);
  };

  template<> struct atomic<bool>: __atomic<bool> {
    atomic() = default;
    constexpr atomic(bool x): __atomic<bool>(x) { };
  };

  template<> struct atomic<char>: __atomic<char> {
    atomic() = default;
    constexpr atomic(char x): __atomic<char>(x) { };
  };
  typedef atomic<char> atomic_char_t;

  template<> struct atomic<signed char>: __atomic<signed char> {
    atomic() = default;
    constexpr atomic(signed char x): __atomic<signed char>(x) { };
  };
  typedef atomic<signed char> atomic_schar_t;

  template<> struct atomic<unsigned char>: __atomic<unsigned char> {
    atomic() = default;
    constexpr atomic(unsigned char x): __atomic<unsigned char>(x) { };
  };
  typedef atomic<unsigned char> atomic_uchar_t;

  template<> struct atomic<short>: __atomic<short> {
    atomic() = default;
    constexpr atomic(short x): __atomic<short>(x) { };

  };
  typedef atomic<short> atomic_short_t;

  template<> struct atomic<unsigned short>: __atomic<unsigned short> {
    atomic() = default;
    constexpr atomic(unsigned short x): __atomic<unsigned short>(x) { };
  };
  typedef atomic<unsigned short> atomic_ushort_t;

  template<> struct atomic<int>: __atomic<int> {
    atomic() = default;
    constexpr atomic(int x): __atomic<int>(x) { };
  };
  typedef atomic<int> atomic_int_t;

  template<> struct atomic<unsigned int>: __atomic<unsigned int> {
    atomic() = default;
    constexpr atomic(unsigned int x): __atomic<unsigned int>(x) { };
  };
  typedef atomic<unsigned int> atomic_uint_t;

  template<> struct atomic<long>: __atomic<long> {
    atomic() = default;
    constexpr atomic(long x): __atomic<long>(x) { };
  };
  typedef atomic<long> atomic_long_t;

  template<> struct atomic<unsigned long>: __atomic<unsigned long> {
    atomic() = default;
    constexpr atomic(unsigned long x): __atomic<unsigned long>(x) { };
  };
  typedef atomic<unsigned long> atomic_ulong_t;

  template<> struct atomic<long long>: __atomic<long long> {
    atomic() = default;
    constexpr atomic(int x): __atomic<long long>(x) { };
  };
  typedef atomic<long long> atomic_llong_t;

  template<> struct atomic<unsigned long long>:
    __atomic<unsigned long long> {
    atomic() = default;
    constexpr atomic(unsigned long long x):
      __atomic<unsigned long long>(x) { };
  };
  typedef atomic<unsigned long long> atomic_ullong_t;

  template<> struct atomic<char16_t>: __atomic<char16_t> {
    atomic() = default;
    constexpr atomic(char16_t x): __atomic<char16_t>(x) { };
  };
  typedef atomic<char16_t> atomic_char16_t;

  template<> struct atomic<char32_t>: __atomic<char32_t> {
    atomic() = default;
    constexpr atomic(char32_t x): __atomic<char32_t>(x) { };
  };
  typedef atomic<char32_t> atomic_char32_t;

  template<> struct atomic<wchar_t>: __atomic<wchar_t> {
    atomic() = default;
    constexpr atomic(wchar_t x): __atomic<wchar_t>(x) { };
  };
  typedef atomic<wchar_t> atomic_wchar_t;

  typedef atomic<int8_t> atomic_int8_t;

  typedef atomic<uint8_t> atomic_uint8_t;

  typedef atomic<int16_t> atomic_int16_t;

  typedef atomic<uint16_t> atomic_uint16_t;

  typedef atomic<int32_t> atomic_int32_t;

  typedef atomic<uint32_t> atomic_uint32_t;

  typedef atomic<int64_t> atomic_int64_t;

  typedef atomic<uint64_t> atomic_uint64_t;

  typedef atomic<int_least8_t> atomic_int_least8_t;

  typedef atomic<uint_least8_t> atomic_uint_least8_t;

  typedef atomic<int_least16_t> atomic_int_least16_t;

  typedef atomic<uint_least16_t> atomic_uint_least16_t;

  typedef atomic<int_least32_t> atomic_int_least32_t;

  typedef atomic<uint_least32_t> atomic_uint_least32_t;

  typedef atomic<int_least64_t> atomic_int_least64_t;

  typedef atomic<uint_least64_t> atomic_uint_least64_t;

  typedef atomic<int_fast8_t> atomic_int_fast8_t;

  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;

  typedef atomic<int_fast16_t> atomic_int_fast16_t;

  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;

  typedef atomic<int_fast32_t> atomic_int_fast32_t;

  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;

  typedef atomic<int_fast64_t> atomic_int_fast64_t;

  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;

  typedef atomic<intptr_t> atomic_intptr_t;

  typedef atomic<uintptr_t> atomic_uintptr_t;

  typedef atomic<intmax_t> atomic_intmax_t;

  typedef atomic<uintmax_t> atomic_uintmax_t;

  typedef atomic<size_t> atomic_size_t;

  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;

  template <class T> struct atomic<T*> {
  private:
    T* __val;

  public:
    bool is_lock_free() const volatile;
    bool is_lock_free() const;
    void store(T*, memory_order = memory_order_seq_cst) volatile;
    void store(T*, memory_order = memory_order_seq_cst);
    T* load(memory_order = memory_order_seq_cst) const volatile;
    T* load(memory_order = memory_order_seq_cst) const;
    operator T*() const volatile;
    operator T*() const;
    T* exchange(T*, memory_order = memory_order_seq_cst) volatile;
    T* exchange(T*, memory_order = memory_order_seq_cst);
    bool compare_exchange_weak(T*&, T*, memory_order, memory_order) volatile;
    bool compare_exchange_weak(T*&, T*, memory_order, memory_order);
    bool compare_exchange_strong(T*&, T*, memory_order, memory_order) volatile;
    bool compare_exchange_strong(T*&, T*, memory_order, memory_order);
    bool compare_exchange_weak(T*&, T*, memory_order = memory_order_seq_cst)
      volatile;
    bool compare_exchange_weak(T*&, T*, memory_order = memory_order_seq_cst);
    bool compare_exchange_strong(
      T*&, T*, memory_order = memory_order_seq_cst) volatile;
    bool compare_exchange_strong(T*&, T*, memory_order = memory_order_seq_cst);
    T* fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) volatile;
    T* fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst);
    T* fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) volatile;
    T* fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst);
    atomic() = default;
    constexpr atomic(T*);
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;
    T* operator=(T*) volatile;
    T* operator=(T*);
    T* operator++(int) volatile;
    T* operator++(int);
    T* operator--(int) volatile;
    T* operator--(int);
    T* operator++() volatile;
    T* operator++();
    T* operator--() volatile;
    T* operator--();
    T* operator+=(ptrdiff_t) volatile;
    T* operator+=(ptrdiff_t);
    T* operator-=(ptrdiff_t) volatile;
    T* operator-=(ptrdiff_t);
  };

  template<class T>bool atomic_is_lock_free(const volatile atomic<T>*o);

  template<class T>bool atomic_is_lock_free(const atomic<T>*o);

  template<class T>void atomic_init(volatile atomic<T>* o, T v);

  template<class T>void atomic_init(atomic<T>* o, T v);

  template<class T>void atomic_store(volatile atomic<T>* object, T desired);

  template<class T>void atomic_store(volatile atomic<T>* object, T desired);

  template<class T>
  void atomic_store_explicit(
    volatile atomic<T>*object, T desired, memory_order order);

  template<class T>
  void atomic_store_explicit(atomic<T>* object, T desired, memory_order order);

  template<class T> T atomic_load(const volatile atomic<T>* object);

  template<class T> T atomic_load(const atomic<T>* object);

  template<class T>
  T atomic_load_explicit(const volatile atomic<T>* object, memory_order order);

  template<class T>
  T atomic_load_explicit(const atomic<T>* object, memory_order order);

  template<class T>
  T atomic_exchange(volatile atomic<T>* object, T desired);
  template<class T>T atomic_exchange(atomic<T>* object, T desired);

  template<class T>
  T atomic_exchange_explicit(
    volatile atomic<T>* object, T desired, memory_order order);

  template<class T>
  T atomic_exchange_explicit(
    atomic<T>* object, T desired, memory_order order);

  template<class T>
  bool atomic_compare_exchange_weak(
    volatile atomic<T>* object, T* expected, T desired);

  template<class T>
  bool atomic_compare_exchange_weak(
    atomic<T>* object, T* expected, T desired);

  template<class T>
  bool atomic_compare_exchange_strong(
    volatile atomic<T>* object, T* expected, T desired);

  template<class T>bool
  atomic_compare_exchange_strong(atomic<T>* object, T* expected, T desired);

  template<class T>bool
  atomic_compare_exchange_weak_explicit(
    volatile atomic<T>* object, T* expected, T desired,
    memory_order success, memory_order failure);

  template<class T>
  bool atomic_compare_exchange_weak_explicit(
    atomic<T>* object, T* expected, T desired,
    memory_order success, memory_order failure);

  template<class T>
  bool atomic_compare_exchange_strong_explicit(
    volatile atomic<T>* object, T* expected, T desired,
    memory_order success, memory_order failure);

  template<class T>
  bool atomic_compare_exchange_strong_explicit(
    atomic<T>* object, T* expected, T desired,
    memory_order success, memory_order failure);

  template<class T>
  T atomic_fetch_add(volatile atomic<T>* object, T operand);

  template<class T>
  T* atomic_fetch_add(volatile atomic<T*>* object, ptrdiff_t operand);

  template<class T>
  T atomic_fetch_add(atomic<T>* object, T operand);

  template<class T>
  T* atomic_fetch_add(atomic<T*>* object, ptrdiff_t operand);

  template<class T>
  T atomic_fetch_add_explicit(
    volatile atomic<T>* object, T operand, memory_order order);

  template<class T>
  T* atomic_fetch_add_explicit(
    volatile atomic<T*>* object, ptrdiff_t operand, memory_order order);

  template<class T>
  T atomic_fetch_add_explicit(
    atomic<T>* object, T operand, memory_order order);

  template<class T>
  T* atomic_fetch_add_explicit(
    atomic<T*>* object, ptrdiff_t operand, memory_order order);

  template<class T>
  T atomic_fetch_sub(volatile atomic<T>* object, T operand);

  template<class T>
  T* atomic_fetch_sub(volatile atomic<T*>* object, ptrdiff_t operand);

  template<class T>
  T atomic_fetch_sub(atomic<T>* object, T operand);

  template<class T>
  T* atomic_fetch_sub(atomic<T*>* object, ptrdiff_t operand);

  template<class T>
  T atomic_fetch_sub_explicit(
    volatile atomic<T>* object, T operand, memory_order order);

  template<class T>
  T* atomic_fetch_sub_explicit(
    volatile atomic<T*>* object, ptrdiff_t operand, memory_order order);

  template<class T>
  T atomic_fetch_sub_explicit(
    atomic<T>* object, T operand, memory_order order);

  template<class T>
  T* atomic_fetch_sub_explicit(
    atomic<T*>* object, ptrdiff_t operand, memory_order order);

  template<class T>
  T atomic_fetch_or(volatile atomic<T>* object, T operand);

  template<class T>
  T atomic_fetch_or(atomic<T>* object, T operand);

  template<class T>
  T atomic_fetch_or_explicit(
    volatile atomic<T>* object, T operand, memory_order order);

  template<class T>
  T atomic_fetch_or_explicit(
    atomic<T>* object, T operand, memory_order order);

  template<class T>
  T atomic_fetch_xor(volatile atomic<T>* object, T operand);

  template<class T>
  T atomic_fetch_xor(atomic<T>* object, T operand);

  template<class T>
  T atomic_fetch_xor_explicit(
    volatile atomic<T>* object, T operand, memory_order order);

  template<class T>
  T atomic_fetch_xor_explicit(
    atomic<T>* object, T operand, memory_order order);

  typedef struct atomic_flag {
  private:
    bool __flag;

  public:
    bool test_and_set(memory_order = memory_order_seq_cst) volatile;
    bool test_and_set(memory_order = memory_order_seq_cst);
    void clear(memory_order = memory_order_seq_cst) volatile;
    void clear(memory_order = memory_order_seq_cst);
    atomic_flag(bool b) { __flag = b; };
    atomic_flag() = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;
  } atomic_flag;

  bool atomic_flag_test_and_set(volatile atomic_flag*);

  bool atomic_flag_test_and_set(atomic_flag*);

  bool atomic_flag_test_and_set_explicit(volatile atomic_flag*, memory_order);

  bool atomic_flag_test_and_set_explicit(atomic_flag*, memory_order);

  void atomic_flag_clear(volatile atomic_flag*);

  void atomic_flag_clear(atomic_flag*);

  void atomic_flag_clear_explicit(volatile atomic_flag*, memory_order);

  void atomic_flag_clear_explicit(atomic_flag*, memory_order);

#define ATOMIC_FLAG_INIT { false }

  void atomic_thread_fence(memory_order order);
  void atomic_signal_fence(memory_order order);

}

#endif

/*
Local Variables:
mode: C++
End:
*/
