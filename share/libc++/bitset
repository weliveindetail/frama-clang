/**************************************************************************/
/*                                                                        */
/*  This file is part of Frama-Clang                                      */
/*                                                                        */
/*  Copyright (C) 2012-2020                                               */
/*    CEA (Commissariat à l'énergie atomique et aux énergies              */
/*         alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

#ifndef _STD_BITSET
#define _STD_BITSET

#include <string>
#include <iosfwd>

namespace std {

template <size_t N>class bitset {
   unsigned long long field: N;
public:
  class reference {
    friend class bitset;
    reference() noexcept;
  public:
    ~reference() noexcept;
    reference& operator=(bool x) noexcept;
    reference& operator=(const reference&) noexcept;
    bool operator~() const noexcept;
    operator bool() const noexcept;
    reference& flip() noexcept;
  };

  constexpr bitset(): field(0) { };
  constexpr bitset(unsigned long long val): field(val) { };
  template<class charT, class traits, class Allocator>
  explicit bitset(
    const basic_string<charT,traits,Allocator>& str,
    typename basic_string<charT,traits,Allocator>::size_type pos = 0,
    typename basic_string<charT,traits,Allocator>::size_type n =
    basic_string<charT,traits,Allocator>::npos,
    charT zero = charT('0'), charT one = charT('1'));
  template <class charT>
  explicit bitset(
    const charT* str,
    typename basic_string<charT>::size_type n = basic_string<charT>::npos,
    charT zero = charT('0'), charT one = charT('1'));

  bitset<N>& operator&=(const bitset<N>& rhs) noexcept;
  bitset<N>& operator|=(const bitset<N>& rhs) noexcept;
  bitset<N>& operator^=(const bitset<N>& rhs) noexcept;
  bitset<N>& operator<<=(size_t pos) noexcept;
  bitset<N>& operator>>=(size_t pos) noexcept;
  bitset<N>& set() noexcept;
  bitset<N>& set(size_t pos, bool val = true);
  bitset<N>& reset() noexcept;
  bitset<N>& reset(size_t pos);
  bitset<N> operator~() const noexcept;
  bitset<N>& flip() noexcept;
  bitset<N>& flip(size_t pos);

  constexpr bool operator[](size_t pos) const noexcept;
  reference operator[](size_t pos) noexcept;
  unsigned long to_ulong() const;
  unsigned long long to_ullong() const;
  template <class charT = char,
            class traits = char_traits<charT>,
            class Allocator = allocator<charT> >
  basic_string<charT, traits, Allocator>
  to_string(charT zero = charT('0'), charT one = charT('1')) const;

  size_t count() const noexcept;
  constexpr size_t size() const noexcept;
  bool operator==(const bitset<N>& rhs) const noexcept;
  bool operator!=(const bitset<N>& rhs) const noexcept;
  bool test(size_t pos) const;
  bool all() const noexcept;
  bool any() const noexcept;
  bool none() const noexcept;
  bitset<N> operator<<(size_t pos) const noexcept;
  bitset<N> operator>>(size_t pos) const noexcept;

};
 
  template <class T> struct hash;
  template <size_t N> struct hash<bitset<N> >;

  template <size_t N>
  bitset<N> operator&(const bitset<N>&, const bitset<N>&) noexcept;
  template <size_t N>
  bitset<N> operator|(const bitset<N>&, const bitset<N>&) noexcept;
  template <size_t N>
  bitset<N> operator^(const bitset<N>&, const bitset<N>&) noexcept;

  template <class charT, class traits, size_t N>
  basic_istream<charT, traits>&
  operator>>(basic_istream<charT, traits>& is, bitset<N>& x);
  template <class charT, class traits, size_t N>
  basic_ostream<charT, traits>&
  operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);

}

#endif

// Local Variables:
// mode: c++
// End:
