[kernel] Parsing tests/exn/nested_catch.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
enum __fc_exn_enum {
    __fc_exn_kind___fc_d = 2,
    __fc_exn_kind___fc_ui = 1,
    __fc_exn_kind___fc_i = 0
};
union __fc_exn_union {
   double __fc_d ;
   unsigned int __fc_ui ;
   int __fc_i ;
};
struct __fc_exn_struct {
   int exn_uncaught ;
   enum __fc_exn_enum exn_kind ;
   union __fc_exn_union exn_obj ;
};
struct __fc_exn_struct __fc_exn =
  {.exn_uncaught = 0, .exn_kind = 0, .exn_obj = {.__fc_d = 0.}};
int f(int x)
{
  int __retres;
  switch (x) {
    case 0:
    {
      __fc_exn.exn_uncaught = 1;
      __fc_exn.exn_kind = __fc_exn_kind___fc_i;
      __fc_exn.exn_obj.__fc_i = 0;
      __retres = 0;
      goto return_label;
    }
    case 1:
    {
      __fc_exn.exn_uncaught = 1;
      __fc_exn.exn_kind = __fc_exn_kind___fc_d;
      __fc_exn.exn_obj.__fc_d = 1.0;
      __retres = 0;
      goto return_label;
    }
    case 2:
    {
      __fc_exn.exn_uncaught = 1;
      __fc_exn.exn_kind = __fc_exn_kind___fc_ui;
      __fc_exn.exn_obj.__fc_ui = 2U;
      __retres = 0;
      goto return_label;
    }
    default: __retres = 3;
    goto return_label;
  }
  return_label: return __retres;
}

int g(int x)
{
  int __retres;
  int y = 0;
  {
    int tmp;
    tmp = f(x);
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        case __fc_exn_kind___fc_ui: goto __fc_ui;
        default: {
                   __retres = 0;
                   goto return_label;
                 }
      }
    y += tmp;
    {
      int tmp_0;
      tmp_0 = f(y);
      if (__fc_exn.exn_uncaught == 1) 
        switch (__fc_exn.exn_kind) {
          case __fc_exn_kind___fc_i: goto __fc_i_1;
          case __fc_exn_kind___fc_ui: goto __fc_ui;
          default: {
                     __retres = 0;
                     goto return_label;
                   }
        }
      y += tmp_0;
      __retres = y;
      goto return_label;
      if (0) {
        int z;
        __fc_i_1: __fc_exn.exn_uncaught = 0;
        z = __fc_exn.exn_obj.__fc_i;
        y += z;
        __retres = y;
        goto return_label;
      }
    }
    if (0) {
      unsigned int z_0;
      __fc_ui: __fc_exn.exn_uncaught = 0;
      z_0 = __fc_exn.exn_obj.__fc_ui;
      y = (int)((unsigned int)y + z_0);
      __retres = y;
      goto return_label;
    }
  }
  return_label: return __retres;
}

int main(int c, char const **foo)
{
  int __retres;
  {
    int tmp;
    tmp = g(c);
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        case __fc_exn_kind___fc_i: goto __fc_i;
        case __fc_exn_kind___fc_d: goto __fc_d;
      }
    __retres = tmp;
    goto return_label;
    if (0) {
      double d;
      __fc_d: __fc_exn.exn_uncaught = 0;
      d = __fc_exn.exn_obj.__fc_d;
      __retres = 0;
      goto return_label;
    }
    if (0) {
      int z;
      __fc_i: __fc_exn.exn_uncaught = 0;
      z = __fc_exn.exn_obj.__fc_i;
      __retres = 1;
      goto return_label;
    }
  }
  return_label: return __retres;
}


