[kernel] Parsing tests/exn/integer_exn.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
enum foo {
    BAR = 2U
};
int x;
enum foo y = (enum foo)BAR;
void throw_foo(void)
{
  throw ((enum foo)BAR);
  return;
}

void throw_2(void)
{
  throw (2);
  return;
}

void throw_foop(void)
{
  throw (& y);
  return;
}

void throw_2p(void)
{
  throw (& x);
  return;
}

int catch_exn1(void (*f)(void))
{
  int __retres;
  try (*f)();
  catch ( enum foo x ) {
    __retres = 1;
    goto return_label;
  }
    catch ( int x_0 ) {
      __retres = 0;
      goto return_label;
    }
    catch ( int *x_1 ) {
      __retres = 2;
      goto return_label;
    }
    catch ( enum foo const *x_2 ) {
      __retres = 3;
      goto return_label;
    }
    catch ( ... ) {
      __retres = 4;
      goto return_label;
    }
  __retres = 5;
  return_label: return __retres;
}

int catch_exn2(void (*f)(void))
{
  int __retres;
  try (*f)();
  catch ( int x ) {
    __retres = 0;
    goto return_label;
  }
    catch ( enum foo x_0 ) {
      __retres = 1;
      goto return_label;
    }
    catch ( int *x_1 ) {
      __retres = 2;
      goto return_label;
    }
    catch ( enum foo *x_2 ) {
      __retres = 3;
      goto return_label;
    }
    catch ( ... ) {
      __retres = 4;
      goto return_label;
    }
  __retres = 5;
  return_label: return __retres;
}

int main(void)
{
  int x;
  int y;
  int z;
  int t;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  x = catch_exn1(& throw_foo);
  y = catch_exn1(& throw_2);
  z = catch_exn1(& throw_foop);
  t = catch_exn1(& throw_2p);
  tmp = catch_exn2(& throw_foo);
  x += tmp;
  tmp_0 = catch_exn2(& throw_2);
  y += tmp_0;
  tmp_1 = catch_exn2(& throw_foop);
  z += tmp_1;
  tmp_2 = catch_exn2(& throw_2p);
  t += tmp_2;
  return t;
}


