[kernel] Parsing tests/bugs/issue11.cpp (external front-end)
Now output intermediate result
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 2 goals scheduled
[wp] [Qed] Goal typed___fc_init_ZN1aE1d_call__ZN1a1bIcEEC1v_ZN1a1bIcEEC1v_requires : Valid
[wp] [Qed] Goal typed___fc_init_ZN1aE1c_call__ZN1a1bIvEEC1v_ZN1a1bIvEEC1v_requires : Valid
[wp] [Cache] not used
[wp] Proved goals:    2 / 2
  Qed:             2
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct b<void> {
   
};
struct b<char> {
   
};
void b<void>::Ctor(struct b<void> const *this);

void b<void>::Ctor(struct b<void> const *this,
                   struct b<void> const *__frama_c_arg_0);

void b<void>::Ctor(struct b<void> const *this,
                   struct b<void> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void b<void>::Ctor(struct b<void> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void b<void>::Ctor(struct b<void> const *this,
                   struct b<void> const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void b<void>::Ctor(struct b<void> const *this,
                   struct b<void> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "b",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void b<char>::Ctor(struct b<char> const *this);

void b<char>::Ctor(struct b<char> const *this,
                   struct b<char> const *__frama_c_arg_0);

void b<char>::Ctor(struct b<char> const *this,
                   struct b<char> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void b<char>::Ctor(struct b<char> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void b<char>::Ctor(struct b<char> const *this,
                   struct b<char> const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void b<char>::Ctor(struct b<char> const *this,
                   struct b<char> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "b",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct b<void> c;
void __fc_init_ZN1aE1c(void) __attribute__((__constructor__));
void __fc_init_ZN1aE1c(void)
{
  b<void>::Ctor((struct b<void> const *)(& c));
  return;
}

struct b<char> d;
void __fc_init_ZN1aE1d(void) __attribute__((__constructor__));
void __fc_init_ZN1aE1d(void)
{
  b<char>::Ctor((struct b<char> const *)(& d));
  return;
}


