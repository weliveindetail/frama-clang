[kernel] Parsing tests/stl/stl_initializer_list.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef unsigned int size_t;
typedef size_t size_t;
struct initializer_list<int> {
   int const *base ;
   size_t length ;
};
void initializer_list<int>::Ctor(struct initializer_list<int> const *this,
                                 struct initializer_list<int> const *__frama_c_arg_0);

void initializer_list<int>::Ctor(struct initializer_list<int> const *this,
                                 struct initializer_list<int> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void initializer_list<int>::Ctor(struct initializer_list<int> const *this);

/*@ requires \valid_read(this); */
void initializer_list<int>::Ctor(struct initializer_list<int> const *this,
                                 int const *b, size_t s)
{
  this->base = b;
  this->length = s;
  return;
}

/*@ requires \valid_read(this); */
size_t size(struct initializer_list<int> const *this);

/*@ requires \valid_read(this); */
int const *begin(struct initializer_list<int> const *this);

/*@ requires \valid_read(this); */
int const *end(struct initializer_list<int> const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void initializer_list<int>::Ctor(struct initializer_list<int> const *this,
                                 struct initializer_list<int> const *__frama_c_arg_0)
{
  this->base = __frama_c_arg_0->base;
  this->length = __frama_c_arg_0->length;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void initializer_list<int>::Ctor(struct initializer_list<int> const *this,
                                 struct initializer_list<int> *__frama_c_arg_0)
{
  this->base = __frama_c_arg_0->base;
  this->length = __frama_c_arg_0->length;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "initializer_list",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void f(void)
{
  int a[2];
  {
    int *__fc_tmp_0 = a;
    {
      int _frama_c_index = 0;
      while (_frama_c_index < 2) {
        *(__fc_tmp_0 + _frama_c_index) = 0;
        _frama_c_index ++;
      }
    }
  }
  struct initializer_list<int> x;
  initializer_list<int>::Ctor(& x,(int const *)(a),(unsigned int)2);
  return;
}


