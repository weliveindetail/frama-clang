[kernel] Parsing tests/stl/stl_shared_ptr_mistake10.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function exception::Ctor can't throw any exception
[kernel] Warning: Assuming declared function exception::Ctor can't throw any exception
[kernel] Warning: Assuming declared function exception::Ctor can't throw any exception
[kernel] Warning: Assuming declared function operator= can't throw any exception
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function weak_ptr<Aircraft>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef unsigned int size_t;
typedef void *nullptr_t;
typedef _Bool value_type;
struct integral_constant<bool,0>;
struct integral_constant<bool,0> {
   
};
typedef _Bool value_type;
struct integral_constant<bool,1>;
struct integral_constant<bool,1> {
   
};
struct Aircraft;
typedef struct Aircraft *type;
typedef type *type;
struct __shared_ref_base;
struct piecewise_construct_t;
struct piecewise_construct_t {
   
};
struct exception;
struct bad_exception;
struct nested_exception;
struct exception {
   struct _frama_c_vmt *pvmt ;
};
struct bad_exception {
   struct exception _frama_c__ZN3stdE9exception ;
};
typedef void *exception_ptr;
struct nested_exception {
   struct _frama_c_vmt *pvmt ;
};
struct weak_ptr<Aircraft>;
struct shared_ptr<Aircraft> {
   struct Aircraft *__ptr ;
   struct __shared_ref_base *_ref ;
};
struct __shared_ref_base {
   struct _frama_c_vmt *pvmt ;
};
struct __shared_ref<void> {
   struct __shared_ref_base _frama_c__ZN3stdE17__shared_ref_base ;
   void *__ptr ;
   long _n ;
   long _w ;
};
struct __shared_ref<Aircraft> {
   struct __shared_ref_base _frama_c__ZN3stdE17__shared_ref_base ;
   struct Aircraft *__ptr ;
   long _n ;
   long _w ;
};
struct weak_ptr<Aircraft> {
   struct Aircraft *__ptr ;
   struct __shared_ref_base *_ref ;
};
struct bad_weak_ptr;
struct bad_weak_ptr {
   struct exception _frama_c__ZN3stdE9exception ;
};
struct shared_ptr<void>;
struct shared_ptr<void> {
   void *__ptr ;
   struct __shared_ref_base *_ref ;
};
struct __fc_div_t {
   int quot ;
   int rem ;
};
typedef struct __fc_div_t div_t;
struct __fc_ldiv_t {
   long quot ;
   long rem ;
};
typedef struct __fc_ldiv_t ldiv_t;
struct __fc_lldiv_t {
   long long quot ;
   long long rem ;
};
typedef struct __fc_lldiv_t lldiv_t;
struct Aircraft {
   int m_id ;
   int m_flyCount ;
   struct weak_ptr<Aircraft> myWingMan ;
};
void *malloc(size_t size);

void free(void *p);

enum __fc_exn_enum {
    __fc_exn_kind___fc_S_ZN3stdE12bad_weak_ptr = 0
};
union __fc_exn_union {
   struct bad_weak_ptr __fc_S_ZN3stdE12bad_weak_ptr ;
};
struct __fc_exn_struct {
   int exn_uncaught ;
   enum __fc_exn_enum exn_kind ;
   union __fc_exn_union exn_obj ;
};
struct __fc_exn_struct __fc_exn =
  {.exn_uncaught = 0,
   .exn_kind = 0,
   .exn_obj = {.__fc_S_ZN3stdE12bad_weak_ptr = {._frama_c__ZN3stdE9exception = {
                                                .pvmt = (struct _frama_c_vmt *)0}}}};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,0> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,1> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "_is_void",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "add_rvalue_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ ensures \valid(\result); */
type declval<Aircraft*>(void);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ok_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ko_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "pre_is_base_of2",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_base_of",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "remove_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "enable_if",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid(b);
    requires \valid(a); */
void swap<void*>(void **a, void **b)
{
  void *tmp = *a;
  *a = *b;
  *b = tmp;
  return;
}

/*@ requires \valid(b);
    requires \valid(a); */
void swap<std::__shared_ref_base*>(struct __shared_ref_base **a,
                                   struct __shared_ref_base **b)
{
  struct __shared_ref_base *tmp = *a;
  *a = *b;
  *b = tmp;
  return;
}

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0);

void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0)
{
  return;
}

/*@ requires \valid_read(this); */
void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this)
{
  return;
}

struct piecewise_construct_t piecewise_construct;
void __fc_init_ZN3stdE19piecewise_construct(void) __attribute__((__constructor__));
void __fc_init_ZN3stdE19piecewise_construct(void)
{
  struct piecewise_construct_t __fc_tmp_0;
  piecewise_construct_t::Ctor(& __fc_tmp_0);
  piecewise_construct = __fc_tmp_0;
  piecewise_construct_t::Dtor((struct piecewise_construct_t const *)(& __fc_tmp_0));
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "piecewise_construct_t",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@
axiomatic MemCmp {
  logic ℤ memcmp{L1, L2}(char *s1, char *s2, ℤ n) 
    reads \at(*(s1 + (0 .. n - 1)),L1), \at(*(s2 + (0 .. n - 1)),L2);
  
  axiom memcmp_zero{L1, L2}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L1, L2}(s1, s2, n) ≡ 0 ⇔
      (∀ ℤ i; 0 ≤ i < n ⇒ \at(*(s1 + i),L1) ≡ \at(*(s2 + i),L2));
  
  }
 */
/*@
axiomatic MemChr {
  logic 𝔹 memchr{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  logic ℤ memchr_off{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  axiom memchr_def{L}:
    ∀ char *s;
    ∀ ℤ c;
    ∀ ℤ n;
      memchr(s, c, n) ≢ (0 ≢ 0) ⇔
      (∃ int i; 0 ≤ i < n ∧ *(s + i) ≡ c);
  
  }
 */
/*@
axiomatic MemSet {
  logic 𝔹 memset{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  axiom memset_def{L}:
    ∀ char *s;
    ∀ ℤ c;
    ∀ ℤ n;
      memset(s, c, n) ≢ (0 ≢ 0) ⇔
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s + i) ≡ c);
  
  }
 */
/*@
axiomatic StrLen {
  logic ℤ strlen{L}(char *s) 
    reads *(s + (0 ..));
  
  axiom strlen_pos_or_null{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ∧ (∀ ℤ j; 0 ≤ j < i ⇒ *(s + j) ≢ (char)0) ∧
      *(s + i) ≡ (char)0 ⇒ strlen(s) ≡ i;
  
  axiom strlen_neg{L}:
    ∀ char *s;
      (∀ ℤ i; 0 ≤ i ⇒ *(s + i) ≢ (char)0) ⇒ strlen(s) < 0;
  
  axiom strlen_before_null{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i < strlen(s) ⇒ *(s + i) ≢ (char)0;
  
  axiom strlen_at_null{L}:
    ∀ char *s; 0 ≤ strlen(s) ⇒ *(s + strlen(s)) ≡ (char)0;
  
  axiom strlen_not_zero{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ≤ strlen(s) ∧ *(s + i) ≢ (char)0 ⇒ i < strlen(s);
  
  axiom strlen_zero{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ≤ strlen(s) ∧ *(s + i) ≡ (char)0 ⇒ i ≡ strlen(s);
  
  axiom strlen_sup{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ∧ *(s + i) ≡ (char)0 ⇒ 0 ≤ strlen(s) ≤ i;
  
  axiom strlen_shift{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ≤ strlen(s) ⇒ strlen(s + i) ≡ strlen(s) - i;
  
  axiom strlen_create{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ∧ *(s + i) ≡ (char)0 ⇒ 0 ≤ strlen(s) ≤ i;
  
  axiom strlen_create_shift{L}:
    ∀ char *s;
    ∀ ℤ i;
    ∀ ℤ k;
      0 ≤ k ≤ i ∧ *(s + i) ≡ (char)0 ⇒
      0 ≤ strlen(s + k) ≤ i - k;
  
  axiom memcmp_strlen_left{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L, L}(s1, s2, n) ≡ 0 ∧ strlen(s1) < n ⇒
      strlen(s1) ≡ strlen(s2);
  
  axiom memcmp_strlen_right{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L, L}(s1, s2, n) ≡ 0 ∧ strlen(s2) < n ⇒
      strlen(s1) ≡ strlen(s2);
  
  axiom memcmp_strlen_shift_left{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ k, ℤ n;
      memcmp{L, L}(s1, s2 + k, n) ≡ 0 ≤ k ∧ strlen(s1) < n ⇒
      0 ≤ strlen(s2) ≤ k + strlen(s1);
  
  axiom memcmp_strlen_shift_right{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ k, ℤ n;
      memcmp{L, L}(s1 + k, s2, n) ≡ 0 ≤ k ∧ strlen(s2) < n ⇒
      0 ≤ strlen(s1) ≤ k + strlen(s2);
  
  }
 */
/*@
axiomatic StrCmp {
  logic ℤ strcmp{L}(char *s1, char *s2) 
    reads *(s1 + (0 .. strlen(s1))), *(s2 + (0 .. strlen(s2)));
  
  axiom strcmp_zero{L}:
    ∀ char *s1, char *s2;
      strcmp(s1, s2) ≡ 0 ⇔
      strlen(s1) ≡ strlen(s2) ∧
      (∀ ℤ i; 0 ≤ i ≤ strlen(s1) ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic StrNCmp {
  logic ℤ strncmp{L}(char *s1, char *s2, ℤ n) 
    reads *(s1 + (0 .. n - 1)), *(s2 + (0 .. n - 1));
  
  axiom strncmp_zero{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      strncmp(s1, s2, n) ≡ 0 ⇔
      (strlen(s1) < n ∧ strcmp(s1, s2) ≡ 0) ∨
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic StrChr {
  logic 𝔹 strchr{L}(char *s, ℤ c) 
    reads *(s + (0 .. strlen(s)));
  
  axiom strchr_def{L}:
    ∀ char *s;
    ∀ ℤ c;
      strchr(s, c) ≢ (0 ≢ 0) ⇔
      (∃ ℤ i; 0 ≤ i ≤ strlen(s) ∧ *(s + i) ≡ (char)((int)c));
  
  }
 */
/*@
axiomatic WcsLen {
  logic ℤ wcslen{L}(int *s) 
    reads *(s + (0 ..));
  
  axiom wcslen_pos_or_null{L}:
    ∀ int *s;
    ∀ ℤ i;
      0 ≤ i ∧ (∀ ℤ j; 0 ≤ j < i ⇒ *(s + j) ≢ (int)0) ∧
      *(s + i) ≡ (int)0 ⇒ wcslen(s) ≡ i;
  
  axiom wcslen_neg{L}:
    ∀ int *s;
      (∀ ℤ i; 0 ≤ i ⇒ *(s + i) ≢ (int)0) ⇒ wcslen(s) < 0;
  
  axiom wcslen_before_null{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i < wcslen(s) ⇒ *(s + i) ≢ (int)0;
  
  axiom wcslen_at_null{L}:
    ∀ int *s; 0 ≤ wcslen(s) ⇒ *(s + wcslen(s)) ≡ (int)0;
  
  axiom wcslen_not_zero{L}:
    ∀ int *s;
    ∀ int i;
      0 ≤ i ≤ wcslen(s) ∧ *(s + i) ≢ (int)0 ⇒ i < wcslen(s);
  
  axiom wcslen_zero{L}:
    ∀ int *s;
    ∀ int i;
      0 ≤ i ≤ wcslen(s) ∧ *(s + i) ≡ (int)0 ⇒ i ≡ wcslen(s);
  
  axiom wcslen_sup{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s) ≤ i;
  
  axiom wcslen_shift{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ≤ wcslen(s) ⇒ wcslen(s + i) ≡ wcslen(s) - i;
  
  axiom wcslen_create{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s) ≤ i;
  
  axiom wcslen_create_shift{L}:
    ∀ int *s;
    ∀ int i;
    ∀ int k;
      0 ≤ k ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s + k) ≤ i - k;
  
  }
 */
/*@
axiomatic WcsCmp {
  logic ℤ wcscmp{L}(int *s1, int *s2) 
    reads *(s1 + (0 .. wcslen(s1))), *(s2 + (0 .. wcslen(s2)));
  
  axiom wcscmp_zero{L}:
    ∀ int *s1, int *s2;
      wcscmp(s1, s2) ≡ 0 ⇔
      wcslen(s1) ≡ wcslen(s2) ∧
      (∀ ℤ i; 0 ≤ i ≤ wcslen(s1) ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic WcsNCmp {
  logic ℤ wcsncmp{L}(int *s1, int *s2, ℤ n) 
    reads *(s1 + (0 .. n - 1)), *(s2 + (0 .. n - 1));
  
  axiom wcsncmp_zero{L}:
    ∀ int *s1, int *s2;
    ∀ ℤ n;
      wcsncmp(s1, s2, n) ≡ 0 ⇔
      (wcslen(s1) < n ∧ wcscmp(s1, s2) ≡ 0) ∨
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic WcsChr {
  logic 𝔹 wcschr{L}(int *wcs, ℤ wc) 
    reads *(wcs + (0 .. wcslen(wcs)));
  
  axiom wcschr_def{L}:
    ∀ int *wcs;
    ∀ ℤ wc;
      wcschr(wcs, wc) ≢ (0 ≢ 0) ⇔
      (∃ ℤ i; 0 ≤ i ≤ wcslen(wcs) ∧ *(wcs + i) ≡ (int)((int)wc));
  
  }
 */
/*@ logic ℤ minimum(ℤ i, ℤ j) = i < j? i: j;
 */
/*@ logic ℤ maximum(ℤ i, ℤ j) = i < j? j: i;
 */
/*@
predicate valid_string{L}(char *s) =
  0 ≤ strlen(s) ∧ \valid(s + (0 .. strlen(s)));
 */
/*@
predicate valid_read_string{L}(char *s) =
  0 ≤ strlen(s) ∧ \valid_read(s + (0 .. strlen(s)));
 */
/*@
predicate valid_read_nstring{L}(char *s, ℤ n) =
  (\valid_read(s + (0 .. n - 1)) ∧ \initialized(s + (0 .. n - 1))) ∨
  valid_read_string(s);
 */
/*@
predicate valid_string_or_null{L}(char *s) = s ≡ \null ∨ valid_string(s);
 */
/*@
predicate valid_wstring{L}(int *s) =
  0 ≤ wcslen(s) ∧ \valid(s + (0 .. wcslen(s)));
 */
/*@
predicate valid_read_wstring{L}(int *s) =
  0 ≤ wcslen(s) ∧ \valid_read(s + (0 .. wcslen(s)));
 */
/*@
predicate valid_read_nwstring{L}(int *s, ℤ n) =
  (\valid_read(s + (0 .. n - 1)) ∧ \initialized(s + (0 .. n - 1))) ∨
  valid_read_wstring(s);
 */
/*@
predicate valid_wstring_or_null{L}(int *s) =
  s ≡ \null ∨ valid_wstring(s);

*/
/*@ ghost int __fc_heap_status; */
/*@ requires freeable: p ≡ \null ∨ \freeable(p);
    assigns __fc_heap_status;
    assigns __fc_heap_status \from __fc_heap_status;
    frees p;
    
    behavior deallocation:
      assumes nonnull_p: p ≢ \null;
      ensures freed: \allocable(\old(p));
      assigns __fc_heap_status;
      assigns __fc_heap_status \from __fc_heap_status;
    
    behavior no_deallocation:
      assumes null_p: p ≡ \null;
      assigns \nothing;
      allocates \nothing;
    
    complete behaviors no_deallocation, deallocation;
    disjoint behaviors no_deallocation, deallocation;
 */
void free(void *p);

/*@
axiomatic dynamic_allocation {
  predicate is_allocable{L}(ℤ n) 
    reads __fc_heap_status;
  
  axiom never_allocable{L}:
    ∀ ℤ i; i < 0 ∨ i > 4294967295U ⇒ ¬is_allocable(i);
  
  }

*/
/*@ assigns __fc_heap_status, \result;
    assigns __fc_heap_status \from size, __fc_heap_status;
    assigns \result \from (indirect: size), (indirect: __fc_heap_status);
    allocates \result;
    
    behavior allocation:
      assumes can_allocate: is_allocable(size);
      ensures allocation: \fresh{Old, Here}(\result,\old(size));
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status \from size, __fc_heap_status;
      assigns \result \from (indirect: size), (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(size);
      ensures null_result: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
      allocates \nothing;
    
    complete behaviors no_allocation, allocation;
    disjoint behaviors no_allocation, allocation;
 */
void *malloc(size_t size);

/*@
predicate non_escaping{L}(void *s, size_t n) =
  ∀ unsigned int i; 0 ≤ i < n ⇒ ¬\initialized((char *)s + i);
 */
/*@
predicate empty_block{L}(void *s) =
  \block_length((char *)s) ≡ 0 ∧ \offset((char *)s) ≡ 0;
 */
/*@
predicate valid_or_empty{L}(void *s, size_t n) =
  (empty_block(s) ∨ \valid_read((char *)s)) ∧
  \valid((char *)s + (0 .. n - 1));
 */
/*@
predicate valid_read_or_empty{L}(void *s, size_t n) =
  (empty_block(s) ∨ \valid_read((char *)s)) ∧
  \valid_read((char *)s + (1 .. n - 1));

*/
/*@ requires valid_s1: valid_read_or_empty(s1, n);
    requires valid_s2: valid_read_or_empty(s2, n);
    requires s1: initialization: \initialized((char *)s1 + (0 .. n - 1));
    requires s2: initialization: \initialized((char *)s2 + (0 .. n - 1));
    requires s1: danglingness: non_escaping(s1, n);
    requires s2: danglingness: non_escaping(s2, n);
    ensures
      logic_spec:
        \result ≡
        memcmp{Pre, Pre}((char *)\old(s1), (char *)\old(s2), \old(n));
    assigns \result;
    assigns \result
      \from (indirect: *((char *)s1 + (0 .. n - 1))),
            (indirect: *((char *)s2 + (0 .. n - 1)));
 */
int memcmp(void const *s1, void const *s2, size_t n);

/*@ requires
      valid:
        valid_read_or_empty(s, n) ∨
        \valid_read((unsigned char *)s + (0 .. memchr_off((char *)s, c, n)));
    requires
      initialization:
        \initialized((unsigned char *)s + (0 .. n - 1)) ∨
        \initialized((unsigned char *)s + (0 .. memchr_off((char *)s, c, n)));
    requires
      danglingness:
        non_escaping(s, n) ∨
        non_escaping(s, (size_t)((int)(memchr_off((char *)s, c, n) + 1)));
    assigns \result;
    assigns \result \from s, c, *((unsigned char *)s + (0 .. n - 1));
    
    behavior found:
      assumes char_found: memchr((char *)s, c, n) ≢ (0 ≢ 0);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures result_char: (int)*((char *)\result) ≡ \old(c);
      ensures
        result_in_str:
          ∀ ℤ i;
            (0 ≤ i < \old(n) ⇒
             *((unsigned char *)\old(s) + i) ≡ \old(c)) ⇒
            \result ≤ \old(s) + i;
    
    behavior not_found:
      assumes char_not_found: memchr((char *)s, c, n) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
 */
void *memchr(void const *s, int c, size_t n);

/*@ requires valid_dest: valid_or_empty(dest, n);
    requires valid_src: valid_read_or_empty(src, n);
    requires
      separation:
        \separated((char *)dest + (0 .. n - 1), (char *)src + (0 .. n - 1));
    ensures
      copied_contents:
        memcmp{Post, Pre}((char *)\old(dest), (char *)\old(src), \old(n)) ≡
        0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *((char *)dest + (0 .. n - 1)), \result;
    assigns *((char *)dest + (0 .. n - 1))
      \from *((char *)src + (0 .. n - 1));
    assigns \result \from dest;
 */
void *memcpy(void * __restrict dest, void const * __restrict src, size_t n);

/*@ requires valid_dest: valid_or_empty(dest, n);
    requires valid_src: valid_read_or_empty(src, n);
    ensures
      copied_contents:
        memcmp{Post, Pre}((char *)\old(dest), (char *)\old(src), \old(n)) ≡
        0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *((char *)dest + (0 .. n - 1)), \result;
    assigns *((char *)dest + (0 .. n - 1))
      \from *((char *)src + (0 .. n - 1));
    assigns \result \from dest;
 */
void *memmove(void *dest, void const *src, size_t n);

/*@ requires valid_s: valid_or_empty(s, n);
    ensures
      acsl_c_equiv: memset((char *)\old(s), \old(c), \old(n)) ≢ (0 ≢ 0);
    ensures result_ptr: \result ≡ \old(s);
    assigns *((char *)s + (0 .. n - 1)), \result;
    assigns *((char *)s + (0 .. n - 1)) \from c;
    assigns \result \from s;
 */
void *memset(void *s, int c, size_t n);

/*@ requires valid_string_s: valid_read_string(s);
    ensures acsl_c_equiv: \result ≡ strlen(\old(s));
    assigns \result;
    assigns \result \from (indirect: *(s + (0 ..)));
 */
size_t strlen(char const *s);

/*@ requires valid_string_s: valid_read_nstring(s, n);
    ensures
      result_bounded: \result ≡ strlen(\old(s)) ∨ \result ≡ \old(n);
    assigns \result;
    assigns \result \from (indirect: *(s + (0 .. n - 1))), (indirect: n);
 */
size_t strnlen(char const *s, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    ensures acsl_c_equiv: \result ≡ strcmp(\old(s1), \old(s2));
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcmp(char const *s1, char const *s2);

/*@ requires valid_string_s1: valid_read_nstring(s1, n);
    requires valid_string_s2: valid_read_nstring(s2, n);
    ensures acsl_c_equiv: \result ≡ strncmp(\old(s1), \old(s2), \old(n));
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 .. n - 1))),
            (indirect: *(s2 + (0 .. n - 1))), (indirect: n);
 */
int strncmp(char const *s1, char const *s2, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcoll(char const *s1, char const *s2);

/*@ requires valid_string_s: valid_read_string(s);
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), c;
    
    behavior found:
      assumes char_found: strchr(s, c) ≢ (0 ≢ 0);
      ensures result_char: *\result ≡ (char)\old(c);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures
        result_in_length: \old(s) ≤ \result ≤ \old(s) + strlen(\old(s));
      ensures result_valid_string: valid_read_string(\result);
      ensures
        result_first_occur:
          ∀ char *p; \old(s) ≤ p < \result ⇒ *p ≢ (char)\old(c);
    
    behavior not_found:
      assumes char_not_found: strchr(s, c) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
    
    behavior default:
      ensures
        result_null_or_same_base:
          \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
 */
char *strchr(char const *s, int c);

/*@ requires valid_string_s: valid_read_string(s);
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), c;
    
    behavior found:
      assumes char_found: strchr(s, c) ≢ (0 ≢ 0);
      ensures result_char: (int)*\result ≡ \old(c);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures result_valid_string: valid_read_string(\result);
    
    behavior not_found:
      assumes char_not_found: strchr(s, c) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
    
    behavior default:
      ensures
        result_null_or_same_base:
          \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
 */
char *strrchr(char const *s, int c);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_reject: valid_read_string(reject);
    ensures result_bounded: 0 ≤ \result ≤ strlen(\old(s));
    assigns \result;
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(reject + (0 ..)));
 */
size_t strcspn(char const *s, char const *reject);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_accept: valid_read_string(accept);
    ensures result_bounded: 0 ≤ \result ≤ strlen(\old(s));
    assigns \result, \result;
    assigns \result \from *(s + (0 ..)), *(accept + (0 ..));
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(accept + (0 ..)));
 */
size_t strspn(char const *s, char const *accept);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_accept: valid_read_string(accept);
    ensures
      result_null_or_same_base:
        \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), *(accept + (0 ..));
 */
char *strpbrk(char const *s, char const *accept);

/*@ requires valid_string_haystack: valid_read_string(haystack);
    requires valid_string_needle: valid_read_string(needle);
    ensures
      result_null_or_in_haystack:
        \result ≡ \null ∨
        (\subset(\result, \old(haystack) + (0 ..)) ∧
         \valid_read(\result) ∧
         memcmp{Pre, Pre}(\result, \old(needle), strlen(\old(needle))) ≡ 0);
    assigns \result;
    assigns \result
      \from haystack, (indirect: *(haystack + (0 ..))),
            (indirect: *(needle + (0 ..)));
 */
char *strstr(char const *haystack, char const *needle);

/*@ requires valid_string_haystack: valid_read_string(haystack);
    requires valid_string_needle: valid_read_string(needle);
    ensures
      result_null_or_in_haystack:
        \result ≡ \null ∨
        (\subset(\result, \old(haystack) + (0 ..)) ∧ \valid_read(\result));
    assigns \result;
    assigns \result
      \from haystack, (indirect: *(haystack + (0 ..))),
            (indirect: *(needle + (0 ..)));
 */
char *strcasestr(char const *haystack, char const *needle);

char *__fc_strtok_ptr;
/*@ requires valid_string_delim: valid_read_string(delim);
    assigns *(s + (0 ..)), *(__fc_strtok_ptr + (0 ..)), \result,
            __fc_strtok_ptr;
    assigns *(s + (0 ..))
      \from *(s + (0 ..)), (indirect: s), (indirect: __fc_strtok_ptr),
            (indirect: *(delim + (0 ..)));
    assigns *(__fc_strtok_ptr + (0 ..))
      \from *(__fc_strtok_ptr + (0 ..)), (indirect: s),
            (indirect: __fc_strtok_ptr), (indirect: *(delim + (0 ..)));
    assigns \result
      \from s, __fc_strtok_ptr, (indirect: *(s + (0 ..))),
            (indirect: *(__fc_strtok_ptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    assigns __fc_strtok_ptr
      \from \old(__fc_strtok_ptr), s,
            (indirect: *(__fc_strtok_ptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    
    behavior new_str:
      assumes s_not_null: s ≢ \null;
      requires
        valid_string_s_or_delim_not_found:
          valid_string(s) ∨
          (valid_read_string(s) ∧
           (∀ int i;
              0 ≤ i < strlen(delim) ⇒
              strchr(s, *(delim + i)) ≡ (0 ≢ 0)));
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(s) + (0 ..));
      ensures ptr_subset: \subset(__fc_strtok_ptr, \old(s) + (0 ..));
      assigns __fc_strtok_ptr, *(s + (0 ..)), \result;
      assigns __fc_strtok_ptr
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
      assigns *(s + (0 ..))
        \from *(s + (0 ..)), (indirect: s), (indirect: *(delim + (0 ..)));
      assigns \result
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
    
    behavior resume_str:
      assumes s_null: s ≡ \null;
      requires not_first_call: __fc_strtok_ptr ≢ \null;
      ensures
        result_subset:
          \result ≡ \null ∨
          \subset(\result, \old(__fc_strtok_ptr) + (0 ..));
      ensures
        ptr_subset: \subset(__fc_strtok_ptr, \old(__fc_strtok_ptr) + (0 ..));
      assigns *(__fc_strtok_ptr + (0 ..)), __fc_strtok_ptr, \result;
      assigns *(__fc_strtok_ptr + (0 ..))
        \from *(__fc_strtok_ptr + (0 ..)), (indirect: __fc_strtok_ptr),
              (indirect: *(delim + (0 ..)));
      assigns __fc_strtok_ptr
        \from \old(__fc_strtok_ptr), (indirect: *(__fc_strtok_ptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
      assigns \result
        \from __fc_strtok_ptr, (indirect: *(__fc_strtok_ptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
    
    complete behaviors resume_str, new_str;
    disjoint behaviors resume_str, new_str;
 */
char *strtok(char * __restrict s, char const * __restrict delim);

/*@ requires valid_string_delim: valid_read_string(delim);
    requires valid_saveptr: \valid(saveptr);
    assigns *(s + (0 ..)), *(*saveptr + (0 ..)), \result, *saveptr;
    assigns *(s + (0 ..))
      \from *(s + (0 ..)), (indirect: s), (indirect: *saveptr),
            (indirect: *(delim + (0 ..)));
    assigns *(*saveptr + (0 ..))
      \from *(*saveptr + (0 ..)), (indirect: s), (indirect: *saveptr),
            (indirect: *(delim + (0 ..)));
    assigns \result
      \from s, *saveptr, (indirect: *(s + (0 ..))),
            (indirect: *(*saveptr + (0 ..))), (indirect: *(delim + (0 ..)));
    assigns *saveptr
      \from \old(*saveptr), s, (indirect: *(*saveptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    
    behavior new_str:
      assumes s_not_null: s ≢ \null;
      requires
        valid_string_s_or_delim_not_found:
          valid_string(s) ∨
          (valid_read_string(s) ∧
           (∀ int i;
              0 ≤ i < strlen(delim) ⇒
              strchr(s, *(delim + i)) ≡ (0 ≢ 0)));
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(s) + (0 ..));
      ensures initialization: \initialized(\old(saveptr));
      ensures saveptr_subset: \subset(*\old(saveptr), \old(s) + (0 ..));
      assigns *saveptr, *(s + (0 ..)), \result;
      assigns *saveptr
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
      assigns *(s + (0 ..))
        \from *(s + (0 ..)), (indirect: s), (indirect: *(delim + (0 ..)));
      assigns \result
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
    
    behavior resume_str:
      assumes s_null: s ≡ \null;
      requires not_first_call: *saveptr ≢ \null;
      requires saveptr: initialization: \initialized(saveptr);
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(*saveptr) + (0 ..));
      ensures
        saveptr_subset: \subset(*\old(saveptr), \old(*saveptr) + (0 ..));
      assigns *(*saveptr + (0 ..)), *saveptr, \result;
      assigns *(*saveptr + (0 ..))
        \from *(*saveptr + (0 ..)), (indirect: *saveptr),
              (indirect: *(delim + (0 ..)));
      assigns *saveptr
        \from \old(*saveptr), (indirect: *(*saveptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
      assigns \result
        \from *saveptr, (indirect: *(*saveptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
    
    complete behaviors resume_str, new_str;
    disjoint behaviors resume_str, new_str;
 */
char *strtok_r(char * __restrict s, char const * __restrict delim,
               char ** __restrict saveptr);

/*@ requires
      valid_string_stringp: \valid(stringp) ∧ valid_string(*stringp);
    requires valid_string_delim: valid_read_string(delim);
    assigns *stringp, \result;
    assigns *stringp \from *(delim + (..)), *(*(stringp + (..)));
    assigns \result \from *(delim + (..)), *(*(stringp + (..)));
 */
char *strsep(char **stringp, char const *delim);

char __fc_strerror[64];
char * const __fc_p_strerror = __fc_strerror;
/*@ ensures result_internal_str: \result ≡ __fc_p_strerror;
    ensures result_nul_terminated: *(\result + 63) ≡ 0;
    ensures result_valid_string: valid_read_string(\result);
    assigns \result;
    assigns \result \from __fc_p_strerror, (indirect: errnum);
 */
char *strerror(int errnum);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_string: \valid(dest + (0 .. strlen(src)));
    requires
      separation:
        \separated(dest + (0 .. strlen(src)), src + (0 .. strlen(src)));
    ensures equal_contents: strcmp(\old(dest), \old(src)) ≡ 0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest + (0 .. strlen{Old}(src))), \result;
    assigns *(dest + (0 .. strlen{Old}(src)))
      \from *(src + (0 .. strlen{Old}(src)));
    assigns \result \from dest;
 */
char *strcpy(char * __restrict dest, char const * __restrict src);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_nstring: \valid(dest + (0 .. n - 1));
    requires separation: \separated(dest + (0 .. n - 1), src + (0 .. n - 1));
    ensures result_ptr: \result ≡ \old(dest);
    ensures initialization: \initialized(\old(dest) + (0 .. \old(n) - 1));
    assigns *(dest + (0 .. n - 1)), \result;
    assigns *(dest + (0 .. n - 1)) \from *(src + (0 .. n - 1));
    assigns \result \from dest;
    
    behavior complete:
      assumes src_fits: strlen(src) < n;
      ensures equal_after_copy: strcmp(\old(dest), \old(src)) ≡ 0;
    
    behavior partial:
      assumes src_too_long: n ≤ strlen(src);
      ensures
        equal_prefix:
          memcmp{Post, Post}(\old(dest), \old(src), \old(n)) ≡ 0;
 */
char *strncpy(char * __restrict dest, char const * __restrict src, size_t n);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_nstring: \valid(dest + (0 .. n - 1));
    requires
      separation:
        \separated(
          dest + (0 .. n - 1), src + (0 .. \max(n - 1, strlen(src)))
          );
    ensures
      initialization:
        \initialized(\old(dest) + (0 .. \min(strlen(\old(src)), \old(n) - 1)));
    ensures bounded_result: \result ≡ strlen(\old(src));
    assigns *(dest + (0 .. n - 1)), \result;
    assigns *(dest + (0 .. n - 1)) \from *(src + (0 .. n - 1));
    assigns \result
      \from (indirect: src), (indirect: *(src + (0 .. n - 1))), (indirect: n);
 */
size_t strlcpy(char * __restrict dest, char const * __restrict src, size_t n);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_string: \valid(dest + (0 .. strlen(src)));
    requires
      separation:
        \separated(dest + (0 .. strlen(src)), src + (0 .. strlen(src)));
    ensures equal_contents: strcmp(\old(dest), \old(src)) ≡ 0;
    ensures points_to_end: \result ≡ \old(dest) + strlen(\old(dest));
    assigns *(dest + (0 .. strlen{Old}(src))), \result;
    assigns *(dest + (0 .. strlen{Old}(src)))
      \from *(src + (0 .. strlen{Old}(src)));
    assigns \result \from dest;
 */
char *stpcpy(char * __restrict dest, char const * __restrict src);

/*@ requires valid_string_src: valid_read_string(src);
    requires valid_string_dest: valid_string(dest);
    requires room_string: \valid(dest + (0 .. strlen(dest) + strlen(src)));
    ensures
      sum_of_lengths: strlen(\old(dest)) ≡ \old(strlen(dest) + strlen(src));
    ensures
      dest: initialization:
        \initialized(\old(dest) + (0 .. \old(strlen(dest) + strlen(src))));
    ensures
      dest_null_terminated:
        *(\old(dest) + \old(strlen(dest) + strlen(src))) ≡ 0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest +
              (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src))),
            \result;
    assigns
    *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src)))
      \from *(src + (0 .. strlen{Old}(src)));
    assigns \result \from dest;
 */
char *strcat(char * __restrict dest, char const * __restrict src);

/*@ requires valid_nstring_src: valid_read_nstring(src, n);
    requires valid_string_dest: valid_string(dest);
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n)), \result;
    assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n))
      \from *(src + (0 .. n));
    assigns \result \from dest;
    
    behavior complete:
      assumes
        valid_string_src_fits: valid_read_string(src) ∧ strlen(src) ≤ n;
      requires
        room_string: \valid((dest + strlen(dest)) + (0 .. strlen(src)));
      ensures
        sum_of_lengths:
          strlen(\old(dest)) ≡ \old(strlen(dest) + strlen(src));
      assigns *(dest +
                (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src))),
              \result;
      assigns
      *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src)))
        \from *(src + (0 .. strlen{Old}(src)));
      assigns \result \from dest;
    
    behavior partial:
      assumes
        valid_string_src_too_large:
          ¬(valid_read_string(src) ∧ strlen(src) ≤ n);
      requires room_string: \valid((dest + strlen(dest)) + (0 .. n));
      ensures
        sum_of_bounded_lengths:
          strlen(\old(dest)) ≡ \old(strlen(dest)) + \old(n);
      assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n)),
              \result;
      assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n))
        \from *(src + (0 .. strlen{Old}(src)));
      assigns \result \from dest;
 */
char *strncat(char * __restrict dest, char const * __restrict src, size_t n);

/*@ requires valid_string_src: valid_read_string(src);
    requires valid_string_dest: valid_string(dest);
    requires room_nstring: \valid(dest + (0 .. n - 1));
    ensures
      bounded_result: \result ≡ strlen(\old(dest)) + strlen(\old(src));
    assigns *(dest + (strlen{Old}(dest) .. n)), \result;
    assigns *(dest + (strlen{Old}(dest) .. n))
      \from (indirect: n), *(src + (0 .. strlen{Old}(src)));
    assigns \result
      \from (indirect: src), (indirect: *(src + (0 .. n - 1))), (indirect: n);
 */
size_t strlcat(char * __restrict dest, char const * __restrict src, size_t n);

/*@ requires valid_dest: \valid(dest + (0 .. n - 1));
    requires valid_string_src: valid_read_string(src);
    assigns *(dest + (0 .. n - 1)), \result;
    assigns *(dest + (0 .. n - 1))
      \from (indirect: *(src + (0 ..))), (indirect: n);
    assigns \result \from dest;
 */
size_t strxfrm(char * __restrict dest, char const * __restrict src, size_t n);

/*@ requires valid_string_s: valid_read_string(s);
    assigns \result;
    assigns \result
      \from (indirect: *(s + (0 .. strlen{Old}(s)))),
            (indirect: __fc_heap_status);
    allocates \result;
    
    behavior allocation:
      assumes can_allocate: is_allocable(strlen(s));
      ensures allocation: \fresh{Old, Here}(\result,strlen(\old(s)));
      ensures
        result_valid_string_and_same_contents:
          valid_string(\result) ∧ strcmp(\result, \old(s)) ≡ 0;
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status \from (indirect: s), __fc_heap_status;
      assigns \result
        \from (indirect: *(s + (0 .. strlen{Old}(s)))),
              (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(strlen(s));
      ensures result_null: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
      allocates \nothing;
 */
char *strdup(char const *s);

/*@ assigns \result;
    assigns \result
      \from (indirect: *(s + (0 .. strlen{Old}(s)))), (indirect: n),
            (indirect: __fc_heap_status);
    allocates \result;
    
    behavior allocation:
      assumes can_allocate: is_allocable(\min(strlen(s), n + 1));
      ensures
        allocation:
          \fresh{Old, Here}(\result,\min(strlen(\old(s)), \old(n) + 1));
      ensures
        result_valid_string_bounded_and_same_prefix:
          \valid(\result + (0 .. \min(strlen(\old(s)), \old(n)))) ∧
          valid_string(\result) ∧ strlen(\result) ≤ \old(n) ∧
          strncmp(\result, \old(s), \old(n)) ≡ 0;
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status
        \from (indirect: s), (indirect: n), __fc_heap_status;
      assigns \result
        \from (indirect: *(s + (0 .. strlen{Old}(s)))), (indirect: n),
              (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(\min(strlen(s), n + 1));
      ensures result_null: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
      allocates \nothing;
 */
char *strndup(char const *s, size_t n);

char __fc_strsignal[64];
char * const __fc_p_strsignal = __fc_strsignal;
/*@ ensures result_internal_str: \result ≡ __fc_p_strsignal;
    ensures result_nul_terminated: *(\result + 63) ≡ 0;
    ensures result_valid_string: valid_read_string(\result);
    assigns \result;
    assigns \result \from __fc_p_strsignal, (indirect: signum);
 */
char *strsignal(int signum);

/*@ requires valid_memory_area: \valid((char *)s + (0 .. n - 1));
    ensures
      initialization: s_initialized:
        \initialized((char *)\old(s) + (0 .. \old(n) - 1));
    ensures
      zero_initialized: \subset(*((char *)\old(s) + (0 .. \old(n) - 1)), {0});
    assigns *((char *)s + (0 .. n - 1));
    assigns *((char *)s + (0 .. n - 1)) \from \nothing;
 */
void bzero(void *s, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcasecmp(char const *s1, char const *s2);

/*@ requires valid_string_s1: valid_read_nstring(s1, n);
    requires valid_string_s2: valid_read_nstring(s2, n);
    assigns \result;
    assigns \result
      \from (indirect: n), (indirect: *(s1 + (0 .. n - 1))),
            (indirect: *(s2 + (0 .. n - 1)));
 */
int strncasecmp(char const *s1, char const *s2, size_t n);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void exception::Ctor(struct exception const *this);

/*@ requires \separated(this, exn);
    requires \valid_read(this);
    requires \valid_read(exn);
 */
void exception::Ctor(struct exception const *this,
                     struct exception const *exn);

/*@ requires \valid(this);
    requires \valid_read(exn);
    ensures \valid(\result);
 */
struct exception *operator=(struct exception *this,
                            struct exception const *exn);

/*@ requires \valid_read(this); */
void exception::Dtor(struct exception const *this);

/*@ requires \valid_read(this); */
char const *what(struct exception const *this);

void bad_exception::Dtor(struct bad_exception const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_exception::Ctor(struct bad_exception const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_exception::Ctor(struct bad_exception const *this,
                         struct bad_exception const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_exception *operator=(struct bad_exception *this,
                                struct bad_exception const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
char const *what(struct bad_exception const *this);

/*@ requires \valid_read(this); */
void bad_exception::Dtor(struct bad_exception const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];

/*@ requires \valid_read(this); */
void nested_exception::Ctor(struct nested_exception const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void nested_exception::Ctor(struct nested_exception const *this,
                            struct nested_exception const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct nested_exception *operator=(struct nested_exception *this,
                                   struct nested_exception const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
void nested_exception::Dtor(struct nested_exception const *this);

/*@ requires \valid_read(this); */
void rethrow_nested(struct nested_exception const *this);

/*@ requires \valid_read(this); */
exception_ptr nested_ptr(struct nested_exception const *this);

int _frama_c_find_dynamic_cast_aux(struct _frama_c_rtti_name_info_node *target_info,
                                   struct _frama_c_rtti_name_info_content *concrete_base,
                                   int number_of_bases,
                                   int found_shift_object,
                                   int found_shift_vmt, int last_shift_vmt,
                                   int *shift_object, int *distance)
{
  int result = 0;
  struct _frama_c_rtti_name_info_content *cursor = concrete_base;
  int is_over = 0;
  int base_index = 0;
  while (base_index < number_of_bases) {
    if (cursor->value == target_info) {
      if (*distance < 0) goto _LOR;
      else 
        if (*distance >= 1) {
          _LOR:
          {
            if (found_shift_vmt == cursor->shift_vmt) *distance = 0;
            else *distance = 1;
            *shift_object = found_shift_object - cursor->shift_object;
            result = 1;
          }
        }
    }
    else 
      if (cursor->shift_vmt <= found_shift_vmt) {
        int tmp_5;
        if (base_index < number_of_bases - 1) tmp_5 = (cursor + 1)->shift_vmt > found_shift_vmt;
        else {
          int tmp_4;
          if (last_shift_vmt == -1) tmp_4 = 1;
          else 
            if (found_shift_vmt < last_shift_vmt) tmp_4 = 1; else tmp_4 = 0;
          tmp_5 = tmp_4;
        }
        if (tmp_5) {
          int tmp_0;
          int tmp;
          int local_distance = 0;
          int local_shift_object = 0;
          if (base_index < number_of_bases - 1) tmp = (cursor + 1)->shift_vmt;
          else tmp = last_shift_vmt;
          ;
          ;
          ;
          ;
          ;
          tmp_0 = _frama_c_find_dynamic_cast_aux(target_info,
                                                 (cursor->value)->base_classes,
                                                 (cursor->value)->number_of_base_classes,
                                                 found_shift_object - cursor->shift_object,
                                                 found_shift_vmt - cursor->shift_vmt,
                                                 tmp,& local_shift_object,
                                                 & local_distance);
          int local_result = tmp_0;
          if (local_result != 0) 
            if (local_distance >= 0) 
              if (*distance < 0) goto _LOR_0;
              else 
                if (*distance >= local_distance) {
                  _LOR_0:
                  {
                    result = local_result;
                    *shift_object = local_shift_object - cursor->shift_object;
                    *distance = local_distance;
                  }
                }
          is_over = 1;
        }
        else goto _LAND;
      }
      else {
        _LAND: ;
        if (*distance < 0) goto _LOR_2;
        else 
          if (*distance >= 1) {
            _LOR_2:
            {
              int tmp_2;
              int tmp_1;
              int local_distance_0 = 0;
              int local_shift_object_0 = 0;
              if (base_index < number_of_bases + 1) tmp_1 = (cursor + 1)->shift_vmt;
              else tmp_1 = last_shift_vmt;
              ;
              ;
              ;
              ;
              ;
              tmp_2 = _frama_c_find_dynamic_cast_aux(target_info,
                                                     (cursor->value)->base_classes,
                                                     (cursor->value)->number_of_base_classes,
                                                     found_shift_object - cursor->shift_object,
                                                     found_shift_vmt - cursor->shift_vmt,
                                                     tmp_1,
                                                     & local_shift_object_0,
                                                     & local_distance_0);
              int local_result_0 = tmp_2;
              if (local_result_0 != 0) 
                if (local_distance_0 >= 0) 
                  if (*distance < 0) goto _LOR_1;
                  else {
                    int tmp_3;
                    if (is_over == 0) tmp_3 = local_distance_0;
                    else tmp_3 = local_distance_0 + 1;
                    ;
                    if (*distance > tmp_3) {
                      _LOR_1:
                      {
                        result = local_result_0;
                        *shift_object = local_shift_object_0 - cursor->shift_object;
                        *distance = local_distance_0 + 1;
                      }
                    }
                  }
            }
          }
      }
    cursor ++;
    base_index ++;
  }
  return result;
}

int _frama_c_find_dynamic_cast(struct _frama_c_rtti_name_info_node *declared_info,
                               struct _frama_c_vmt *declared_vmt,
                               struct _frama_c_rtti_name_info_node *target_info,
                               int *shift_object)
{
  int __retres;
  int shift_vmt;
  int elaborated_shift_target;
  struct _frama_c_rtti_name_info_content *cursor;
  int number_of_bases;
  int tmp_0;
  struct _frama_c_rtti_name_info_node *concrete_info =
    declared_vmt->rtti_info;
  int elaborated_shift_vmt = 0;
  int elaborated_shift_object = 0;
  int cursor_index = 0;
  int distance = -1;
  if (concrete_info->pvmt > declared_vmt) {
    __retres = 0;
    goto return_label;
  }
  else 
    if (declared_vmt > concrete_info->pvmt + declared_vmt->table_size) {
      __retres = 0;
      goto return_label;
    }
  shift_vmt = declared_vmt - concrete_info->pvmt;
  if (concrete_info == declared_info) {
    *shift_object = 0;
    __retres = target_info == declared_info;
    goto return_label;
  }
  if (target_info == concrete_info) elaborated_shift_target = 0;
  else elaborated_shift_target = -1;
  cursor = concrete_info->base_classes;
  number_of_bases = concrete_info->number_of_base_classes;
  while (1) {
    while (1) {
      if (cursor_index < number_of_bases) {
        if (! (elaborated_shift_vmt + cursor->shift_vmt < shift_vmt)) 
          break;
      }
      else break;
      {
        struct _frama_c_rtti_name_info_content *tmp;
        if (cursor_index < number_of_bases - 1) tmp = cursor + 1;
        else tmp = (struct _frama_c_rtti_name_info_content *)0;
        struct _frama_c_rtti_name_info_content *next_cursor = tmp;
        if (next_cursor != (struct _frama_c_rtti_name_info_content *)0) 
          if (elaborated_shift_vmt + next_cursor->shift_vmt <= shift_vmt) {
            cursor = next_cursor;
            cursor_index ++;
          }
          else break;
        else break;
      }
    }
    if (cursor_index < number_of_bases) {
      elaborated_shift_vmt += cursor->shift_vmt;
      elaborated_shift_object += cursor->shift_object;
      if (cursor->value == target_info) elaborated_shift_target = elaborated_shift_object;
      if (elaborated_shift_vmt == shift_vmt) 
        if (cursor->value == declared_info) {
          if (elaborated_shift_target >= 0) {
            *shift_object = elaborated_shift_target - elaborated_shift_object;
            __retres = 1;
            goto return_label;
          }
          break;
        }
      cursor = (cursor->value)->base_classes;
      number_of_bases = (cursor->value)->number_of_base_classes;
      cursor_index = 0;
    }
    if (! (cursor_index < number_of_bases)) break;
  }
  if (cursor_index >= number_of_bases) {
    __retres = 0;
    goto return_label;
  }
  tmp_0 = _frama_c_find_dynamic_cast_aux(target_info,
                                         concrete_info->base_classes,
                                         concrete_info->number_of_base_classes,
                                         elaborated_shift_object,shift_vmt,
                                         -1,shift_object,& distance);
  __retres = tmp_0;
  return_label: return __retres;
}

struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& exception::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "exception",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_exception::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_exception *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_exception",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[1] =
  {{.method_ptr = (void (*)())(& nested_exception::Dtor), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "nested_exception",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 1,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "allocator",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this)
{
  this->_ref = (struct __shared_ref_base *)0;
  return;
}

void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct Aircraft *p);

/*@ requires \separated(this, r);
    requires \valid_read(this);
    requires \valid_read(r);
 */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct shared_ptr<Aircraft> const *r);

/*@ requires \separated(this, r);
    requires \valid_read(this);
    requires \valid(r);
 */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct shared_ptr<Aircraft> *r)
{
  this->__ptr = r->__ptr;
  this->_ref = r->_ref;
  r->__ptr = (struct Aircraft *)0;
  r->_ref = (struct __shared_ref_base *)0;
  return;
}

void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct weak_ptr<Aircraft> const *r);

/*@ requires \valid_read(this); */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                nullptr_t __frama_c_arg_0);

void shared_ptr<Aircraft>::Dtor(struct shared_ptr<Aircraft> const *this);

/*@ requires \valid(this);
    requires \valid_read(r);
    ensures \valid(\result); */
struct shared_ptr<Aircraft> *operator=(struct shared_ptr<Aircraft> *this,
                                       struct shared_ptr<Aircraft> const *r);

/*@ requires \valid(this);
    requires \valid(r);
    ensures \valid(\result); */
struct shared_ptr<Aircraft> *operator=(struct shared_ptr<Aircraft> *this,
                                       struct shared_ptr<Aircraft> *r);

/*@ requires \valid(this);
    requires \valid(r); */
void swap(struct shared_ptr<Aircraft> *this, struct shared_ptr<Aircraft> *r);

void reset(struct shared_ptr<Aircraft> *this);

/*@ requires \valid_read(this); */
struct Aircraft *get(struct shared_ptr<Aircraft> const *this)
{
  struct Aircraft *__retres;
  __retres = this->__ptr;
  return __retres;
}

/*@ requires \valid_read(this);
    ensures \valid(\result); */
struct Aircraft *operator*(struct shared_ptr<Aircraft> const *this);

/*@ requires \valid_read(this); */
struct Aircraft *std::shared_ptr<Aircraft>::operator->(struct shared_ptr<Aircraft> const *this)
{
  struct Aircraft *tmp;
  tmp = get(this);
  return tmp;
}

/*@ requires \valid_read(this); */
long use_count(struct shared_ptr<Aircraft> const *this);

/*@ requires \valid_read(this); */
_Bool unique(struct shared_ptr<Aircraft> const *this);

/*@ requires \valid_read(this); */
_Bool conversion(bool)(struct shared_ptr<Aircraft> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "shared_ptr",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct __shared_ref_base *operator=(struct __shared_ref_base *this,
                                    struct __shared_ref_base const *__frama_c_arg_0);

struct __shared_ref_base *operator=(struct __shared_ref_base *this,
                                    struct __shared_ref_base *__frama_c_arg_0);

void __shared_ref_base::Dtor(struct __shared_ref_base const *this);

void __shared_ref_base::Ctor(struct __shared_ref_base const *this,
                             struct __shared_ref_base const *__frama_c_arg_0);

void __shared_ref_base::Ctor(struct __shared_ref_base const *this,
                             struct __shared_ref_base *__frama_c_arg_0);

void __shared_ref_base::Ctor(struct __shared_ref_base const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[7];

/*@ requires \valid(this); */
void unlink(struct __shared_ref_base *this);

/*@ requires \valid(this); */
void link(struct __shared_ref_base *this);

/*@ requires \valid(this); */
long count(struct __shared_ref_base *this);

/*@ requires \valid(this); */
void weak_unlink(struct __shared_ref_base *this);

/*@ requires \valid(this); */
void weak_link(struct __shared_ref_base *this);

/*@ requires \valid(this); */
struct __shared_ref_base *ref(struct __shared_ref_base *this);

/*@ requires \valid(this); */
void *get_deleter(struct __shared_ref_base *this)
{
  void *__retres;
  __retres = (void *)0;
  return __retres;
}

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref_base *operator=(struct __shared_ref_base *this,
                                    struct __shared_ref_base const *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return this;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref_base *operator=(struct __shared_ref_base *this,
                                    struct __shared_ref_base *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return this;
}

/*@ requires \valid_read(this); */
void __shared_ref_base::Dtor(struct __shared_ref_base const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __shared_ref_base::Ctor(struct __shared_ref_base const *this,
                             struct __shared_ref_base const *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __shared_ref_base::Ctor(struct __shared_ref_base const *this,
                             struct __shared_ref_base *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return;
}

/*@ requires \valid_read(this); */
void __shared_ref_base::Ctor(struct __shared_ref_base const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  return;
}

/*@ requires \valid_read(this); */
void shared_ptr<Aircraft>::Dtor(struct shared_ptr<Aircraft> const *this)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_0 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 0;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_0->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_0->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
  }
  __ret_label: return;
}

/*@ requires \valid(this); */
void reset(struct shared_ptr<Aircraft> *this)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_1 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 0;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_1->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_1->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
    this->_ref = (struct __shared_ref_base *)0;
  }
  __ret_label: return;
}

struct _frama_c_vmt_content _frama_c_vmt[7] =
  {{.method_ptr = (void (*)())(& unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& link), .shift_this = 0},
   {.method_ptr = (void (*)())(& count), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_link), .shift_this = 0},
   {.method_ptr = (void (*)())(& ref), .shift_this = 0},
   {.method_ptr = (void (*)())(& get_deleter), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__shared_ref_base",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 7,
   .rtti_info = & _frama_c_rtti_name_info};
struct __shared_ref<void> *operator=(struct __shared_ref<void> *this,
                                     struct __shared_ref<void> const *__frama_c_arg_0);

struct __shared_ref<void> *operator=(struct __shared_ref<void> *this,
                                     struct __shared_ref<void> *__frama_c_arg_0);

void __shared_ref<void>::Dtor(struct __shared_ref<void> const *this);

void __shared_ref<void>::Ctor(struct __shared_ref<void> const *this,
                              struct __shared_ref<void> const *__frama_c_arg_0);

void __shared_ref<void>::Ctor(struct __shared_ref<void> const *this,
                              struct __shared_ref<void> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[7];

/*@ requires \valid_read(this); */
void __shared_ref<void>::Ctor(struct __shared_ref<void> const *this, void *p);

/*@ requires \valid(this); */
void unlink(struct __shared_ref<void> *this);

/*@ requires \valid(this); */
void link(struct __shared_ref<void> *this);

/*@ requires \valid(this); */
long count(struct __shared_ref<void> *this);

/*@ requires \valid(this); */
void weak_unlink(struct __shared_ref<void> *this);

/*@ requires \valid(this); */
void weak_link(struct __shared_ref<void> *this);

/*@ requires \valid(this); */
struct __shared_ref_base *ref(struct __shared_ref<void> *this);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref<void> *operator=(struct __shared_ref<void> *this,
                                     struct __shared_ref<void> const *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE17__shared_ref_base,
            & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return this;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref<void> *operator=(struct __shared_ref<void> *this,
                                     struct __shared_ref<void> *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE17__shared_ref_base,
            & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return this;
}

/*@ requires \valid_read(this); */
void __shared_ref<void>::Dtor(struct __shared_ref<void> const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  __shared_ref_base::Dtor(& this->_frama_c__ZN3stdE17__shared_ref_base);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __shared_ref<void>::Ctor(struct __shared_ref<void> const *this,
                              struct __shared_ref<void> const *__frama_c_arg_0)
{
  __shared_ref_base::Ctor(& this->_frama_c__ZN3stdE17__shared_ref_base,
                          & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __shared_ref<void>::Ctor(struct __shared_ref<void> const *this,
                              struct __shared_ref<void> *__frama_c_arg_0)
{
  __shared_ref_base::Ctor(& this->_frama_c__ZN3stdE17__shared_ref_base,
                          & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return;
}

struct _frama_c_vmt_content _frama_c_vmt[7] =
  {{.method_ptr = (void (*)())(& unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& link), .shift_this = 0},
   {.method_ptr = (void (*)())(& count), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_link), .shift_this = 0},
   {.method_ptr = (void (*)())(& ref), .shift_this = 0},
   {.method_ptr = (void (*)())(& get_deleter),
    .shift_this = (char *)(& ((struct __shared_ref<void> *)0)->_frama_c__ZN3stdE17__shared_ref_base) - (char *)(& ((struct __shared_ref<void> *)0)->_frama_c__ZN3stdE17__shared_ref_base)}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct __shared_ref<void> *)0)->_frama_c__ZN3stdE17__shared_ref_base),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__shared_ref",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 7,
   .rtti_info = & _frama_c_rtti_name_info};
struct __shared_ref<Aircraft> *operator=(struct __shared_ref<Aircraft> *this,
                                         struct __shared_ref<Aircraft> const *__frama_c_arg_0);

struct __shared_ref<Aircraft> *operator=(struct __shared_ref<Aircraft> *this,
                                         struct __shared_ref<Aircraft> *__frama_c_arg_0);

void __shared_ref<Aircraft>::Dtor(struct __shared_ref<Aircraft> const *this);

void __shared_ref<Aircraft>::Ctor(struct __shared_ref<Aircraft> const *this,
                                  struct __shared_ref<Aircraft> const *__frama_c_arg_0);

void __shared_ref<Aircraft>::Ctor(struct __shared_ref<Aircraft> const *this,
                                  struct __shared_ref<Aircraft> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[7];

/*@ requires \valid_read(this); */
void __shared_ref<Aircraft>::Ctor(struct __shared_ref<Aircraft> const *this,
                                  struct Aircraft *p)
{
  __shared_ref_base::Ctor(& this->_frama_c__ZN3stdE17__shared_ref_base);
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  this->__ptr = p;
  this->_n = (long)1;
  this->_w = (long)0;
  return;
}

void unlink(struct __shared_ref<Aircraft> *this);

/*@ requires \valid(this); */
void link(struct __shared_ref<Aircraft> *this)
{
  (this->_n) ++;
  return;
}

/*@ requires \valid(this); */
long count(struct __shared_ref<Aircraft> *this)
{
  long __retres;
  __retres = this->_n;
  return __retres;
}

void weak_unlink(struct __shared_ref<Aircraft> *this);

/*@ requires \valid(this); */
void weak_link(struct __shared_ref<Aircraft> *this)
{
  (this->_w) ++;
  return;
}

/*@ requires \valid(this); */
struct __shared_ref_base *ref(struct __shared_ref<Aircraft> *this)
{
  struct __shared_ref_base *__retres;
  __retres = & this->_frama_c__ZN3stdE17__shared_ref_base;
  return __retres;
}

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref<Aircraft> *operator=(struct __shared_ref<Aircraft> *this,
                                         struct __shared_ref<Aircraft> const *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE17__shared_ref_base,
            & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return this;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct __shared_ref<Aircraft> *operator=(struct __shared_ref<Aircraft> *this,
                                         struct __shared_ref<Aircraft> *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE17__shared_ref_base,
            & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return this;
}

/*@ requires \valid_read(this); */
void __shared_ref<Aircraft>::Dtor(struct __shared_ref<Aircraft> const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  __shared_ref_base::Dtor(& this->_frama_c__ZN3stdE17__shared_ref_base);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __shared_ref<Aircraft>::Ctor(struct __shared_ref<Aircraft> const *this,
                                  struct __shared_ref<Aircraft> const *__frama_c_arg_0)
{
  __shared_ref_base::Ctor(& this->_frama_c__ZN3stdE17__shared_ref_base,
                          & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __shared_ref<Aircraft>::Ctor(struct __shared_ref<Aircraft> const *this,
                                  struct __shared_ref<Aircraft> *__frama_c_arg_0)
{
  __shared_ref_base::Ctor(& this->_frama_c__ZN3stdE17__shared_ref_base,
                          & __frama_c_arg_0->_frama_c__ZN3stdE17__shared_ref_base);
  this->__ptr = __frama_c_arg_0->__ptr;
  this->_n = __frama_c_arg_0->_n;
  this->_w = __frama_c_arg_0->_w;
  return;
}

/*@ requires \valid(this); */
void weak_unlink(struct __shared_ref<Aircraft> *this)
{
  (this->_w) --;
  if (this->_w == (long)0) 
    if (this->_n == (long)0) {
      __shared_ref<Aircraft>::Dtor((struct __shared_ref<Aircraft> const *)this);
      free((void *)this);
    }
  return;
}

struct _frama_c_vmt_content _frama_c_vmt[7] =
  {{.method_ptr = (void (*)())(& unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& link), .shift_this = 0},
   {.method_ptr = (void (*)())(& count), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_unlink), .shift_this = 0},
   {.method_ptr = (void (*)())(& weak_link), .shift_this = 0},
   {.method_ptr = (void (*)())(& ref), .shift_this = 0},
   {.method_ptr = (void (*)())(& get_deleter),
    .shift_this = (char *)(& ((struct __shared_ref<Aircraft> *)0)->_frama_c__ZN3stdE17__shared_ref_base) - (char *)(& ((struct __shared_ref<Aircraft> *)0)->_frama_c__ZN3stdE17__shared_ref_base)}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct __shared_ref<Aircraft> *)0)->_frama_c__ZN3stdE17__shared_ref_base),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__shared_ref",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 7,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void weak_ptr<Aircraft>::Ctor(struct weak_ptr<Aircraft> const *this)
{
  this->__ptr = (struct Aircraft *)0;
  this->_ref = (struct __shared_ref_base *)0;
  return;
}

/*@ requires \valid_read(this);
    requires \valid_read(r); */
void weak_ptr<Aircraft>::Ctor(struct weak_ptr<Aircraft> const *this,
                              struct shared_ptr<Aircraft> const *r);

/*@ requires \separated(this, r);
    requires \valid_read(this);
    requires \valid_read(r);
 */
void weak_ptr<Aircraft>::Ctor(struct weak_ptr<Aircraft> const *this,
                              struct weak_ptr<Aircraft> const *r);

/*@ requires \valid_read(this); */
void weak_ptr<Aircraft>::Dtor(struct weak_ptr<Aircraft> const *this)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_2 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 3;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_2->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_2->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
  }
  __ret_label: return;
}

/*@ requires \valid(this);
    requires \valid_read(r);
    ensures \valid(\result); */
struct weak_ptr<Aircraft> *operator=(struct weak_ptr<Aircraft> *this,
                                     struct weak_ptr<Aircraft> const *r);

/*@ requires \valid(this);
    requires \valid_read(r);
    ensures __fc_exn.exn_uncaught ≡ 0 ⇒ \valid(\result);
 */
struct weak_ptr<Aircraft> *operator=<Aircraft,void>(struct weak_ptr<Aircraft> *this,
                                                    struct shared_ptr<Aircraft> const *r)
{
  if (this->_ref != r->_ref) {
    this->__ptr = r->__ptr;
    if (this->_ref != (struct __shared_ref_base *)0) {
      struct _frama_c_vmt_content *__virtual_tmp_3 =
        (*((struct _frama_c_vmt **)this->_ref))->table + 3;
      (*((void (*)(struct __shared_ref_base *))__virtual_tmp_3->method_ptr))
      ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_3->shift_this));
      if (__fc_exn.exn_uncaught == 1) 
        switch (__fc_exn.exn_kind) {
          default:
          {
            this = (struct weak_ptr<Aircraft> *)0;
            goto __ret_label;
          }
        }
    }
    this->_ref = r->_ref;
    if (this->_ref != (struct __shared_ref_base *)0) {
      struct _frama_c_vmt_content *__virtual_tmp_4 =
        (*((struct _frama_c_vmt **)this->_ref))->table + 4;
      (*((void (*)(struct __shared_ref_base *))__virtual_tmp_4->method_ptr))
      ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_4->shift_this));
      if (__fc_exn.exn_uncaught == 1) 
        switch (__fc_exn.exn_kind) {
          default:
          {
            this = (struct weak_ptr<Aircraft> *)0;
            goto __ret_label;
          }
        }
    }
  }
  __ret_label: return this;
}

/*@ requires \valid(this);
    requires \valid(r); */
void swap(struct weak_ptr<Aircraft> *this, struct weak_ptr<Aircraft> *r);

/*@ requires \valid(this); */
void reset(struct weak_ptr<Aircraft> *this);

/*@ requires \valid_read(this); */
long use_count(struct weak_ptr<Aircraft> const *this);

/*@ requires \valid_read(this); */
_Bool expired(struct weak_ptr<Aircraft> const *this)
{
  _Bool __retres;
  int tmp_0;
  struct _frama_c_vmt_content *__virtual_tmp_5 =
    (*((struct _frama_c_vmt **)this->_ref))->table + 2;
  if (this->_ref == (struct __shared_ref_base *)0) tmp_0 = 1;
  else {
    long tmp;
    tmp = (*((long (*)(struct __shared_ref_base *))__virtual_tmp_5->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_5->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default: {
                   __retres = (_Bool)0;
                   goto __ret_label;
                 }
      }
    if (tmp == (long)0) tmp_0 = 1; else tmp_0 = 0;
  }
  __retres = (_Bool)(tmp_0 != 0);
  __ret_label: return __retres;
}

/*@ requires \valid_read(this); */
struct shared_ptr<Aircraft> lock(struct weak_ptr<Aircraft> const *this)
{
  struct shared_ptr<Aircraft> __retres;
  _Bool tmp;
  tmp = expired(this);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) {
      default:
      {
        __retres.__ptr = (struct Aircraft *)0;
        __retres._ref = (struct __shared_ref_base *)0;
        goto return_label;
      }
    }
  if (tmp) {
    struct shared_ptr<Aircraft> __fc_tmp_3;
    shared_ptr<Aircraft>::Ctor(& __fc_tmp_3);
    __retres = __fc_tmp_3;
    goto return_label;
  }
  {
    struct shared_ptr<Aircraft> __fc_tmp_4;
    shared_ptr<Aircraft>::Ctor(& __fc_tmp_4,this);
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default:
        {
          __retres.__ptr = (struct Aircraft *)0;
          __retres._ref = (struct __shared_ref_base *)0;
          goto return_label;
        }
      }
    __retres = __fc_tmp_4;
    return_label: return __retres;
  }
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "weak_ptr",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
void bad_weak_ptr::Ctor(struct bad_weak_ptr const *this,
                        struct bad_weak_ptr const *__frama_c_arg_0);

void bad_weak_ptr::Ctor(struct bad_weak_ptr const *this,
                        struct bad_weak_ptr *__frama_c_arg_0);

struct bad_weak_ptr *operator=(struct bad_weak_ptr *this,
                               struct bad_weak_ptr const *__frama_c_arg_0);

struct bad_weak_ptr *operator=(struct bad_weak_ptr *this,
                               struct bad_weak_ptr *__frama_c_arg_0);

void bad_weak_ptr::Dtor(struct bad_weak_ptr const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_weak_ptr::Ctor(struct bad_weak_ptr const *this)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception);
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_weak_ptr::Ctor(struct bad_weak_ptr const *this,
                        struct bad_weak_ptr const *__frama_c_arg_0)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception,
                  & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return;
}

void exception::Ctor(struct exception const *this,
                     struct exception *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void bad_weak_ptr::Ctor(struct bad_weak_ptr const *this,
                        struct bad_weak_ptr *__frama_c_arg_0)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception,
                  & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return;
}

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_weak_ptr *operator=(struct bad_weak_ptr *this,
                               struct bad_weak_ptr const *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE9exception,
            & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return this;
}

struct exception *operator=(struct exception *this,
                            struct exception *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return this;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_weak_ptr *operator=(struct bad_weak_ptr *this,
                               struct bad_weak_ptr *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE9exception,
            & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return this;
}

/*@ requires \valid_read(this); */
void bad_weak_ptr::Dtor(struct bad_weak_ptr const *this)
{
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "auto_ptr",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(this);
    requires \valid_read(r); */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct weak_ptr<Aircraft> const *r)
{
  _Bool tmp;
  tmp = expired(r);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) default: goto __ret_label;
  if (tmp) {
    struct bad_weak_ptr __fc_tmp_2;
    bad_weak_ptr::Ctor(& __fc_tmp_2);
    __fc_exn.exn_uncaught = 1;
    __fc_exn.exn_kind = __fc_exn_kind___fc_S_ZN3stdE12bad_weak_ptr;
    __fc_exn.exn_obj.__fc_S_ZN3stdE12bad_weak_ptr = __fc_tmp_2;
    goto __ret_label;
  }
  struct _frama_c_vmt_content *__virtual_tmp_6 =
    (*((struct _frama_c_vmt **)r->_ref))->table + 5;
  this->_ref = (*((struct __shared_ref_base *(*)(struct __shared_ref_base *))__virtual_tmp_6->method_ptr))
  ((struct __shared_ref_base *)((char *)r->_ref - __virtual_tmp_6->shift_this));
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) default: goto __ret_label;
  this->__ptr = r->__ptr;
  struct _frama_c_vmt_content *__virtual_tmp_7 =
    (*((struct _frama_c_vmt **)this->_ref))->table + 1;
  (*((void (*)(struct __shared_ref_base *))__virtual_tmp_7->method_ptr))
  ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_7->shift_this));
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) default: goto __ret_label;
  __ret_label: return;
}

struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_weak_ptr::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what),
    .shift_this = (char *)(& ((struct bad_weak_ptr *)0)->_frama_c__ZN3stdE9exception) - (char *)(& ((struct bad_weak_ptr *)0)->_frama_c__ZN3stdE9exception)}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_weak_ptr *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_weak_ptr",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid(__frama_c_arg_0); */
void pass(struct shared_ptr<Aircraft> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__enable_shared_from_this",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void shared_ptr<void>::Ctor(struct shared_ptr<void> const *this)
{
  this->_ref = (struct __shared_ref_base *)0;
  return;
}

void shared_ptr<void>::Ctor(struct shared_ptr<void> const *this,
                            struct shared_ptr<void> const *r);

/*@ requires \separated(this, r);
    requires \valid_read(this);
    requires \valid(r);
 */
void shared_ptr<void>::Ctor(struct shared_ptr<void> const *this,
                            struct shared_ptr<void> *r)
{
  this->__ptr = r->__ptr;
  this->_ref = r->_ref;
  r->__ptr = (void *)0;
  r->_ref = (struct __shared_ref_base *)0;
  return;
}

/*@ requires \valid_read(this); */
void shared_ptr<void>::Ctor(struct shared_ptr<void> const *this,
                            nullptr_t __frama_c_arg_0)
{
  this->_ref = (struct __shared_ref_base *)0;
  return;
}

/*@ requires \valid_read(this); */
void shared_ptr<void>::Dtor(struct shared_ptr<void> const *this)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_8 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 0;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_8->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_8->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
  }
  __ret_label: return;
}

/*@ requires \valid(this);
    requires \valid_read(r);
    ensures __fc_exn.exn_uncaught ≡ 0 ⇒ \valid(\result);
 */
struct shared_ptr<void> *operator=(struct shared_ptr<void> *this,
                                   struct shared_ptr<void> const *r)
{
  if (this->_ref != r->_ref) {
    this->__ptr = r->__ptr;
    if (this->_ref != (struct __shared_ref_base *)0) {
      struct _frama_c_vmt_content *__virtual_tmp_9 =
        (*((struct _frama_c_vmt **)this->_ref))->table + 0;
      (*((void (*)(struct __shared_ref_base *))__virtual_tmp_9->method_ptr))
      ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_9->shift_this));
      if (__fc_exn.exn_uncaught == 1) 
        switch (__fc_exn.exn_kind) {
          default: {
                     this = (struct shared_ptr<void> *)0;
                     goto __ret_label;
                   }
        }
    }
    this->_ref = r->_ref;
    if (this->_ref != (struct __shared_ref_base *)0) {
      struct _frama_c_vmt_content *__virtual_tmp_10 =
        (*((struct _frama_c_vmt **)this->_ref))->table + 1;
      (*((void (*)(struct __shared_ref_base *))__virtual_tmp_10->method_ptr))
      ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_10->shift_this));
      if (__fc_exn.exn_uncaught == 1) 
        switch (__fc_exn.exn_kind) {
          default: {
                     this = (struct shared_ptr<void> *)0;
                     goto __ret_label;
                   }
        }
    }
  }
  __ret_label: return this;
}

/*@ requires \valid(this);
    requires \valid(r);
    ensures __fc_exn.exn_uncaught ≡ 0 ⇒ \valid(\result);
 */
struct shared_ptr<void> *operator=(struct shared_ptr<void> *this,
                                   struct shared_ptr<void> *r)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_11 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 0;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_11->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_11->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default: {
                   this = (struct shared_ptr<void> *)0;
                   goto __ret_label;
                 }
      }
  }
  if (this->_ref != r->_ref) {
    this->__ptr = r->__ptr;
    this->_ref = r->_ref;
  }
  r->_ref = (struct __shared_ref_base *)0;
  __ret_label: return this;
}

/*@ requires \valid(this);
    requires \valid(r); */
void swap(struct shared_ptr<void> *this, struct shared_ptr<void> *r)
{
  if (this->_ref != r->_ref) {
    swap<void*>(& this->__ptr,& r->__ptr);
    swap<std::__shared_ref_base*>(& this->_ref,& r->_ref);
  }
  return;
}

/*@ requires \valid(this); */
void reset(struct shared_ptr<void> *this)
{
  if (this->_ref != (struct __shared_ref_base *)0) {
    struct _frama_c_vmt_content *__virtual_tmp_12 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 0;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_12->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_12->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
    this->_ref = (struct __shared_ref_base *)0;
  }
  __ret_label: return;
}

/*@ requires \valid_read(this); */
void *get(struct shared_ptr<void> const *this)
{
  void *__retres;
  __retres = this->__ptr;
  return __retres;
}

/*@ requires \valid_read(this); */
void *std::shared_ptr<void>::operator->(struct shared_ptr<void> const *this)
{
  void *tmp;
  tmp = get(this);
  return tmp;
}

/*@ requires \valid_read(this); */
long use_count(struct shared_ptr<void> const *this)
{
  long tmp_0;
  struct _frama_c_vmt_content *__virtual_tmp_13 =
    (*((struct _frama_c_vmt **)this->_ref))->table + 2;
  if (this->_ref == (struct __shared_ref_base *)0) tmp_0 = 0L;
  else {
    tmp_0 = (*((long (*)(struct __shared_ref_base *))__virtual_tmp_13->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_13->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default: {
                   tmp_0 = 0L;
                   goto __ret_label;
                 }
      }
  }
  __ret_label: return tmp_0;
}

/*@ requires \valid_read(this); */
_Bool unique(struct shared_ptr<void> const *this)
{
  _Bool __retres;
  int tmp_0;
  struct _frama_c_vmt_content *__virtual_tmp_14 =
    (*((struct _frama_c_vmt **)this->_ref))->table + 2;
  if (this->_ref == (struct __shared_ref_base *)0) tmp_0 = 0;
  else {
    long tmp;
    tmp = (*((long (*)(struct __shared_ref_base *))__virtual_tmp_14->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_14->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default: {
                   __retres = (_Bool)0;
                   goto __ret_label;
                 }
      }
    tmp_0 = tmp == 1L;
  }
  __retres = (_Bool)(tmp_0 != 0);
  __ret_label: return __retres;
}

/*@ requires \valid_read(this); */
_Bool conversion(bool)(struct shared_ptr<void> const *this)
{
  _Bool __retres;
  __retres = (_Bool)(this->__ptr != (void *)0);
  return __retres;
}

/*@ requires \separated(this, r);
    requires \valid_read(this);
    requires \valid_read(r);
 */
void shared_ptr<void>::Ctor(struct shared_ptr<void> const *this,
                            struct shared_ptr<void> const *r)
{
  struct _frama_c_vmt_content *__virtual_tmp_15 =
    (*((struct _frama_c_vmt **)r->_ref))->table + 5;
  if (r->_ref == (struct __shared_ref_base *)0) this->_ref = (struct __shared_ref_base *)0;
  else {
    this->_ref = (*((struct __shared_ref_base *(*)(struct __shared_ref_base *))__virtual_tmp_15->method_ptr))
    ((struct __shared_ref_base *)((char *)r->_ref - __virtual_tmp_15->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
  }
  if (this->_ref != (struct __shared_ref_base *)0) {
    this->__ptr = get(r);
    struct _frama_c_vmt_content *__virtual_tmp_16 =
      (*((struct _frama_c_vmt **)this->_ref))->table + 1;
    (*((void (*)(struct __shared_ref_base *))__virtual_tmp_16->method_ptr))
    ((struct __shared_ref_base *)((char *)this->_ref - __virtual_tmp_16->shift_this));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) default: goto __ret_label;
  }
  else this->__ptr = (void *)0;
  __ret_label: return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "shared_ptr",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires valid_nptr: \valid_read(nptr);
    assigns \result;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
 */
double atof(char const *nptr);

/*@ requires valid_nptr: \valid_read(nptr);
    assigns \result;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
 */
int atoi(char const *nptr);

/*@ requires valid_nptr: \valid_read(nptr);
    assigns \result;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
 */
long atol(char const *nptr);

/*@ requires valid_nptr: \valid_read(nptr);
    assigns \result;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
 */
long long atoll(char const *nptr);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    assigns \result, *endptr;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
double strtod(char const * __restrict nptr, char ** __restrict endptr);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    assigns \result, *endptr;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
float strtof(char const * __restrict nptr, char ** __restrict endptr);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    assigns \result, *endptr;
    assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result \from (indirect: nptr), (indirect: *(nptr + (0 ..)));
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
long double strtold(char const * __restrict nptr, char ** __restrict endptr);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    requires base_range: base ≡ 0 ∨ (2 ≤ base ≤ 36);
    assigns \result, *endptr;
    assigns \result
      \from (indirect: nptr), (indirect: *(nptr + (0 ..))), (indirect: base);
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
            (indirect: base);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
              (indirect: base);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
long strtol(char const * __restrict nptr, char ** __restrict endptr, int base);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    requires base_range: base ≡ 0 ∨ (2 ≤ base ≤ 36);
    assigns \result, *endptr;
    assigns \result
      \from (indirect: nptr), (indirect: *(nptr + (0 ..))), (indirect: base);
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
            (indirect: base);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
              (indirect: base);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
long long strtoll(char const * __restrict nptr, char ** __restrict endptr,
                  int base);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    requires base_range: base ≡ 0 ∨ (2 ≤ base ≤ 36);
    assigns \result, *endptr;
    assigns \result
      \from (indirect: nptr), (indirect: *(nptr + (0 ..))), (indirect: base);
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
            (indirect: base);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
              (indirect: base);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
unsigned long strtoul(char const * __restrict nptr,
                      char ** __restrict endptr, int base);

/*@ requires valid_nptr: \valid_read(nptr);
    requires separation: \separated(nptr, endptr);
    requires base_range: base ≡ 0 ∨ (2 ≤ base ≤ 36);
    assigns \result, *endptr;
    assigns \result
      \from (indirect: nptr), (indirect: *(nptr + (0 ..))), (indirect: base);
    assigns *endptr
      \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
            (indirect: base);
    
    behavior no_storage:
      assumes null_endptr: endptr ≡ \null;
      assigns \result;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
    
    behavior store_position:
      assumes nonnull_endptr: endptr ≢ \null;
      requires valid_endptr: \valid(endptr);
      ensures initialization: \initialized(\old(endptr));
      ensures valid_endptr: \valid_read(\old(endptr));
      ensures position_subset: \subset(*\old(endptr), \old(nptr) + (0 ..));
      assigns \result, *endptr;
      assigns \result
        \from (indirect: nptr), (indirect: *(nptr + (0 ..))),
              (indirect: base);
      assigns *endptr
        \from nptr, (indirect: *(nptr + (0 ..))), (indirect: endptr),
              (indirect: base);
    
    complete behaviors store_position, no_storage;
    disjoint behaviors store_position, no_storage;
 */
unsigned long long strtoull(char const * __restrict nptr,
                            char ** __restrict endptr, int base);

/*@ ghost int __fc_random_counter; */
static unsigned long const __fc_rand_max = (unsigned long)32767;
/*@ ensures result_range: 0 ≤ \result ≤ __fc_rand_max;
    assigns \result, __fc_random_counter;
    assigns \result \from __fc_random_counter;
    assigns __fc_random_counter \from __fc_random_counter;
 */
int rand(void);

/*@ assigns __fc_random_counter;
    assigns __fc_random_counter \from seed; */
void srand(unsigned int seed);

/*@ ensures result_range: 0 ≤ \result ≤ __fc_rand_max;
    assigns \result;
    assigns \result \from __fc_random_counter;
 */
long random(void);

/*@ assigns __fc_random_counter;
    assigns __fc_random_counter \from seed; */
void srandom(unsigned int seed);

int __fc_random48_init;
unsigned short __fc_random48_counter[3];
unsigned short *__fc_p_random48_counter = __fc_random48_counter;
/*@ ensures random48_initialized: __fc_random48_init ≡ 1;
    assigns __fc_random48_counter[0 .. 2], __fc_random48_init;
    assigns __fc_random48_counter[0 .. 2] \from seed;
    assigns __fc_random48_init \from \nothing;
 */
void srand48(long seed);

/*@ requires
      initialized_seed16v: initialization: \initialized(seed16v + (0 .. 2));
    ensures random48_initialized: __fc_random48_init ≡ 1;
    ensures result_counter: \result ≡ __fc_p_random48_counter;
    assigns __fc_random48_counter[0 .. 2], __fc_random48_init, \result;
    assigns __fc_random48_counter[0 .. 2]
      \from (indirect: *(seed16v + (0 .. 2)));
    assigns __fc_random48_init \from \nothing;
    assigns \result \from __fc_p_random48_counter;
 */
unsigned short *seed48(unsigned short * /*[3]*/ seed16v);

/*@ ensures random48_initialized: __fc_random48_init ≡ 1;
    assigns __fc_random48_counter[0 .. 2], __fc_random48_init;
    assigns __fc_random48_counter[0 .. 2] \from *(param + (0 .. 5));
    assigns __fc_random48_init \from \nothing;
 */
void lcong48(unsigned short * /*[7]*/ param);

/*@ requires random48_initialized: __fc_random48_init ≡ 1;
    ensures result_range: \is_finite(\result) ∧ 0.0 ≤ \result < 1.0;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
double drand48(void);

/*@ requires
      initialized_xsubi: initialization: \initialized(xsubi + (0 .. 2));
    ensures result_range: \is_finite(\result) ∧ 0.0 ≤ \result < 1.0;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
double erand48(unsigned short * /*[3]*/ xsubi);

/*@ requires random48_initialized: __fc_random48_init ≡ 1;
    ensures result_range: 0 ≤ \result < 2147483648;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
long lrand48(void);

/*@ requires
      initialized_xsubi: initialization: \initialized(xsubi + (0 .. 2));
    ensures result_range: 0 ≤ \result < 2147483648;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
long nrand48(unsigned short * /*[3]*/ xsubi);

/*@ requires random48_initialized: __fc_random48_init ≡ 1;
    ensures result_range: -2147483648 ≤ \result < 2147483648;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
long mrand48(void);

/*@ requires
      initialized_xsubi: initialization: \initialized(xsubi + (0 .. 2));
    ensures result_range: -2147483648 ≤ \result < 2147483648;
    assigns __fc_random48_counter[0 .. 2], \result;
    assigns __fc_random48_counter[0 .. 2]
      \from __fc_random48_counter[0 .. 2];
    assigns \result \from __fc_random48_counter[0 .. 2];
 */
long jrand48(unsigned short * /*[3]*/ xsubi);

/*@ assigns __fc_heap_status, \result;
    assigns __fc_heap_status
      \from (indirect: nmemb), (indirect: size), __fc_heap_status;
    assigns \result
      \from (indirect: nmemb), (indirect: size), (indirect: __fc_heap_status);
    allocates \result;
    
    behavior allocation:
      assumes can_allocate: is_allocable(nmemb * size);
      ensures
        allocation: \fresh{Old, Here}(\result,\old(nmemb) * \old(size));
      ensures
        initialization:
          \initialized((char *)\result + (0 .. \old(nmemb) * \old(size) - 1));
      ensures
        zero_initialization:
          \subset(*((char *)\result + (0 .. \old(nmemb) * \old(size) - 1)),
                 {0});
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(nmemb * size);
      ensures null_result: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
      allocates \nothing;
    
    complete behaviors no_allocation, allocation;
    disjoint behaviors no_allocation, allocation;
 */
void *calloc(size_t nmemb, size_t size);

/*@ requires freeable: ptr ≡ \null ∨ \freeable(ptr);
    assigns __fc_heap_status, \result;
    assigns __fc_heap_status \from __fc_heap_status;
    assigns \result \from size, ptr, __fc_heap_status;
    frees ptr;
    allocates \result;
    
    behavior allocation:
      assumes can_allocate: is_allocable(size);
      ensures allocation: \fresh{Old, Here}(\result,\old(size));
      assigns \result;
      assigns \result \from size, __fc_heap_status;
      allocates \result;
    
    behavior deallocation:
      assumes nonnull_ptr: ptr ≢ \null;
      assumes can_allocate: is_allocable(size);
      ensures freed: \allocable(\old(ptr));
      ensures freeable: \result ≡ \null ∨ \freeable(\result);
      frees ptr;
    
    behavior fail:
      assumes cannot_allocate: ¬is_allocable(size);
      ensures null_result: \result ≡ \null;
      assigns \result;
      assigns \result \from size, __fc_heap_status;
      allocates \nothing;
    
    complete behaviors fail, deallocation, allocation;
    disjoint behaviors allocation, fail;
    disjoint behaviors deallocation, fail;
 */
void *realloc(void *ptr, size_t size);

/*@ ensures never_terminates: \false;
    assigns \nothing; */
void abort(void);

/*@ assigns \result;
    assigns \result \from \nothing; */
int atexit(void (*func)(void));

/*@ assigns \result;
    assigns \result \from \nothing; */
int at_quick_exit(void (*func)(void));

/*@ ensures never_terminates: \false;
    assigns \nothing; */
void exit(int status);

/*@ ensures never_terminates: \false;
    assigns \nothing; */
void _Exit(int status);

char *__fc_env[4096];
/*@ requires valid_name: valid_read_string(name);
    ensures null_or_valid_result: \result ≡ \null ∨ \valid(\result);
    assigns \result;
    assigns \result \from __fc_env[0 ..], (indirect: name), *(name + (0 ..));
 */
char *getenv(char const *name);

/*@ requires valid_string: valid_read_string(string);
    assigns __fc_env[0 ..], \result;
    assigns __fc_env[0 ..] \from __fc_env[0 ..], string;
    assigns \result \from (indirect: __fc_env[0 ..]), (indirect: string);
 */
int putenv(char *string);

/*@ requires valid_name: valid_read_string(name);
    requires valid_value: valid_read_string(value);
    ensures result_ok_or_error: \result ≡ 0 ∨ \result ≡ -1;
    assigns \result, __fc_env[0 ..];
    assigns \result
      \from __fc_env[0 ..], (indirect: name), (indirect: *(name + (0 ..))),
            (indirect: value), (indirect: *(value + (0 ..))),
            (indirect: overwrite);
    assigns __fc_env[0 ..]
      \from __fc_env[0 ..], (indirect: name), (indirect: *(name + (0 ..))),
            (indirect: value), (indirect: *(value + (0 ..))),
            (indirect: overwrite);
 */
int setenv(char const *name, char const *value, int overwrite);

/*@ requires valid_name: valid_read_string(name);
    ensures result_ok_or_error: \result ≡ 0 ∨ \result ≡ -1;
    assigns \result, __fc_env[0 ..];
    assigns \result
      \from __fc_env[0 ..], (indirect: name), (indirect: *(name + (0 ..)));
    assigns __fc_env[0 ..]
      \from __fc_env[0 ..], (indirect: name), (indirect: *(name + (0 ..)));
 */
int unsetenv(char const *name);

/*@ ensures never_terminates: \false;
    assigns \nothing; */
void quick_exit(int status);

/*@ requires
      null_or_valid_string_command:
        command ≡ \null ∨ valid_read_string(command);
    assigns \result;
    assigns \result
      \from (indirect: command), (indirect: *(command + (0 ..)));
 */
int system(char const *command);

/*@ requires valid_function_compar: \valid_function(compar);
    ensures
      null_or_correct_result:
        \result ≡ \null ∨
        \subset(\result,
               (void *)((char *)\old(base) +
                        (0 .. \old(size) * (\old(nmemb) - 1))));
    assigns \result;
    assigns \result
      \from (indirect: key), *((char *)key + (0 .. size - 1)), base,
            *((char *)base + (0 .. size * (nmemb - 1))), (indirect: nmemb),
            (indirect: size), (indirect: *compar);
 */
void *bsearch(void const *key, void const *base, size_t nmemb, size_t size,
              int (*compar)(void const *, void const *));

/*@ requires valid_function_compar: \valid_function(compar);
    assigns *((char *)base + (0 ..));
    assigns *((char *)base + (0 ..))
      \from (indirect: base), *((char *)base + (0 ..)), (indirect: nmemb),
            (indirect: size), (indirect: compar), (indirect: *compar);
 */
void qsort(void *base, size_t nmemb, size_t size,
           int (*compar)(void const *, void const *));

/*@ requires abs_representable: j > -2147483647 - 1;
    assigns \result;
    assigns \result \from j;
    
    behavior negative:
      assumes negative: j < 0;
      ensures opposite_result: \result ≡ -\old(j);
    
    behavior nonnegative:
      assumes nonnegative: j ≥ 0;
      ensures same_result: \result ≡ \old(j);
    
    complete behaviors nonnegative, negative;
    disjoint behaviors nonnegative, negative;
 */
int abs(int j);

/*@ requires abs_representable: j > -2147483647L - 1L;
    assigns \result;
    assigns \result \from j;
    
    behavior negative:
      assumes negative: j < 0;
      ensures opposite_result: \result ≡ -\old(j);
    
    behavior nonnegative:
      assumes nonnegative: j ≥ 0;
      ensures same_result: \result ≡ \old(j);
    
    complete behaviors nonnegative, negative;
    disjoint behaviors nonnegative, negative;
 */
long labs(long j);

/*@ requires abs_representable: j > -9223372036854775807LL - 1LL;
    assigns \result;
    assigns \result \from j;
    
    behavior negative:
      assumes negative: j < 0;
      ensures opposite_result: \result ≡ -\old(j);
    
    behavior nonnegative:
      assumes nonnegative: j ≥ 0;
      ensures same_result: \result ≡ \old(j);
    
    complete behaviors nonnegative, negative;
    disjoint behaviors nonnegative, negative;
 */
long long llabs(long long j);

/*@ assigns \result;
    assigns \result \from numer, denom; */
div_t div(int numer, int denom);

/*@ assigns \result;
    assigns \result \from numer, denom; */
ldiv_t ldiv(long numer, long denom);

/*@ assigns \result;
    assigns \result \from numer, denom; */
lldiv_t lldiv(long long numer, long long denom);

/*@ ghost int __fc_mblen_state; */
/*@ assigns \result, __fc_mblen_state;
    assigns \result
      \from (indirect: s), (indirect: *(s + (0 ..))), (indirect: n),
            __fc_mblen_state;
    assigns __fc_mblen_state
      \from (indirect: s), (indirect: *(s + (0 ..))), (indirect: n),
            __fc_mblen_state;
 */
int mblen(char const *s, size_t n);

/*@ ghost int __fc_mbtowc_state; */
/*@ requires separation: \separated(pwc, s);
    ensures consumed_range: \result ≤ \old(n);
    assigns \result, *(pwc + (0 .. \result - 1)), __fc_mbtowc_state;
    assigns \result
      \from (indirect: s), (indirect: *(s + (0 .. n - 1))), (indirect: n),
            __fc_mbtowc_state;
    assigns *(pwc + (0 .. \result - 1))
      \from (indirect: s), *(s + (0 .. n - 1)), (indirect: n),
            __fc_mbtowc_state;
    assigns __fc_mbtowc_state
      \from (indirect: s), *(s + (0 .. n - 1)), (indirect: n),
            __fc_mbtowc_state;
 */
int mbtowc(int * __restrict pwc, char const * __restrict s, size_t n);

/*@ ghost int __fc_wctomb_state; */
/*@ assigns \result, *(s + (0 ..)), __fc_wctomb_state;
    assigns \result \from (indirect: wc), __fc_wctomb_state;
    assigns *(s + (0 ..)) \from wc, __fc_wctomb_state;
    assigns __fc_wctomb_state \from wc, __fc_wctomb_state;
 */
int wctomb(char *s, int wc);

/*@ requires separation: \separated(pwcs, s);
    assigns \result, *(pwcs + (0 .. n - 1));
    assigns \result
      \from (indirect: s), (indirect: *(s + (0 .. n - 1))), (indirect: n);
    assigns *(pwcs + (0 .. n - 1))
      \from (indirect: s), *(s + (0 .. n - 1)), (indirect: n);
 */
size_t mbstowcs(int * __restrict pwcs, char const * __restrict s, size_t n);

/*@ requires separation: \separated(s, pwcs);
    assigns \result, *(s + (0 .. n - 1));
    assigns \result
      \from (indirect: pwcs), (indirect: *(pwcs + (0 .. n - 1))),
            (indirect: n);
    assigns *(s + (0 .. n - 1))
      \from (indirect: pwcs), *(pwcs + (0 .. n - 1)), (indirect: n);
 */
size_t wcstombs(char * __restrict s, int const * __restrict pwcs, size_t n);

/*@ requires valid_memptr: \valid(memptr);
    requires
      alignment_is_a_suitable_power_of_two:
        alignment ≥ sizeof(void *) ∧ (alignment & (alignment - 1)) ≡ 0;
    assigns __fc_heap_status, \result;
    assigns __fc_heap_status
      \from (indirect: alignment), size, __fc_heap_status;
    assigns \result
      \from (indirect: alignment), (indirect: size),
            (indirect: __fc_heap_status);
    allocates *\old(memptr);
    
    behavior allocation:
      assumes can_allocate: is_allocable(size);
      ensures allocation: \fresh{Old, Here}(*\old(memptr),\old(size));
      ensures result_zero: \result ≡ 0;
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status
        \from (indirect: alignment), size, __fc_heap_status;
      assigns \result
        \from (indirect: alignment), (indirect: size),
              (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(size);
      ensures result_non_zero: \result < 0 ∨ \result > 0;
      assigns \result;
      assigns \result \from (indirect: alignment);
      allocates \nothing;
    
    complete behaviors no_allocation, allocation;
    disjoint behaviors no_allocation, allocation;
 */
int posix_memalign(void **memptr, size_t alignment, size_t size);

/*@ requires valid_template: valid_string(templat);
    ensures
      result_error_or_valid_fd: \result ≡ -1 ∨ (0 ≤ \result < 16);
    assigns *(templat + (0 ..)), \result;
    assigns *(templat + (0 ..)) \from \nothing;
    assigns \result \from \nothing;
 */
int mkstemp(char *templat);

void Aircraft::Ctor(struct Aircraft const *this,
                    struct Aircraft const *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid(this); */
void Fly(struct Aircraft *this)
{
  return;
}

/*@ requires \valid_read(this); */
void Aircraft::Ctor(struct Aircraft const *this, int id)
{
  weak_ptr<Aircraft>::Ctor(& this->myWingMan);
  this->m_id = id;
  return;
}

/*@ requires \valid_read(this); */
void Aircraft::Ctor(struct Aircraft const *this)
{
  weak_ptr<Aircraft>::Ctor(& this->myWingMan);
  this->m_id = 0;
  return;
}

/*@ requires \valid_read(this); */
void Aircraft::Dtor(struct Aircraft const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Aircraft::Ctor(struct Aircraft const *this,
                    struct Aircraft const *__frama_c_arg_0)
{
  this->m_id = __frama_c_arg_0->m_id;
  this->m_flyCount = __frama_c_arg_0->m_flyCount;
  weak_ptr<Aircraft>::Ctor(& this->myWingMan,& __frama_c_arg_0->myWingMan);
  return;
}

/*@ requires \valid_read(this); */
void shared_ptr<Aircraft>::Ctor(struct shared_ptr<Aircraft> const *this,
                                struct Aircraft *p)
{
  {
    struct __shared_ref<Aircraft> *__fc_tmp_1;
    this->__ptr = p;
    ;
    __fc_tmp_1 = (struct __shared_ref<Aircraft> *)malloc(sizeof(struct __shared_ref<Aircraft>));
    __shared_ref<Aircraft>::Ctor((struct __shared_ref<Aircraft> const *)__fc_tmp_1,
                                 this->__ptr);
    this->_ref = & __fc_tmp_1->_frama_c__ZN3stdE17__shared_ref_base;
    pass((struct shared_ptr<Aircraft> *)this);
    if (0) {
      catch_all: __fc_exn.exn_uncaught = 0;
      Aircraft::Dtor((struct Aircraft const *)p);
      free((void *)p);
      this->_ref = (struct __shared_ref_base *)0;
      __fc_exn.exn_uncaught = 1;
      goto __ret_label;
    }
  }
  __ret_label: return;
}

/*@ requires \valid(this); */
void unlink(struct __shared_ref<Aircraft> *this)
{
  (this->_n) --;
  if (this->_n == (long)0) 
    if (this->_w > (long)0) {
      Aircraft::Dtor((struct Aircraft const *)this->__ptr);
      free((void *)this->__ptr);
    }
    else {
      Aircraft::Dtor((struct Aircraft const *)this->__ptr);
      free((void *)this->__ptr);
      __shared_ref<Aircraft>::Dtor((struct __shared_ref<Aircraft> const *)this);
      free((void *)this);
    }
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Aircraft",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int mistake10(void)
{
  int res;
  {
    struct Aircraft *__fc_tmp_5;
    struct Aircraft *__fc_tmp_6;
    struct weak_ptr<Aircraft> *tmp_0;
    struct Aircraft *tmp;
    struct Aircraft *tmp_1;
    struct shared_ptr<Aircraft> tmp_3;
    struct Aircraft *tmp_2;
    struct Aircraft *tmp_4;
    __fc_tmp_5 = (struct Aircraft *)malloc(sizeof(struct Aircraft));
    Aircraft::Ctor((struct Aircraft const *)__fc_tmp_5,100);
    struct shared_ptr<Aircraft> pAircraft100;
    shared_ptr<Aircraft>::Ctor(& pAircraft100,__fc_tmp_5);
    __fc_tmp_6 = (struct Aircraft *)malloc(sizeof(struct Aircraft));
    Aircraft::Ctor((struct Aircraft const *)__fc_tmp_6,101);
    struct shared_ptr<Aircraft> pAircraft101;
    shared_ptr<Aircraft>::Ctor(& pAircraft101,__fc_tmp_6);
    tmp = std::shared_ptr<Aircraft>::operator->((struct shared_ptr<Aircraft> const *)(& pAircraft100));
    tmp_0 = operator=<Aircraft,void>(& tmp->myWingMan,
                                     (struct shared_ptr<Aircraft> const *)(& pAircraft101));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default:
        {
          res = 0;
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft101));
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft100));
          goto __ret_label;
        }
      }
    tmp_1 = std::shared_ptr<Aircraft>::operator->((struct shared_ptr<Aircraft> const *)(& pAircraft101));
    tmp_1->m_flyCount = 17;
    reset(& pAircraft101);
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default:
        {
          res = 0;
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft101));
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft100));
          goto __ret_label;
        }
      }
    tmp_2 = std::shared_ptr<Aircraft>::operator->((struct shared_ptr<Aircraft> const *)(& pAircraft100));
    tmp_3 = lock((struct weak_ptr<Aircraft> const *)(& tmp_2->myWingMan));
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default:
        {
          res = 0;
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft101));
          shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft100));
          goto __ret_label;
        }
      }
    struct shared_ptr<Aircraft> __fc_tmp_7 = tmp_3;
    tmp_4 = std::shared_ptr<Aircraft>::operator->((struct shared_ptr<Aircraft> const *)(& __fc_tmp_7));
    res = tmp_4->m_flyCount;
    shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& __fc_tmp_7));
    shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft101));
    shared_ptr<Aircraft>::Dtor((struct shared_ptr<Aircraft> const *)(& pAircraft100));
  }
  __ret_label: return res;
}

int main(void)
{
  int res = mistake10();
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) {
      default: {
                 res = 0;
                 goto __ret_label;
               }
    }
  __ret_label: return res;
}


