[kernel] Parsing tests/stl/stl_atomic.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function __atomic<bool>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<char>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<signed char>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<unsigned char>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<short>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<unsigned short>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<int>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<unsigned int>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<long>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<unsigned long>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<long long>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<unsigned long long>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<char16_t>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<char32_t>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function __atomic<wchar_t>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function operator-- can't throw any exception
[kernel] Warning: Assuming declared function compare_exchange_strong can't throw any exception
[kernel] Warning: Assuming declared function atomic<int*>::Ctor can't throw any exception
[kernel] Warning: Assuming declared function operator++ can't throw any exception
[kernel] Warning: Assuming declared function test_and_set can't throw any exception
[kernel] Warning: Assuming declared function load can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef int ptrdiff_t;
typedef ptrdiff_t ptrdiff_t;
typedef _Bool value_type;
struct integral_constant<bool,0>;
struct integral_constant<bool,0> {
   
};
typedef _Bool value_type;
struct integral_constant<bool,1>;
struct integral_constant<bool,1> {
   
};
struct piecewise_construct_t;
struct piecewise_construct_t {
   
};
enum memory_order {
    memory_order_relaxed = 0U,
    memory_order_consume = 1U,
    memory_order_acquire = 2U,
    memory_order_release = 3U,
    memory_order_acq_rel = 4U,
    memory_order_seq_cst = 5U
};
typedef enum memory_order memory_order;
struct atomic<int*> {
   int *__val ;
};
struct __atomic<bool> {
   _Bool __val ;
};
struct __atomic<char> {
   char __val ;
};
struct __atomic<signed char> {
   signed char __val ;
};
struct __atomic<unsigned char> {
   unsigned char __val ;
};
struct __atomic<short> {
   short __val ;
};
struct __atomic<unsigned short> {
   unsigned short __val ;
};
struct __atomic<int> {
   int __val ;
};
struct __atomic<unsigned int> {
   unsigned int __val ;
};
struct __atomic<long> {
   long __val ;
};
struct __atomic<unsigned long> {
   unsigned long __val ;
};
struct __atomic<long long> {
   long long __val ;
};
struct __atomic<unsigned long long> {
   unsigned long long __val ;
};
struct __atomic<char16_t> {
   unsigned short __val ;
};
struct __atomic<char32_t> {
   unsigned int __val ;
};
struct __atomic<wchar_t> {
   int __val ;
};
struct atomic<bool> {
   struct __atomic<bool> _frama_c__ZN3stdE8__atomicIbE ;
};
struct atomic<char> {
   struct __atomic<char> _frama_c__ZN3stdE8__atomicIcE ;
};
struct atomic<signed char> {
   struct __atomic<signed char> _frama_c__ZN3stdE8__atomicIaE ;
};
struct atomic<unsigned char> {
   struct __atomic<unsigned char> _frama_c__ZN3stdE8__atomicIhE ;
};
struct atomic<short> {
   struct __atomic<short> _frama_c__ZN3stdE8__atomicIsE ;
};
struct atomic<unsigned short> {
   struct __atomic<unsigned short> _frama_c__ZN3stdE8__atomicItE ;
};
struct atomic<int> {
   struct __atomic<int> _frama_c__ZN3stdE8__atomicIiE ;
};
struct atomic<unsigned int> {
   struct __atomic<unsigned int> _frama_c__ZN3stdE8__atomicIjE ;
};
struct atomic<long> {
   struct __atomic<long> _frama_c__ZN3stdE8__atomicIlE ;
};
struct atomic<unsigned long> {
   struct __atomic<unsigned long> _frama_c__ZN3stdE8__atomicImE ;
};
struct atomic<long long> {
   struct __atomic<long long> _frama_c__ZN3stdE8__atomicIxE ;
};
struct atomic<unsigned long long> {
   struct __atomic<unsigned long long> _frama_c__ZN3stdE8__atomicIyE ;
};
struct atomic<char16_t> {
   struct __atomic<char16_t> _frama_c__ZN3stdE8__atomicIDsE ;
};
struct atomic<char32_t> {
   struct __atomic<char32_t> _frama_c__ZN3stdE8__atomicIDiE ;
};
struct atomic<wchar_t> {
   struct __atomic<wchar_t> _frama_c__ZN3stdE8__atomicIwE ;
};
struct atomic_flag {
   _Bool __flag ;
};
typedef struct atomic_flag atomic_flag;
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,0> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,1> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "_is_void",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ok_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ko_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0);

void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0)
{
  return;
}

/*@ requires \valid_read(this); */
void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this)
{
  return;
}

struct piecewise_construct_t piecewise_construct;
void __fc_init_ZN3stdE19piecewise_construct(void) __attribute__((__constructor__));
void __fc_init_ZN3stdE19piecewise_construct(void)
{
  struct piecewise_construct_t __fc_tmp_0;
  piecewise_construct_t::Ctor(& __fc_tmp_0);
  piecewise_construct = __fc_tmp_0;
  piecewise_construct_t::Dtor((struct piecewise_construct_t const *)(& __fc_tmp_0));
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "piecewise_construct_t",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void atomic<int*>::Ctor(struct atomic<int*> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct atomic<int*> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct atomic<int*> const *this);

/*@ requires \valid(this); */
void store(struct atomic<int*> volatile *this, int *__frama_c_arg_0,
           memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
void store(struct atomic<int*> *this, int *__frama_c_arg_0,
           memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
int *load(struct atomic<int*> const volatile *this,
          memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int *load(struct atomic<int*> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int *conversion(int*)(struct atomic<int*> const volatile *this);

/*@ requires \valid_read(this); */
int *conversion(int*)(struct atomic<int*> const *this);

/*@ requires \valid(this); */
int *exchange(struct atomic<int*> volatile *this, int *__frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int *exchange(struct atomic<int*> *this, int *__frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct atomic<int*> volatile *this,
                            int **__frama_c_arg_0, int *__frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct atomic<int*> *this, int **__frama_c_arg_0,
                            int *__frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct atomic<int*> volatile *this,
                              int **__frama_c_arg_0, int *__frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct atomic<int*> *this,
                              int **__frama_c_arg_0, int *__frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct atomic<int*> volatile *this,
                            int **__frama_c_arg_0, int *__frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct atomic<int*> *this, int **__frama_c_arg_0,
                            int *__frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct atomic<int*> volatile *this,
                              int **__frama_c_arg_0, int *__frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct atomic<int*> *this,
                              int **__frama_c_arg_0, int *__frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
int *fetch_add(struct atomic<int*> volatile *this, ptrdiff_t __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int *fetch_add(struct atomic<int*> *this, ptrdiff_t __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int *fetch_sub(struct atomic<int*> volatile *this, ptrdiff_t __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int *fetch_sub(struct atomic<int*> *this, ptrdiff_t __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void atomic<int*>::Ctor(struct atomic<int*> const *this, int *__frama_c_arg_0);

/*@ requires \valid(this); */
int *operator=(struct atomic<int*> volatile *this, int *__frama_c_arg_0);

/*@ requires \valid(this); */
int *operator=(struct atomic<int*> *this, int *__frama_c_arg_0);

/*@ requires \valid(this); */
int *operator++(struct atomic<int*> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator++(struct atomic<int*> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator--(struct atomic<int*> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator--(struct atomic<int*> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator++(struct atomic<int*> volatile *this);

/*@ requires \valid(this); */
int *operator++(struct atomic<int*> *this);

/*@ requires \valid(this); */
int *operator--(struct atomic<int*> volatile *this);

/*@ requires \valid(this); */
int *operator--(struct atomic<int*> *this);

/*@ requires \valid(this); */
int *operator+=(struct atomic<int*> volatile *this, ptrdiff_t __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator+=(struct atomic<int*> *this, ptrdiff_t __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator-=(struct atomic<int*> volatile *this, ptrdiff_t __frama_c_arg_0);

/*@ requires \valid(this); */
int *operator-=(struct atomic<int*> *this, ptrdiff_t __frama_c_arg_0);

/*@ requires \valid_read(this); */
void atomic<int*>::Ctor(struct atomic<int*> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<bool>::Ctor(struct __atomic<bool> const *this);

void __atomic<bool>::Dtor(struct __atomic<bool> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<bool> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<bool> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<bool> volatile *this, _Bool c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<bool> *this, _Bool c, memory_order o);

/*@ requires \valid_read(this); */
_Bool load(struct __atomic<bool> const volatile *this,
           memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
_Bool load(struct __atomic<bool> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
_Bool conversion(bool)(struct __atomic<bool> const volatile *this);

/*@ requires \valid_read(this); */
_Bool conversion(bool)(struct __atomic<bool> const *this);

/*@ requires \valid(this); */
_Bool exchange(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool exchange(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<bool> volatile *this,
                            _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<bool> *this,
                            _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<bool> volatile *this,
                              _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<bool> *this,
                              _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<bool> volatile *this,
                            _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<bool> *this,
                            _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<bool> volatile *this,
                              _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<bool> *this,
                              _Bool *__frama_c_arg_0, _Bool __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
_Bool fetch_add(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_add(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_sub(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_sub(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_and(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_and(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_or(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_or(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_xor(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
_Bool fetch_xor(struct __atomic<bool> *this, _Bool __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<bool>::Ctor(struct __atomic<bool> const *this,
                          _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator++(struct __atomic<bool> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator++(struct __atomic<bool> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator--(struct __atomic<bool> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator--(struct __atomic<bool> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator++(struct __atomic<bool> volatile *this);

/*@ requires \valid(this); */
_Bool operator++(struct __atomic<bool> *this);

/*@ requires \valid(this); */
_Bool operator--(struct __atomic<bool> volatile *this);

/*@ requires \valid(this); */
_Bool operator--(struct __atomic<bool> *this);

/*@ requires \valid(this); */
_Bool operator+=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator+=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator-=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator-=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator&=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator&=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator|=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator|=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator^=(struct __atomic<bool> volatile *this, _Bool __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool operator^=(struct __atomic<bool> *this, _Bool __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<bool>::Ctor(struct __atomic<bool> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<bool>::Dtor(struct __atomic<bool> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<char>::Ctor(struct __atomic<char> const *this);

void __atomic<char>::Dtor(struct __atomic<char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<char> volatile *this, char c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<char> *this, char c, memory_order o);

/*@ requires \valid_read(this); */
char load(struct __atomic<char> const volatile *this,
          memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
char load(struct __atomic<char> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
char conversion(char)(struct __atomic<char> const volatile *this);

/*@ requires \valid_read(this); */
char conversion(char)(struct __atomic<char> const *this);

/*@ requires \valid(this); */
char exchange(struct __atomic<char> volatile *this, char __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char exchange(struct __atomic<char> *this, char __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char> volatile *this,
                            char *__frama_c_arg_0, char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char> *this,
                            char *__frama_c_arg_0, char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char> volatile *this,
                              char *__frama_c_arg_0, char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char> *this,
                              char *__frama_c_arg_0, char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char> volatile *this,
                            char *__frama_c_arg_0, char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char> *this,
                            char *__frama_c_arg_0, char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char> volatile *this,
                              char *__frama_c_arg_0, char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char> *this,
                              char *__frama_c_arg_0, char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
char fetch_add(struct __atomic<char> volatile *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_add(struct __atomic<char> *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_sub(struct __atomic<char> volatile *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_sub(struct __atomic<char> *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_and(struct __atomic<char> volatile *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_and(struct __atomic<char> *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_or(struct __atomic<char> volatile *this, char __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_or(struct __atomic<char> *this, char __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_xor(struct __atomic<char> volatile *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
char fetch_xor(struct __atomic<char> *this, char __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<char>::Ctor(struct __atomic<char> const *this,
                          char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator++(struct __atomic<char> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
char operator++(struct __atomic<char> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
char operator--(struct __atomic<char> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
char operator--(struct __atomic<char> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
char operator++(struct __atomic<char> volatile *this);

/*@ requires \valid(this); */
char operator++(struct __atomic<char> *this);

/*@ requires \valid(this); */
char operator--(struct __atomic<char> volatile *this);

/*@ requires \valid(this); */
char operator--(struct __atomic<char> *this);

/*@ requires \valid(this); */
char operator+=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator+=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator-=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator-=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator&=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator&=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator|=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator|=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator^=(struct __atomic<char> volatile *this, char __frama_c_arg_0);

/*@ requires \valid(this); */
char operator^=(struct __atomic<char> *this, char __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<char>::Ctor(struct __atomic<char> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<char>::Dtor(struct __atomic<char> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<signed char>::Ctor(struct __atomic<signed char> const *this);

void __atomic<signed char>::Dtor(struct __atomic<signed char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<signed char> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<signed char> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<signed char> volatile *this, signed char c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<signed char> *this, signed char c, memory_order o);

/*@ requires \valid_read(this); */
signed char load(struct __atomic<signed char> const volatile *this,
                 memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
signed char load(struct __atomic<signed char> const *this,
                 memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
signed char conversion(signed char)(struct __atomic<signed char> const volatile *this);

/*@ requires \valid_read(this); */
signed char conversion(signed char)(struct __atomic<signed char> const *this);

/*@ requires \valid(this); */
signed char exchange(struct __atomic<signed char> volatile *this,
                     signed char __frama_c_arg_0,
                     memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char exchange(struct __atomic<signed char> *this,
                     signed char __frama_c_arg_0,
                     memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<signed char> volatile *this,
                            signed char *__frama_c_arg_0,
                            signed char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<signed char> *this,
                            signed char *__frama_c_arg_0,
                            signed char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<signed char> volatile *this,
                              signed char *__frama_c_arg_0,
                              signed char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<signed char> *this,
                              signed char *__frama_c_arg_0,
                              signed char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<signed char> volatile *this,
                            signed char *__frama_c_arg_0,
                            signed char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<signed char> *this,
                            signed char *__frama_c_arg_0,
                            signed char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<signed char> volatile *this,
                              signed char *__frama_c_arg_0,
                              signed char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<signed char> *this,
                              signed char *__frama_c_arg_0,
                              signed char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
signed char fetch_add(struct __atomic<signed char> volatile *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_add(struct __atomic<signed char> *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_sub(struct __atomic<signed char> volatile *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_sub(struct __atomic<signed char> *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_and(struct __atomic<signed char> volatile *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_and(struct __atomic<signed char> *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_or(struct __atomic<signed char> volatile *this,
                     signed char __frama_c_arg_0,
                     memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_or(struct __atomic<signed char> *this,
                     signed char __frama_c_arg_0,
                     memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_xor(struct __atomic<signed char> volatile *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
signed char fetch_xor(struct __atomic<signed char> *this,
                      signed char __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<signed char>::Ctor(struct __atomic<signed char> const *this,
                                 signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator=(struct __atomic<signed char> volatile *this,
                      signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator=(struct __atomic<signed char> *this,
                      signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator++(struct __atomic<signed char> volatile *this,
                       int __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator++(struct __atomic<signed char> *this,
                       int __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator--(struct __atomic<signed char> volatile *this,
                       int __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator--(struct __atomic<signed char> *this,
                       int __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator++(struct __atomic<signed char> volatile *this);

/*@ requires \valid(this); */
signed char operator++(struct __atomic<signed char> *this);

/*@ requires \valid(this); */
signed char operator--(struct __atomic<signed char> volatile *this);

/*@ requires \valid(this); */
signed char operator--(struct __atomic<signed char> *this);

/*@ requires \valid(this); */
signed char operator+=(struct __atomic<signed char> volatile *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator+=(struct __atomic<signed char> *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator-=(struct __atomic<signed char> volatile *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator-=(struct __atomic<signed char> *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator&=(struct __atomic<signed char> volatile *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator&=(struct __atomic<signed char> *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator|=(struct __atomic<signed char> volatile *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator|=(struct __atomic<signed char> *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator^=(struct __atomic<signed char> volatile *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid(this); */
signed char operator^=(struct __atomic<signed char> *this,
                       signed char __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<signed char>::Ctor(struct __atomic<signed char> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<signed char>::Dtor(struct __atomic<signed char> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<unsigned char>::Ctor(struct __atomic<unsigned char> const *this);

void __atomic<unsigned char>::Dtor(struct __atomic<unsigned char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned char> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned char> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned char> volatile *this, unsigned char c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned char> *this, unsigned char c,
           memory_order o);

/*@ requires \valid_read(this); */
unsigned char load(struct __atomic<unsigned char> const volatile *this,
                   memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned char load(struct __atomic<unsigned char> const *this,
                   memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned char conversion(unsigned char)(struct __atomic<unsigned char> const volatile *this);

/*@ requires \valid_read(this); */
unsigned char conversion(unsigned char)(struct __atomic<unsigned char> const *this);

/*@ requires \valid(this); */
unsigned char exchange(struct __atomic<unsigned char> volatile *this,
                       unsigned char __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char exchange(struct __atomic<unsigned char> *this,
                       unsigned char __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned char> volatile *this,
                            unsigned char *__frama_c_arg_0,
                            unsigned char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned char> *this,
                            unsigned char *__frama_c_arg_0,
                            unsigned char __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned char> volatile *this,
                              unsigned char *__frama_c_arg_0,
                              unsigned char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned char> *this,
                              unsigned char *__frama_c_arg_0,
                              unsigned char __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned char> volatile *this,
                            unsigned char *__frama_c_arg_0,
                            unsigned char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned char> *this,
                            unsigned char *__frama_c_arg_0,
                            unsigned char __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned char> volatile *this,
                              unsigned char *__frama_c_arg_0,
                              unsigned char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned char> *this,
                              unsigned char *__frama_c_arg_0,
                              unsigned char __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned char fetch_add(struct __atomic<unsigned char> volatile *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_add(struct __atomic<unsigned char> *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_sub(struct __atomic<unsigned char> volatile *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_sub(struct __atomic<unsigned char> *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_and(struct __atomic<unsigned char> volatile *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_and(struct __atomic<unsigned char> *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_or(struct __atomic<unsigned char> volatile *this,
                       unsigned char __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_or(struct __atomic<unsigned char> *this,
                       unsigned char __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_xor(struct __atomic<unsigned char> volatile *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned char fetch_xor(struct __atomic<unsigned char> *this,
                        unsigned char __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<unsigned char>::Ctor(struct __atomic<unsigned char> const *this,
                                   unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator=(struct __atomic<unsigned char> volatile *this,
                        unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator=(struct __atomic<unsigned char> *this,
                        unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator++(struct __atomic<unsigned char> volatile *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator++(struct __atomic<unsigned char> *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator--(struct __atomic<unsigned char> volatile *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator--(struct __atomic<unsigned char> *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator++(struct __atomic<unsigned char> volatile *this);

/*@ requires \valid(this); */
unsigned char operator++(struct __atomic<unsigned char> *this);

/*@ requires \valid(this); */
unsigned char operator--(struct __atomic<unsigned char> volatile *this);

/*@ requires \valid(this); */
unsigned char operator--(struct __atomic<unsigned char> *this);

/*@ requires \valid(this); */
unsigned char operator+=(struct __atomic<unsigned char> volatile *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator+=(struct __atomic<unsigned char> *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator-=(struct __atomic<unsigned char> volatile *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator-=(struct __atomic<unsigned char> *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator&=(struct __atomic<unsigned char> volatile *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator&=(struct __atomic<unsigned char> *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator|=(struct __atomic<unsigned char> volatile *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator|=(struct __atomic<unsigned char> *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator^=(struct __atomic<unsigned char> volatile *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned char operator^=(struct __atomic<unsigned char> *this,
                         unsigned char __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<unsigned char>::Ctor(struct __atomic<unsigned char> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<unsigned char>::Dtor(struct __atomic<unsigned char> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<short>::Ctor(struct __atomic<short> const *this);

void __atomic<short>::Dtor(struct __atomic<short> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<short> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<short> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<short> volatile *this, short c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<short> *this, short c, memory_order o);

/*@ requires \valid_read(this); */
short load(struct __atomic<short> const volatile *this,
           memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
short load(struct __atomic<short> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
short conversion(short)(struct __atomic<short> const volatile *this);

/*@ requires \valid_read(this); */
short conversion(short)(struct __atomic<short> const *this);

/*@ requires \valid(this); */
short exchange(struct __atomic<short> volatile *this, short __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short exchange(struct __atomic<short> *this, short __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<short> volatile *this,
                            short *__frama_c_arg_0, short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<short> *this,
                            short *__frama_c_arg_0, short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<short> volatile *this,
                              short *__frama_c_arg_0, short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<short> *this,
                              short *__frama_c_arg_0, short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<short> volatile *this,
                            short *__frama_c_arg_0, short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<short> *this,
                            short *__frama_c_arg_0, short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<short> volatile *this,
                              short *__frama_c_arg_0, short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<short> *this,
                              short *__frama_c_arg_0, short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
short fetch_add(struct __atomic<short> volatile *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_add(struct __atomic<short> *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_sub(struct __atomic<short> volatile *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_sub(struct __atomic<short> *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_and(struct __atomic<short> volatile *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_and(struct __atomic<short> *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_or(struct __atomic<short> volatile *this, short __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_or(struct __atomic<short> *this, short __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_xor(struct __atomic<short> volatile *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
short fetch_xor(struct __atomic<short> *this, short __frama_c_arg_0,
                memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<short>::Ctor(struct __atomic<short> const *this,
                           short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator++(struct __atomic<short> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
short operator++(struct __atomic<short> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
short operator--(struct __atomic<short> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
short operator--(struct __atomic<short> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
short operator++(struct __atomic<short> volatile *this);

/*@ requires \valid(this); */
short operator++(struct __atomic<short> *this);

/*@ requires \valid(this); */
short operator--(struct __atomic<short> volatile *this);

/*@ requires \valid(this); */
short operator--(struct __atomic<short> *this);

/*@ requires \valid(this); */
short operator+=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator+=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator-=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator-=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator&=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator&=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator|=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator|=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator^=(struct __atomic<short> volatile *this, short __frama_c_arg_0);

/*@ requires \valid(this); */
short operator^=(struct __atomic<short> *this, short __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<short>::Ctor(struct __atomic<short> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<short>::Dtor(struct __atomic<short> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<unsigned short>::Ctor(struct __atomic<unsigned short> const *this);

void __atomic<unsigned short>::Dtor(struct __atomic<unsigned short> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned short> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned short> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned short> volatile *this, unsigned short c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned short> *this, unsigned short c,
           memory_order o);

/*@ requires \valid_read(this); */
unsigned short load(struct __atomic<unsigned short> const volatile *this,
                    memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned short load(struct __atomic<unsigned short> const *this,
                    memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned short conversion(unsigned short)(struct __atomic<unsigned short> const volatile *this);

/*@ requires \valid_read(this); */
unsigned short conversion(unsigned short)(struct __atomic<unsigned short> const *this);

/*@ requires \valid(this); */
unsigned short exchange(struct __atomic<unsigned short> volatile *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short exchange(struct __atomic<unsigned short> *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned short> volatile *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned short> *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned short> volatile *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned short> *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned short> volatile *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned short> *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned short> volatile *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned short> *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned short fetch_add(struct __atomic<unsigned short> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_add(struct __atomic<unsigned short> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_sub(struct __atomic<unsigned short> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_sub(struct __atomic<unsigned short> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_and(struct __atomic<unsigned short> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_and(struct __atomic<unsigned short> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_or(struct __atomic<unsigned short> volatile *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_or(struct __atomic<unsigned short> *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_xor(struct __atomic<unsigned short> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_xor(struct __atomic<unsigned short> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<unsigned short>::Ctor(struct __atomic<unsigned short> const *this,
                                    unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator=(struct __atomic<unsigned short> volatile *this,
                         unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator=(struct __atomic<unsigned short> *this,
                         unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<unsigned short> volatile *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<unsigned short> *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<unsigned short> volatile *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<unsigned short> *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<unsigned short> volatile *this);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<unsigned short> *this);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<unsigned short> volatile *this);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<unsigned short> *this);

/*@ requires \valid(this); */
unsigned short operator+=(struct __atomic<unsigned short> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator+=(struct __atomic<unsigned short> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator-=(struct __atomic<unsigned short> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator-=(struct __atomic<unsigned short> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator&=(struct __atomic<unsigned short> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator&=(struct __atomic<unsigned short> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator|=(struct __atomic<unsigned short> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator|=(struct __atomic<unsigned short> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator^=(struct __atomic<unsigned short> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator^=(struct __atomic<unsigned short> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<unsigned short>::Ctor(struct __atomic<unsigned short> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<unsigned short>::Dtor(struct __atomic<unsigned short> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<int>::Ctor(struct __atomic<int> const *this);

void __atomic<int>::Dtor(struct __atomic<int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<int> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<int> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<int> volatile *this, int c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<int> *this, int c, memory_order o);

/*@ requires \valid_read(this); */
int load(struct __atomic<int> const volatile *this,
         memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int load(struct __atomic<int> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int conversion(int)(struct __atomic<int> const volatile *this);

/*@ requires \valid_read(this); */
int conversion(int)(struct __atomic<int> const *this);

/*@ requires \valid(this); */
int exchange(struct __atomic<int> volatile *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int exchange(struct __atomic<int> *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<int> volatile *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<int> *this, int *__frama_c_arg_0,
                            int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<int> volatile *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<int> *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<int> volatile *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<int> *this, int *__frama_c_arg_0,
                            int __frama_c_arg_1, memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<int> volatile *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<int> *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
int fetch_add(struct __atomic<int> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_add(struct __atomic<int> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_sub(struct __atomic<int> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_sub(struct __atomic<int> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_and(struct __atomic<int> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_and(struct __atomic<int> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_or(struct __atomic<int> volatile *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_or(struct __atomic<int> *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_xor(struct __atomic<int> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_xor(struct __atomic<int> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<int>::Ctor(struct __atomic<int> const *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator--(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator--(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<int> volatile *this);

/*@ requires \valid(this); */
int operator++(struct __atomic<int> *this);

/*@ requires \valid(this); */
int operator--(struct __atomic<int> volatile *this);

/*@ requires \valid(this); */
int operator--(struct __atomic<int> *this);

/*@ requires \valid(this); */
int operator+=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator+=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator-=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator-=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator&=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator&=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator|=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator|=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator^=(struct __atomic<int> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator^=(struct __atomic<int> *this, int __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<int>::Ctor(struct __atomic<int> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<int>::Dtor(struct __atomic<int> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<unsigned int>::Ctor(struct __atomic<unsigned int> const *this);

void __atomic<unsigned int>::Dtor(struct __atomic<unsigned int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned int> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned int> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned int> volatile *this, unsigned int c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned int> *this, unsigned int c,
           memory_order o);

/*@ requires \valid_read(this); */
unsigned int load(struct __atomic<unsigned int> const volatile *this,
                  memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned int load(struct __atomic<unsigned int> const *this,
                  memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned int conversion(unsigned int)(struct __atomic<unsigned int> const volatile *this);

/*@ requires \valid_read(this); */
unsigned int conversion(unsigned int)(struct __atomic<unsigned int> const *this);

/*@ requires \valid(this); */
unsigned int exchange(struct __atomic<unsigned int> volatile *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int exchange(struct __atomic<unsigned int> *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned int> volatile *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned int> *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned int> volatile *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned int> *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned int> volatile *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned int> *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned int> volatile *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned int> *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned int fetch_add(struct __atomic<unsigned int> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_add(struct __atomic<unsigned int> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_sub(struct __atomic<unsigned int> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_sub(struct __atomic<unsigned int> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_and(struct __atomic<unsigned int> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_and(struct __atomic<unsigned int> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_or(struct __atomic<unsigned int> volatile *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_or(struct __atomic<unsigned int> *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_xor(struct __atomic<unsigned int> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_xor(struct __atomic<unsigned int> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<unsigned int>::Ctor(struct __atomic<unsigned int> const *this,
                                  unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator=(struct __atomic<unsigned int> volatile *this,
                       unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator=(struct __atomic<unsigned int> *this,
                       unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<unsigned int> volatile *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<unsigned int> *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<unsigned int> volatile *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<unsigned int> *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<unsigned int> volatile *this);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<unsigned int> *this);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<unsigned int> volatile *this);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<unsigned int> *this);

/*@ requires \valid(this); */
unsigned int operator+=(struct __atomic<unsigned int> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator+=(struct __atomic<unsigned int> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator-=(struct __atomic<unsigned int> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator-=(struct __atomic<unsigned int> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator&=(struct __atomic<unsigned int> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator&=(struct __atomic<unsigned int> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator|=(struct __atomic<unsigned int> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator|=(struct __atomic<unsigned int> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator^=(struct __atomic<unsigned int> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator^=(struct __atomic<unsigned int> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<unsigned int>::Ctor(struct __atomic<unsigned int> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<unsigned int>::Dtor(struct __atomic<unsigned int> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<long>::Ctor(struct __atomic<long> const *this);

void __atomic<long>::Dtor(struct __atomic<long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<long> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<long> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<long> volatile *this, long c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<long> *this, long c, memory_order o);

/*@ requires \valid_read(this); */
long load(struct __atomic<long> const volatile *this,
          memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
long load(struct __atomic<long> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
long conversion(long)(struct __atomic<long> const volatile *this);

/*@ requires \valid_read(this); */
long conversion(long)(struct __atomic<long> const *this);

/*@ requires \valid(this); */
long exchange(struct __atomic<long> volatile *this, long __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long exchange(struct __atomic<long> *this, long __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long> volatile *this,
                            long *__frama_c_arg_0, long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long> *this,
                            long *__frama_c_arg_0, long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long> volatile *this,
                              long *__frama_c_arg_0, long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long> *this,
                              long *__frama_c_arg_0, long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long> volatile *this,
                            long *__frama_c_arg_0, long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long> *this,
                            long *__frama_c_arg_0, long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long> volatile *this,
                              long *__frama_c_arg_0, long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long> *this,
                              long *__frama_c_arg_0, long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
long fetch_add(struct __atomic<long> volatile *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_add(struct __atomic<long> *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_sub(struct __atomic<long> volatile *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_sub(struct __atomic<long> *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_and(struct __atomic<long> volatile *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_and(struct __atomic<long> *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_or(struct __atomic<long> volatile *this, long __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_or(struct __atomic<long> *this, long __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_xor(struct __atomic<long> volatile *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long fetch_xor(struct __atomic<long> *this, long __frama_c_arg_0,
               memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<long>::Ctor(struct __atomic<long> const *this,
                          long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator++(struct __atomic<long> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long operator++(struct __atomic<long> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long operator--(struct __atomic<long> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long operator--(struct __atomic<long> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long operator++(struct __atomic<long> volatile *this);

/*@ requires \valid(this); */
long operator++(struct __atomic<long> *this);

/*@ requires \valid(this); */
long operator--(struct __atomic<long> volatile *this);

/*@ requires \valid(this); */
long operator--(struct __atomic<long> *this);

/*@ requires \valid(this); */
long operator+=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator+=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator-=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator-=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator&=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator&=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator|=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator|=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator^=(struct __atomic<long> volatile *this, long __frama_c_arg_0);

/*@ requires \valid(this); */
long operator^=(struct __atomic<long> *this, long __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<long>::Ctor(struct __atomic<long> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<long>::Dtor(struct __atomic<long> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<unsigned long>::Ctor(struct __atomic<unsigned long> const *this);

void __atomic<unsigned long>::Dtor(struct __atomic<unsigned long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned long> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned long> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned long> volatile *this, unsigned long c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned long> *this, unsigned long c,
           memory_order o);

/*@ requires \valid_read(this); */
unsigned long load(struct __atomic<unsigned long> const volatile *this,
                   memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned long load(struct __atomic<unsigned long> const *this,
                   memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned long conversion(unsigned long)(struct __atomic<unsigned long> const volatile *this);

/*@ requires \valid_read(this); */
unsigned long conversion(unsigned long)(struct __atomic<unsigned long> const *this);

/*@ requires \valid(this); */
unsigned long exchange(struct __atomic<unsigned long> volatile *this,
                       unsigned long __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long exchange(struct __atomic<unsigned long> *this,
                       unsigned long __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long> volatile *this,
                            unsigned long *__frama_c_arg_0,
                            unsigned long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long> *this,
                            unsigned long *__frama_c_arg_0,
                            unsigned long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long> volatile *this,
                              unsigned long *__frama_c_arg_0,
                              unsigned long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long> *this,
                              unsigned long *__frama_c_arg_0,
                              unsigned long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long> volatile *this,
                            unsigned long *__frama_c_arg_0,
                            unsigned long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long> *this,
                            unsigned long *__frama_c_arg_0,
                            unsigned long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long> volatile *this,
                              unsigned long *__frama_c_arg_0,
                              unsigned long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long> *this,
                              unsigned long *__frama_c_arg_0,
                              unsigned long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned long fetch_add(struct __atomic<unsigned long> volatile *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_add(struct __atomic<unsigned long> *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_sub(struct __atomic<unsigned long> volatile *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_sub(struct __atomic<unsigned long> *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_and(struct __atomic<unsigned long> volatile *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_and(struct __atomic<unsigned long> *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_or(struct __atomic<unsigned long> volatile *this,
                       unsigned long __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_or(struct __atomic<unsigned long> *this,
                       unsigned long __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_xor(struct __atomic<unsigned long> volatile *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long fetch_xor(struct __atomic<unsigned long> *this,
                        unsigned long __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<unsigned long>::Ctor(struct __atomic<unsigned long> const *this,
                                   unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator=(struct __atomic<unsigned long> volatile *this,
                        unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator=(struct __atomic<unsigned long> *this,
                        unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator++(struct __atomic<unsigned long> volatile *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator++(struct __atomic<unsigned long> *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator--(struct __atomic<unsigned long> volatile *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator--(struct __atomic<unsigned long> *this,
                         int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator++(struct __atomic<unsigned long> volatile *this);

/*@ requires \valid(this); */
unsigned long operator++(struct __atomic<unsigned long> *this);

/*@ requires \valid(this); */
unsigned long operator--(struct __atomic<unsigned long> volatile *this);

/*@ requires \valid(this); */
unsigned long operator--(struct __atomic<unsigned long> *this);

/*@ requires \valid(this); */
unsigned long operator+=(struct __atomic<unsigned long> volatile *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator+=(struct __atomic<unsigned long> *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator-=(struct __atomic<unsigned long> volatile *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator-=(struct __atomic<unsigned long> *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator&=(struct __atomic<unsigned long> volatile *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator&=(struct __atomic<unsigned long> *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator|=(struct __atomic<unsigned long> volatile *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator|=(struct __atomic<unsigned long> *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator^=(struct __atomic<unsigned long> volatile *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long operator^=(struct __atomic<unsigned long> *this,
                         unsigned long __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<unsigned long>::Ctor(struct __atomic<unsigned long> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<unsigned long>::Dtor(struct __atomic<unsigned long> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<long long>::Ctor(struct __atomic<long long> const *this);

void __atomic<long long>::Dtor(struct __atomic<long long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<long long> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<long long> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<long long> volatile *this, long long c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<long long> *this, long long c, memory_order o);

/*@ requires \valid_read(this); */
long long load(struct __atomic<long long> const volatile *this,
               memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
long long load(struct __atomic<long long> const *this,
               memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
long long conversion(long long)(struct __atomic<long long> const volatile *this);

/*@ requires \valid_read(this); */
long long conversion(long long)(struct __atomic<long long> const *this);

/*@ requires \valid(this); */
long long exchange(struct __atomic<long long> volatile *this,
                   long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long exchange(struct __atomic<long long> *this,
                   long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long long> volatile *this,
                            long long *__frama_c_arg_0,
                            long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long long> *this,
                            long long *__frama_c_arg_0,
                            long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long long> volatile *this,
                              long long *__frama_c_arg_0,
                              long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long long> *this,
                              long long *__frama_c_arg_0,
                              long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long long> volatile *this,
                            long long *__frama_c_arg_0,
                            long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<long long> *this,
                            long long *__frama_c_arg_0,
                            long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long long> volatile *this,
                              long long *__frama_c_arg_0,
                              long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<long long> *this,
                              long long *__frama_c_arg_0,
                              long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
long long fetch_add(struct __atomic<long long> volatile *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_add(struct __atomic<long long> *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_sub(struct __atomic<long long> volatile *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_sub(struct __atomic<long long> *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_and(struct __atomic<long long> volatile *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_and(struct __atomic<long long> *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_or(struct __atomic<long long> volatile *this,
                   long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_or(struct __atomic<long long> *this,
                   long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_xor(struct __atomic<long long> volatile *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
long long fetch_xor(struct __atomic<long long> *this,
                    long long __frama_c_arg_0, memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<long long>::Ctor(struct __atomic<long long> const *this,
                               long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator=(struct __atomic<long long> volatile *this,
                    long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator=(struct __atomic<long long> *this,
                    long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator++(struct __atomic<long long> volatile *this,
                     int __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator++(struct __atomic<long long> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator--(struct __atomic<long long> volatile *this,
                     int __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator--(struct __atomic<long long> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator++(struct __atomic<long long> volatile *this);

/*@ requires \valid(this); */
long long operator++(struct __atomic<long long> *this);

/*@ requires \valid(this); */
long long operator--(struct __atomic<long long> volatile *this);

/*@ requires \valid(this); */
long long operator--(struct __atomic<long long> *this);

/*@ requires \valid(this); */
long long operator+=(struct __atomic<long long> volatile *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator+=(struct __atomic<long long> *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator-=(struct __atomic<long long> volatile *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator-=(struct __atomic<long long> *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator&=(struct __atomic<long long> volatile *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator&=(struct __atomic<long long> *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator|=(struct __atomic<long long> volatile *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator|=(struct __atomic<long long> *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator^=(struct __atomic<long long> volatile *this,
                     long long __frama_c_arg_0);

/*@ requires \valid(this); */
long long operator^=(struct __atomic<long long> *this,
                     long long __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<long long>::Ctor(struct __atomic<long long> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<long long>::Dtor(struct __atomic<long long> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<unsigned long long>::Ctor(struct __atomic<unsigned long long> const *this);

void __atomic<unsigned long long>::Dtor(struct __atomic<unsigned long long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned long long> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<unsigned long long> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned long long> volatile *this,
           unsigned long long c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<unsigned long long> *this, unsigned long long c,
           memory_order o);

/*@ requires \valid_read(this); */
unsigned long long load(struct __atomic<unsigned long long> const volatile *this,
                        memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned long long load(struct __atomic<unsigned long long> const *this,
                        memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned long long conversion(unsigned long long)(struct __atomic<unsigned long long> const volatile *this);

/*@ requires \valid_read(this); */
unsigned long long conversion(unsigned long long)(struct __atomic<unsigned long long> const *this);

/*@ requires \valid(this); */
unsigned long long exchange(struct __atomic<unsigned long long> volatile *this,
                            unsigned long long __frama_c_arg_0,
                            memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long exchange(struct __atomic<unsigned long long> *this,
                            unsigned long long __frama_c_arg_0,
                            memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long long> volatile *this,
                            unsigned long long *__frama_c_arg_0,
                            unsigned long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long long> *this,
                            unsigned long long *__frama_c_arg_0,
                            unsigned long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long *__frama_c_arg_0,
                              unsigned long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long long> *this,
                              unsigned long long *__frama_c_arg_0,
                              unsigned long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long long> volatile *this,
                            unsigned long long *__frama_c_arg_0,
                            unsigned long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<unsigned long long> *this,
                            unsigned long long *__frama_c_arg_0,
                            unsigned long long __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long *__frama_c_arg_0,
                              unsigned long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<unsigned long long> *this,
                              unsigned long long *__frama_c_arg_0,
                              unsigned long long __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned long long fetch_add(struct __atomic<unsigned long long> volatile *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_add(struct __atomic<unsigned long long> *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_sub(struct __atomic<unsigned long long> volatile *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_sub(struct __atomic<unsigned long long> *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_and(struct __atomic<unsigned long long> volatile *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_and(struct __atomic<unsigned long long> *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_or(struct __atomic<unsigned long long> volatile *this,
                            unsigned long long __frama_c_arg_0,
                            memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_or(struct __atomic<unsigned long long> *this,
                            unsigned long long __frama_c_arg_0,
                            memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_xor(struct __atomic<unsigned long long> volatile *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned long long fetch_xor(struct __atomic<unsigned long long> *this,
                             unsigned long long __frama_c_arg_0,
                             memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<unsigned long long>::Ctor(struct __atomic<unsigned long long> const *this,
                                        unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator=(struct __atomic<unsigned long long> volatile *this,
                             unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator=(struct __atomic<unsigned long long> *this,
                             unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator++(struct __atomic<unsigned long long> volatile *this,
                              int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator++(struct __atomic<unsigned long long> *this,
                              int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator--(struct __atomic<unsigned long long> volatile *this,
                              int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator--(struct __atomic<unsigned long long> *this,
                              int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator++(struct __atomic<unsigned long long> volatile *this);

/*@ requires \valid(this); */
unsigned long long operator++(struct __atomic<unsigned long long> *this);

/*@ requires \valid(this); */
unsigned long long operator--(struct __atomic<unsigned long long> volatile *this);

/*@ requires \valid(this); */
unsigned long long operator--(struct __atomic<unsigned long long> *this);

/*@ requires \valid(this); */
unsigned long long operator+=(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator+=(struct __atomic<unsigned long long> *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator-=(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator-=(struct __atomic<unsigned long long> *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator&=(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator&=(struct __atomic<unsigned long long> *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator|=(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator|=(struct __atomic<unsigned long long> *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator^=(struct __atomic<unsigned long long> volatile *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned long long operator^=(struct __atomic<unsigned long long> *this,
                              unsigned long long __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<unsigned long long>::Ctor(struct __atomic<unsigned long long> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<unsigned long long>::Dtor(struct __atomic<unsigned long long> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<char16_t>::Ctor(struct __atomic<char16_t> const *this);

void __atomic<char16_t>::Dtor(struct __atomic<char16_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char16_t> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char16_t> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<char16_t> volatile *this, unsigned short c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<char16_t> *this, unsigned short c, memory_order o);

/*@ requires \valid_read(this); */
unsigned short load(struct __atomic<char16_t> const volatile *this,
                    memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned short load(struct __atomic<char16_t> const *this,
                    memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned short conversion(char16_t)(struct __atomic<char16_t> const volatile *this);

/*@ requires \valid_read(this); */
unsigned short conversion(char16_t)(struct __atomic<char16_t> const *this);

/*@ requires \valid(this); */
unsigned short exchange(struct __atomic<char16_t> volatile *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short exchange(struct __atomic<char16_t> *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char16_t> volatile *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char16_t> *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char16_t> volatile *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char16_t> *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char16_t> volatile *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char16_t> *this,
                            unsigned short *__frama_c_arg_0,
                            unsigned short __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char16_t> volatile *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char16_t> *this,
                              unsigned short *__frama_c_arg_0,
                              unsigned short __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned short fetch_add(struct __atomic<char16_t> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_add(struct __atomic<char16_t> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_sub(struct __atomic<char16_t> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_sub(struct __atomic<char16_t> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_and(struct __atomic<char16_t> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_and(struct __atomic<char16_t> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_or(struct __atomic<char16_t> volatile *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_or(struct __atomic<char16_t> *this,
                        unsigned short __frama_c_arg_0,
                        memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_xor(struct __atomic<char16_t> volatile *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned short fetch_xor(struct __atomic<char16_t> *this,
                         unsigned short __frama_c_arg_0,
                         memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<char16_t>::Ctor(struct __atomic<char16_t> const *this,
                              unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator=(struct __atomic<char16_t> volatile *this,
                         unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator=(struct __atomic<char16_t> *this,
                         unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<char16_t> volatile *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<char16_t> *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<char16_t> volatile *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<char16_t> *this,
                          int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<char16_t> volatile *this);

/*@ requires \valid(this); */
unsigned short operator++(struct __atomic<char16_t> *this);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<char16_t> volatile *this);

/*@ requires \valid(this); */
unsigned short operator--(struct __atomic<char16_t> *this);

/*@ requires \valid(this); */
unsigned short operator+=(struct __atomic<char16_t> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator+=(struct __atomic<char16_t> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator-=(struct __atomic<char16_t> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator-=(struct __atomic<char16_t> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator&=(struct __atomic<char16_t> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator&=(struct __atomic<char16_t> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator|=(struct __atomic<char16_t> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator|=(struct __atomic<char16_t> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator^=(struct __atomic<char16_t> volatile *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned short operator^=(struct __atomic<char16_t> *this,
                          unsigned short __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<char16_t>::Ctor(struct __atomic<char16_t> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<char16_t>::Dtor(struct __atomic<char16_t> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<char32_t>::Ctor(struct __atomic<char32_t> const *this);

void __atomic<char32_t>::Dtor(struct __atomic<char32_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char32_t> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<char32_t> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<char32_t> volatile *this, unsigned int c,
           memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<char32_t> *this, unsigned int c, memory_order o);

/*@ requires \valid_read(this); */
unsigned int load(struct __atomic<char32_t> const volatile *this,
                  memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned int load(struct __atomic<char32_t> const *this,
                  memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
unsigned int conversion(char32_t)(struct __atomic<char32_t> const volatile *this);

/*@ requires \valid_read(this); */
unsigned int conversion(char32_t)(struct __atomic<char32_t> const *this);

/*@ requires \valid(this); */
unsigned int exchange(struct __atomic<char32_t> volatile *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int exchange(struct __atomic<char32_t> *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char32_t> volatile *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char32_t> *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char32_t> volatile *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char32_t> *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char32_t> volatile *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<char32_t> *this,
                            unsigned int *__frama_c_arg_0,
                            unsigned int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char32_t> volatile *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<char32_t> *this,
                              unsigned int *__frama_c_arg_0,
                              unsigned int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
unsigned int fetch_add(struct __atomic<char32_t> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_add(struct __atomic<char32_t> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_sub(struct __atomic<char32_t> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_sub(struct __atomic<char32_t> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_and(struct __atomic<char32_t> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_and(struct __atomic<char32_t> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_or(struct __atomic<char32_t> volatile *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_or(struct __atomic<char32_t> *this,
                      unsigned int __frama_c_arg_0,
                      memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_xor(struct __atomic<char32_t> volatile *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
unsigned int fetch_xor(struct __atomic<char32_t> *this,
                       unsigned int __frama_c_arg_0,
                       memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<char32_t>::Ctor(struct __atomic<char32_t> const *this,
                              unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator=(struct __atomic<char32_t> volatile *this,
                       unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator=(struct __atomic<char32_t> *this,
                       unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<char32_t> volatile *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<char32_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<char32_t> volatile *this,
                        int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<char32_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<char32_t> volatile *this);

/*@ requires \valid(this); */
unsigned int operator++(struct __atomic<char32_t> *this);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<char32_t> volatile *this);

/*@ requires \valid(this); */
unsigned int operator--(struct __atomic<char32_t> *this);

/*@ requires \valid(this); */
unsigned int operator+=(struct __atomic<char32_t> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator+=(struct __atomic<char32_t> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator-=(struct __atomic<char32_t> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator-=(struct __atomic<char32_t> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator&=(struct __atomic<char32_t> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator&=(struct __atomic<char32_t> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator|=(struct __atomic<char32_t> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator|=(struct __atomic<char32_t> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator^=(struct __atomic<char32_t> volatile *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid(this); */
unsigned int operator^=(struct __atomic<char32_t> *this,
                        unsigned int __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<char32_t>::Ctor(struct __atomic<char32_t> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<char32_t>::Dtor(struct __atomic<char32_t> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __atomic<wchar_t>::Ctor(struct __atomic<wchar_t> const *this);

void __atomic<wchar_t>::Dtor(struct __atomic<wchar_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<wchar_t> const volatile *this);

/*@ requires \valid_read(this); */
_Bool is_lock_free(struct __atomic<wchar_t> const *this);

/*@ requires \valid(this); */
void store(struct __atomic<wchar_t> volatile *this, int c, memory_order o);

/*@ requires \valid(this); */
void store(struct __atomic<wchar_t> *this, int c, memory_order o);

/*@ requires \valid_read(this); */
int load(struct __atomic<wchar_t> const volatile *this,
         memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int load(struct __atomic<wchar_t> const *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
int conversion(wchar_t)(struct __atomic<wchar_t> const volatile *this);

/*@ requires \valid_read(this); */
int conversion(wchar_t)(struct __atomic<wchar_t> const *this);

/*@ requires \valid(this); */
int exchange(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int exchange(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<wchar_t> volatile *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<wchar_t> *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2,
                            memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<wchar_t> volatile *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<wchar_t> *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2,
                              memory_order __frama_c_arg_3);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<wchar_t> volatile *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_weak(struct __atomic<wchar_t> *this,
                            int *__frama_c_arg_0, int __frama_c_arg_1,
                            memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<wchar_t> volatile *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0); */
_Bool compare_exchange_strong(struct __atomic<wchar_t> *this,
                              int *__frama_c_arg_0, int __frama_c_arg_1,
                              memory_order __frama_c_arg_2);

/*@ requires \valid(this); */
int fetch_add(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_add(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_sub(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_sub(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_and(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_and(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_or(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_or(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
             memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_xor(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid(this); */
int fetch_xor(struct __atomic<wchar_t> *this, int __frama_c_arg_0,
              memory_order __frama_c_arg_1);

/*@ requires \valid_read(this); */
void __atomic<wchar_t>::Ctor(struct __atomic<wchar_t> const *this,
                             int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator--(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator--(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator++(struct __atomic<wchar_t> volatile *this);

/*@ requires \valid(this); */
int operator++(struct __atomic<wchar_t> *this);

/*@ requires \valid(this); */
int operator--(struct __atomic<wchar_t> volatile *this);

/*@ requires \valid(this); */
int operator--(struct __atomic<wchar_t> *this);

/*@ requires \valid(this); */
int operator+=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator+=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator-=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator-=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator&=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator&=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator|=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator|=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator^=(struct __atomic<wchar_t> volatile *this, int __frama_c_arg_0);

/*@ requires \valid(this); */
int operator^=(struct __atomic<wchar_t> *this, int __frama_c_arg_0);

/*@ requires \valid_read(this); */
void __atomic<wchar_t>::Ctor(struct __atomic<wchar_t> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __atomic<wchar_t>::Dtor(struct __atomic<wchar_t> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void atomic<bool>::Ctor(struct atomic<bool> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<bool>::Ctor(struct atomic<bool> const *this, _Bool x)
{
  __atomic<bool>::Ctor(& this->_frama_c__ZN3stdE8__atomicIbE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<bool>::Ctor(struct atomic<bool> const *this)
{
  __atomic<bool>::Ctor(& this->_frama_c__ZN3stdE8__atomicIbE);
  return;
}

void atomic<char>::Ctor(struct atomic<char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<char>::Ctor(struct atomic<char> const *this, char x)
{
  __atomic<char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIcE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<char>::Ctor(struct atomic<char> const *this)
{
  __atomic<char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIcE);
  return;
}

void atomic<signed char>::Ctor(struct atomic<signed char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<signed char>::Ctor(struct atomic<signed char> const *this,
                               signed char x)
{
  __atomic<signed char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIaE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<signed char>::Ctor(struct atomic<signed char> const *this)
{
  __atomic<signed char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIaE);
  return;
}

void atomic<unsigned char>::Ctor(struct atomic<unsigned char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<unsigned char>::Ctor(struct atomic<unsigned char> const *this,
                                 unsigned char x)
{
  __atomic<unsigned char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIhE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<unsigned char>::Ctor(struct atomic<unsigned char> const *this)
{
  __atomic<unsigned char>::Ctor(& this->_frama_c__ZN3stdE8__atomicIhE);
  return;
}

void atomic<short>::Ctor(struct atomic<short> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<short>::Ctor(struct atomic<short> const *this, short x)
{
  __atomic<short>::Ctor(& this->_frama_c__ZN3stdE8__atomicIsE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<short>::Ctor(struct atomic<short> const *this)
{
  __atomic<short>::Ctor(& this->_frama_c__ZN3stdE8__atomicIsE);
  return;
}

void atomic<unsigned short>::Ctor(struct atomic<unsigned short> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<unsigned short>::Ctor(struct atomic<unsigned short> const *this,
                                  unsigned short x)
{
  __atomic<unsigned short>::Ctor(& this->_frama_c__ZN3stdE8__atomicItE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<unsigned short>::Ctor(struct atomic<unsigned short> const *this)
{
  __atomic<unsigned short>::Ctor(& this->_frama_c__ZN3stdE8__atomicItE);
  return;
}

void atomic<int>::Ctor(struct atomic<int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<int>::Ctor(struct atomic<int> const *this, int x)
{
  __atomic<int>::Ctor(& this->_frama_c__ZN3stdE8__atomicIiE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<int>::Ctor(struct atomic<int> const *this)
{
  __atomic<int>::Ctor(& this->_frama_c__ZN3stdE8__atomicIiE);
  return;
}

void atomic<unsigned int>::Ctor(struct atomic<unsigned int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<unsigned int>::Ctor(struct atomic<unsigned int> const *this,
                                unsigned int x)
{
  __atomic<unsigned int>::Ctor(& this->_frama_c__ZN3stdE8__atomicIjE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<unsigned int>::Ctor(struct atomic<unsigned int> const *this)
{
  __atomic<unsigned int>::Ctor(& this->_frama_c__ZN3stdE8__atomicIjE);
  return;
}

void atomic<long>::Ctor(struct atomic<long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<long>::Ctor(struct atomic<long> const *this, long x)
{
  __atomic<long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIlE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<long>::Ctor(struct atomic<long> const *this)
{
  __atomic<long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIlE);
  return;
}

void atomic<unsigned long>::Ctor(struct atomic<unsigned long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<unsigned long>::Ctor(struct atomic<unsigned long> const *this,
                                 unsigned long x)
{
  __atomic<unsigned long>::Ctor(& this->_frama_c__ZN3stdE8__atomicImE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<unsigned long>::Ctor(struct atomic<unsigned long> const *this)
{
  __atomic<unsigned long>::Ctor(& this->_frama_c__ZN3stdE8__atomicImE);
  return;
}

void atomic<long long>::Ctor(struct atomic<long long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<long long>::Ctor(struct atomic<long long> const *this, int x)
{
  __atomic<long long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIxE,
                            (long long)x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<long long>::Ctor(struct atomic<long long> const *this)
{
  __atomic<long long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIxE);
  return;
}

void atomic<unsigned long long>::Ctor(struct atomic<unsigned long long> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<unsigned long long>::Ctor(struct atomic<unsigned long long> const *this,
                                      unsigned long long x)
{
  __atomic<unsigned long long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIyE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<unsigned long long>::Ctor(struct atomic<unsigned long long> const *this)
{
  __atomic<unsigned long long>::Ctor(& this->_frama_c__ZN3stdE8__atomicIyE);
  return;
}

void atomic<char16_t>::Ctor(struct atomic<char16_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<char16_t>::Ctor(struct atomic<char16_t> const *this,
                            unsigned short x)
{
  __atomic<char16_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIDsE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<char16_t>::Ctor(struct atomic<char16_t> const *this)
{
  __atomic<char16_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIDsE);
  return;
}

void atomic<char32_t>::Ctor(struct atomic<char32_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<char32_t>::Ctor(struct atomic<char32_t> const *this,
                            unsigned int x)
{
  __atomic<char32_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIDiE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<char32_t>::Ctor(struct atomic<char32_t> const *this)
{
  __atomic<char32_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIDiE);
  return;
}

void atomic<wchar_t>::Ctor(struct atomic<wchar_t> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void atomic<wchar_t>::Ctor(struct atomic<wchar_t> const *this, int x)
{
  __atomic<wchar_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIwE,x);
  return;
}

/*@ requires \valid_read(this); */
void atomic<wchar_t>::Ctor(struct atomic<wchar_t> const *this)
{
  __atomic<wchar_t>::Ctor(& this->_frama_c__ZN3stdE8__atomicIwE);
  return;
}

void atomic_flag::Ctor(struct atomic_flag const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid(this); */
_Bool test_and_set(struct atomic_flag volatile *this,
                   memory_order __frama_c_arg_0);

/*@ requires \valid(this); */
_Bool test_and_set(struct atomic_flag *this, memory_order __frama_c_arg_0);

/*@ requires \valid(this); */
void clear(struct atomic_flag volatile *this, memory_order __frama_c_arg_0);

/*@ requires \valid(this); */
void clear(struct atomic_flag *this, memory_order __frama_c_arg_0);

/*@ requires \valid_read(this); */
void atomic_flag::Ctor(struct atomic_flag const *this, _Bool b)
{
  this->__flag = b;
  return;
}

/*@ requires \valid_read(this); */
void atomic_flag::Ctor(struct atomic_flag const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "atomic_flag",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int main(void)
{
  int a[5];
  int tmp_0;
  struct atomic<int> x;
  atomic<int>::Ctor(& x,5);
  operator--(& x._frama_c__ZN3stdE8__atomicIiE,0);
  int y = 4;
  compare_exchange_strong(& x._frama_c__ZN3stdE8__atomicIiE,& y,6,
                          (enum memory_order)memory_order_relaxed,
                          (enum memory_order)memory_order_seq_cst);
  struct atomic<int*> p;
  atomic<int*>::Ctor(& p,a);
  operator++(& p,0);
  atomic_flag b;
  atomic_flag::Ctor(& b,(_Bool)0);
  _Bool c = test_and_set(& b,(enum memory_order)memory_order_seq_cst);
  struct atomic<int> z;
  atomic<int>::Ctor(& z);
  tmp_0 = load((struct __atomic<int> const *)(& x._frama_c__ZN3stdE8__atomicIiE),
               (enum memory_order)memory_order_seq_cst);
  return tmp_0;
}


