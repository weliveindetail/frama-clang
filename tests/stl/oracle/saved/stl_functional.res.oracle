[kernel] Parsing tests/stl/stl_functional.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function exception::Ctor can't throw any exception
[kernel] Warning: Assuming declared function exception::Ctor can't throw any exception
[kernel] Warning: Assuming declared function operator= can't throw any exception
[kernel] Warning: Assuming declared function exception::Dtor can't throw any exception
[kernel] Warning: Assuming declared function forward<std::minus<int>> can't throw any exception
[kernel] Warning: Assuming declared function forward<std::plus<int>> can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef unsigned int size_t;
typedef size_t size_t;
typedef void *nullptr_t;
typedef _Bool value_type;
struct integral_constant<bool,0>;
struct integral_constant<bool,0> {
   
};
typedef _Bool value_type;
struct integral_constant<bool,1>;
struct integral_constant<bool,1> {
   
};
typedef int type;
struct minus<int>;
typedef struct minus<int> type;
struct plus<int>;
typedef struct plus<int> type;
typedef int type;
struct piecewise_construct_t;
struct piecewise_construct_t {
   
};
struct exception;
struct bad_exception;
struct nested_exception;
struct exception {
   struct _frama_c_vmt *pvmt ;
};
struct bad_exception {
   struct exception _frama_c__ZN3stdE9exception ;
};
struct _frama_c_vmt;
typedef void *exception_ptr;
struct nested_exception {
   struct _frama_c_vmt *pvmt ;
};
struct type_info;
struct bad_cast;
struct bad_typeid;
struct type_info {
   struct _frama_c_vmt *pvmt ;
};
struct bad_cast {
   struct exception _frama_c__ZN3stdE9exception ;
};
struct bad_typeid {
   struct exception _frama_c__ZN3stdE9exception ;
};
typedef int (*type)(int );
typedef int result_type;
struct reference_wrapper<int*,<abst>> {
   int (*obj)(int ) ;
};
typedef int type;
struct reference_wrapper<int> {
   int *obj ;
};
typedef int (*__funtype)(int const *, int const *);
struct __binop<int,std::__minus> {
   
};
typedef int (*__funtype)(int const *, int const *);
struct __binop<int,std::__plus> {
   
};
struct plus<int> {
   struct __binop<int,std::__plus> _frama_c__ZN3stdE7__binopIiN3stdE6__plusE ;
};
struct minus<int> {
   struct __binop<int,std::__minus> _frama_c__ZN3stdE7__binopIiN3stdE7__minusE ;
};
typedef _Bool (*__funtype)(int const *, int const *);
struct __bool_binop<int,std::__less> {
   
};
struct less<int> {
   struct __bool_binop<int,std::__less> _frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE ;
};
struct bad_function_call;
struct bad_function_call {
   struct exception _frama_c__ZN3stdE9exception ;
};
struct function<int*,<abst>> {
   int (*_f)(int const *, int const *) ;
};
enum __fc_exn_enum {
    __fc_exn_kind___fc_S_ZN3stdE17bad_function_call = 0
};
union __fc_exn_union {
   struct bad_function_call __fc_S_ZN3stdE17bad_function_call ;
};
struct __fc_exn_struct {
   int exn_uncaught ;
   enum __fc_exn_enum exn_kind ;
   union __fc_exn_union exn_obj ;
};
struct __fc_exn_struct __fc_exn =
  {.exn_uncaught = 0,
   .exn_kind = 0,
   .exn_obj = {.__fc_S_ZN3stdE17bad_function_call = {._frama_c__ZN3stdE9exception = {
                                                     .pvmt = (struct _frama_c_vmt *)0}}}};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,0> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool const value;
/*@ requires \valid_read(this); */
value_type value_type)(struct integral_constant<bool,1> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "integral_constant",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__boolean",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__or",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "_is_void",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ok_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ko_type",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "is_convertible",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "remove_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "remove_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "remove_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "remove_reference",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "enable_if",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid(t);
    ensures \valid(\result); */
int *forward<int>(type *t)
{
  return t;
}

/*@ requires \valid(t);
    ensures \valid(\result); */
struct minus<int> *forward<std::minus<int>>(type *t);

/*@ requires \valid(t);
    ensures \valid(\result); */
struct plus<int> *forward<std::plus<int>>(type *t);

/*@ requires \valid(t);
    ensures \valid_read(\result); */
int const *forward<int&>(type *t)
{
  int const *__retres;
  __retres = (int const *)t;
  return __retres;
}

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0);

void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0);

void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void piecewise_construct_t::Ctor(struct piecewise_construct_t const *this,
                                 struct piecewise_construct_t *__frama_c_arg_0)
{
  return;
}

/*@ requires \valid_read(this); */
void piecewise_construct_t::Dtor(struct piecewise_construct_t const *this)
{
  return;
}

struct piecewise_construct_t piecewise_construct;
void __fc_init_ZN3stdE19piecewise_construct(void) __attribute__((__constructor__));
void __fc_init_ZN3stdE19piecewise_construct(void)
{
  struct piecewise_construct_t __fc_tmp_1;
  piecewise_construct_t::Ctor(& __fc_tmp_1);
  piecewise_construct = __fc_tmp_1;
  piecewise_construct_t::Dtor((struct piecewise_construct_t const *)(& __fc_tmp_1));
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "piecewise_construct_t",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@
axiomatic MemCmp {
  logic ℤ memcmp{L1, L2}(char *s1, char *s2, ℤ n) 
    reads \at(*(s1 + (0 .. n - 1)),L1), \at(*(s2 + (0 .. n - 1)),L2);
  
  axiom memcmp_zero{L1, L2}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L1, L2}(s1, s2, n) ≡ 0 ⇔
      (∀ ℤ i; 0 ≤ i < n ⇒ \at(*(s1 + i),L1) ≡ \at(*(s2 + i),L2));
  
  }
 */
/*@
axiomatic MemChr {
  logic 𝔹 memchr{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  logic ℤ memchr_off{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  axiom memchr_def{L}:
    ∀ char *s;
    ∀ ℤ c;
    ∀ ℤ n;
      memchr(s, c, n) ≢ (0 ≢ 0) ⇔
      (∃ int i; 0 ≤ i < n ∧ *(s + i) ≡ c);
  
  }
 */
/*@
axiomatic MemSet {
  logic 𝔹 memset{L}(char *s, ℤ c, ℤ n) 
    reads *(s + (0 .. n - 1));
  
  axiom memset_def{L}:
    ∀ char *s;
    ∀ ℤ c;
    ∀ ℤ n;
      memset(s, c, n) ≢ (0 ≢ 0) ⇔
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s + i) ≡ c);
  
  }
 */
/*@
axiomatic StrLen {
  logic ℤ strlen{L}(char *s) 
    reads *(s + (0 ..));
  
  axiom strlen_pos_or_null{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ∧ (∀ ℤ j; 0 ≤ j < i ⇒ *(s + j) ≢ (char)0) ∧
      *(s + i) ≡ (char)0 ⇒ strlen(s) ≡ i;
  
  axiom strlen_neg{L}:
    ∀ char *s;
      (∀ ℤ i; 0 ≤ i ⇒ *(s + i) ≢ (char)0) ⇒ strlen(s) < 0;
  
  axiom strlen_before_null{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i < strlen(s) ⇒ *(s + i) ≢ (char)0;
  
  axiom strlen_at_null{L}:
    ∀ char *s; 0 ≤ strlen(s) ⇒ *(s + strlen(s)) ≡ (char)0;
  
  axiom strlen_not_zero{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ≤ strlen(s) ∧ *(s + i) ≢ (char)0 ⇒ i < strlen(s);
  
  axiom strlen_zero{L}:
    ∀ char *s;
    ∀ ℤ i;
      0 ≤ i ≤ strlen(s) ∧ *(s + i) ≡ (char)0 ⇒ i ≡ strlen(s);
  
  axiom strlen_sup{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ∧ *(s + i) ≡ (char)0 ⇒ 0 ≤ strlen(s) ≤ i;
  
  axiom strlen_shift{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ≤ strlen(s) ⇒ strlen(s + i) ≡ strlen(s) - i;
  
  axiom strlen_create{L}:
    ∀ char *s;
    ∀ ℤ i; 0 ≤ i ∧ *(s + i) ≡ (char)0 ⇒ 0 ≤ strlen(s) ≤ i;
  
  axiom strlen_create_shift{L}:
    ∀ char *s;
    ∀ ℤ i;
    ∀ ℤ k;
      0 ≤ k ≤ i ∧ *(s + i) ≡ (char)0 ⇒
      0 ≤ strlen(s + k) ≤ i - k;
  
  axiom memcmp_strlen_left{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L, L}(s1, s2, n) ≡ 0 ∧ strlen(s1) < n ⇒
      strlen(s1) ≡ strlen(s2);
  
  axiom memcmp_strlen_right{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      memcmp{L, L}(s1, s2, n) ≡ 0 ∧ strlen(s2) < n ⇒
      strlen(s1) ≡ strlen(s2);
  
  axiom memcmp_strlen_shift_left{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ k, ℤ n;
      memcmp{L, L}(s1, s2 + k, n) ≡ 0 ≤ k ∧ strlen(s1) < n ⇒
      0 ≤ strlen(s2) ≤ k + strlen(s1);
  
  axiom memcmp_strlen_shift_right{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ k, ℤ n;
      memcmp{L, L}(s1 + k, s2, n) ≡ 0 ≤ k ∧ strlen(s2) < n ⇒
      0 ≤ strlen(s1) ≤ k + strlen(s2);
  
  }
 */
/*@
axiomatic StrCmp {
  logic ℤ strcmp{L}(char *s1, char *s2) 
    reads *(s1 + (0 .. strlen(s1))), *(s2 + (0 .. strlen(s2)));
  
  axiom strcmp_zero{L}:
    ∀ char *s1, char *s2;
      strcmp(s1, s2) ≡ 0 ⇔
      strlen(s1) ≡ strlen(s2) ∧
      (∀ ℤ i; 0 ≤ i ≤ strlen(s1) ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic StrNCmp {
  logic ℤ strncmp{L}(char *s1, char *s2, ℤ n) 
    reads *(s1 + (0 .. n - 1)), *(s2 + (0 .. n - 1));
  
  axiom strncmp_zero{L}:
    ∀ char *s1, char *s2;
    ∀ ℤ n;
      strncmp(s1, s2, n) ≡ 0 ⇔
      (strlen(s1) < n ∧ strcmp(s1, s2) ≡ 0) ∨
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic StrChr {
  logic 𝔹 strchr{L}(char *s, ℤ c) 
    reads *(s + (0 .. strlen(s)));
  
  axiom strchr_def{L}:
    ∀ char *s;
    ∀ ℤ c;
      strchr(s, c) ≢ (0 ≢ 0) ⇔
      (∃ ℤ i; 0 ≤ i ≤ strlen(s) ∧ *(s + i) ≡ (char)((int)c));
  
  }
 */
/*@
axiomatic WcsLen {
  logic ℤ wcslen{L}(int *s) 
    reads *(s + (0 ..));
  
  axiom wcslen_pos_or_null{L}:
    ∀ int *s;
    ∀ ℤ i;
      0 ≤ i ∧ (∀ ℤ j; 0 ≤ j < i ⇒ *(s + j) ≢ (int)0) ∧
      *(s + i) ≡ (int)0 ⇒ wcslen(s) ≡ i;
  
  axiom wcslen_neg{L}:
    ∀ int *s;
      (∀ ℤ i; 0 ≤ i ⇒ *(s + i) ≢ (int)0) ⇒ wcslen(s) < 0;
  
  axiom wcslen_before_null{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i < wcslen(s) ⇒ *(s + i) ≢ (int)0;
  
  axiom wcslen_at_null{L}:
    ∀ int *s; 0 ≤ wcslen(s) ⇒ *(s + wcslen(s)) ≡ (int)0;
  
  axiom wcslen_not_zero{L}:
    ∀ int *s;
    ∀ int i;
      0 ≤ i ≤ wcslen(s) ∧ *(s + i) ≢ (int)0 ⇒ i < wcslen(s);
  
  axiom wcslen_zero{L}:
    ∀ int *s;
    ∀ int i;
      0 ≤ i ≤ wcslen(s) ∧ *(s + i) ≡ (int)0 ⇒ i ≡ wcslen(s);
  
  axiom wcslen_sup{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s) ≤ i;
  
  axiom wcslen_shift{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ≤ wcslen(s) ⇒ wcslen(s + i) ≡ wcslen(s) - i;
  
  axiom wcslen_create{L}:
    ∀ int *s;
    ∀ int i; 0 ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s) ≤ i;
  
  axiom wcslen_create_shift{L}:
    ∀ int *s;
    ∀ int i;
    ∀ int k;
      0 ≤ k ≤ i ∧ *(s + i) ≡ (int)0 ⇒ 0 ≤ wcslen(s + k) ≤ i - k;
  
  }
 */
/*@
axiomatic WcsCmp {
  logic ℤ wcscmp{L}(int *s1, int *s2) 
    reads *(s1 + (0 .. wcslen(s1))), *(s2 + (0 .. wcslen(s2)));
  
  axiom wcscmp_zero{L}:
    ∀ int *s1, int *s2;
      wcscmp(s1, s2) ≡ 0 ⇔
      wcslen(s1) ≡ wcslen(s2) ∧
      (∀ ℤ i; 0 ≤ i ≤ wcslen(s1) ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic WcsNCmp {
  logic ℤ wcsncmp{L}(int *s1, int *s2, ℤ n) 
    reads *(s1 + (0 .. n - 1)), *(s2 + (0 .. n - 1));
  
  axiom wcsncmp_zero{L}:
    ∀ int *s1, int *s2;
    ∀ ℤ n;
      wcsncmp(s1, s2, n) ≡ 0 ⇔
      (wcslen(s1) < n ∧ wcscmp(s1, s2) ≡ 0) ∨
      (∀ ℤ i; 0 ≤ i < n ⇒ *(s1 + i) ≡ *(s2 + i));
  
  }
 */
/*@
axiomatic WcsChr {
  logic 𝔹 wcschr{L}(int *wcs, ℤ wc) 
    reads *(wcs + (0 .. wcslen(wcs)));
  
  axiom wcschr_def{L}:
    ∀ int *wcs;
    ∀ ℤ wc;
      wcschr(wcs, wc) ≢ (0 ≢ 0) ⇔
      (∃ ℤ i; 0 ≤ i ≤ wcslen(wcs) ∧ *(wcs + i) ≡ (int)((int)wc));
  
  }
 */
/*@ logic ℤ minimum(ℤ i, ℤ j) = i < j? i: j;
 */
/*@ logic ℤ maximum(ℤ i, ℤ j) = i < j? j: i;
 */
/*@
predicate valid_string{L}(char *s) =
  0 ≤ strlen(s) ∧ \valid(s + (0 .. strlen(s)));
 */
/*@
predicate valid_read_string{L}(char *s) =
  0 ≤ strlen(s) ∧ \valid_read(s + (0 .. strlen(s)));
 */
/*@
predicate valid_read_nstring{L}(char *s, ℤ n) =
  (\valid_read(s + (0 .. n - 1)) ∧ \initialized(s + (0 .. n - 1))) ∨
  valid_read_string(s);
 */
/*@
predicate valid_string_or_null{L}(char *s) = s ≡ \null ∨ valid_string(s);
 */
/*@
predicate valid_wstring{L}(int *s) =
  0 ≤ wcslen(s) ∧ \valid(s + (0 .. wcslen(s)));
 */
/*@
predicate valid_read_wstring{L}(int *s) =
  0 ≤ wcslen(s) ∧ \valid_read(s + (0 .. wcslen(s)));
 */
/*@
predicate valid_read_nwstring{L}(int *s, ℤ n) =
  (\valid_read(s + (0 .. n - 1)) ∧ \initialized(s + (0 .. n - 1))) ∨
  valid_read_wstring(s);
 */
/*@
predicate valid_wstring_or_null{L}(int *s) =
  s ≡ \null ∨ valid_wstring(s);
 */
/*@ ghost int __fc_heap_status; */
/*@
axiomatic dynamic_allocation {
  predicate is_allocable{L}(ℤ n) 
    reads __fc_heap_status;
  
  axiom never_allocable{L}:
    ∀ ℤ i; i < 0 ∨ i > 4294967295U ⇒ ¬is_allocable(i);
  
  }
 */
/*@
predicate non_escaping{L}(void *s, size_t n) =
  ∀ unsigned int i; 0 ≤ i < n ⇒ ¬\initialized((char *)s + i);
 */
/*@
predicate empty_block{L}(void *s) =
  \block_length((char *)s) ≡ 0 ∧ \offset((char *)s) ≡ 0;
 */
/*@
predicate valid_or_empty{L}(void *s, size_t n) =
  (empty_block(s) ∨ \valid_read((char *)s)) ∧
  \valid((char *)s + (0 .. n - 1));
 */
/*@
predicate valid_read_or_empty{L}(void *s, size_t n) =
  (empty_block(s) ∨ \valid_read((char *)s)) ∧
  \valid_read((char *)s + (1 .. n - 1));

*/
/*@
    requires s1: initialization: \initialized((char *)s1 + (0 .. n - 1));
    requires s2: initialization: \initialized((char *)s2 + (0 .. n - 1));
    requires s1: danglingness: non_escaping(s1, n);
    requires s2: danglingness: non_escaping(s2, n);
    ensures
      logic_spec:
        \result ≡
        memcmp{Pre, Pre}((char *)\old(s1), (char *)\old(s2), \old(n));
    assigns \result;
    assigns \result
      \from (indirect: *((char *)s1 + (0 .. n - 1))),
            (indirect: *((char *)s2 + (0 .. n - 1)));
 */
int memcmp(void const *s1, void const *s2, size_t n);

/*@ requires
      valid:
        valid_read_or_empty(s, n) ∨
        \valid_read((unsigned char *)s + (.. memchr_off((char *)s, c, n)));
    requires
      initialization:
        \initialized((unsigned char *)s + (0 .. n - 1)) ∨
        \initialized((unsigned char *)s + (0 .. memchr_off((char *)s, c, n)));
    requires
      danglingness:
        non_escaping(s, n) ∨
        non_escaping(s, (size_t)((int)(memchr_off((char *)s, c, n) + 1)));
    assigns \result;
    assigns \result \from s, c, *((unsigned char *)s + (0 .. n - 1));
    
    behavior found:
      assumes char_found: memchr((char *)s, c, n) ≢ (0 ≢ 0);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures result_char: (int)*((char *)\result) ≡ \old(c);
      ensures
        result_in_str:
          ∀ ℤ i;
            (0 ≤ i < \old(n) ⇒
             *((unsigned char *)\old(s) + i) ≡ \old(c)) ⇒
            \result ≤ \old(s) + i;
    
    behavior not_found:
      assumes char_not_found: memchr((char *)s, c, n) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
 */
void *memchr(void const *s, int c, size_t n);

/*@ requires valid_dest: valid_or_empty(dest, n);
    requires valid_src: valid_read_or_empty(src, n);
    requires
      separation:
        \separated((char *)dest + (0 .. n - 1), (char *)src + (0 .. n - 1));
    ensures
      copied_contents:
        memcmp{Post, Pre}((char *)\old(dest), (char *)\old(src), \old(n)) ≡
        0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *((char *)dest + (0 .. n - 1)), \result;
    assigns *((char *)dest + (0 .. n - 1))
      \from *((char *)src + (0 .. n - 1));
    assigns \result \from dest;
 */
void *memcpy(void *dest, void const *src, size_t n);

/*@ requires valid_dest: valid_or_empty(dest, n);
    requires valid_src: valid_read_or_empty(src, n);
    ensures
      copied_contents:
        memcmp{Post, Pre}((char *)\old(dest), (char *)\old(src), \old(n)) ≡
        0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *((char *)dest + (0 .. n - 1)), \result;
    assigns *((char *)dest + (0 .. n - 1))
      \from *((char *)src + (0 .. n - 1));
    assigns \result \from dest;
 */
void *memmove(void *dest, void const *src, size_t n);

/*@ requires valid_s: valid_or_empty(s, n);
    ensures
      acsl_c_equiv: memset((char *)\old(s), \old(c), \old(n)) ≢ (0 ≢ 0);
    ensures result_ptr: \result ≡ \old(s);
    assigns *((char *)s + (0 .. n - 1)), \result;
    assigns *((char *)s + (0 .. n - 1)) \from c;
    assigns \result \from s;
 */
void *memset(void *s, int c, size_t n);

/*@ requires valid_string_s: valid_read_string(s);
    ensures acsl_c_equiv: \result ≡ strlen(\old(s));
    assigns \result;
    assigns \result \from (indirect: *(s + (0 ..)));
 */
size_t strlen(char const *s);

/*@ requires valid_string_s: valid_read_nstring(s, n);
    ensures
      result_bounded: \result ≡ strlen(\old(s)) ∨ \result ≡ \old(n);
    assigns \result;
    assigns \result \from (indirect: *(s + (0 .. n - 1))), (indirect: n);
 */
size_t strnlen(char const *s, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    ensures acsl_c_equiv: \result ≡ strcmp(\old(s1), \old(s2));
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcmp(char const *s1, char const *s2);

/*@ requires valid_string_s1: valid_read_nstring(s1, n);
    requires valid_string_s2: valid_read_nstring(s2, n);
    ensures acsl_c_equiv: \result ≡ strncmp(\old(s1), \old(s2), \old(n));
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 .. n - 1))),
            (indirect: *(s2 + (0 .. n - 1))), (indirect: n);
 */
int strncmp(char const *s1, char const *s2, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcoll(char const *s1, char const *s2);

/*@ requires valid_string_s: valid_read_string(s);
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), c;
    
    behavior found:
      assumes char_found: strchr(s, c) ≢ (0 ≢ 0);
      ensures result_char: *\result ≡ (char)\old(c);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures
        result_in_length: \old(s) ≤ \result ≤ \old(s) + strlen(\old(s));
      ensures result_valid_string: valid_read_string(\result);
      ensures
        result_first_occur:
          ∀ char *p; \old(s) ≤ p < \result ⇒ *p ≢ (char)\old(c);
    
    behavior not_found:
      assumes char_not_found: strchr(s, c) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
    
    behavior default:
      ensures
        result_null_or_same_base:
          \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
 */
char *strchr(char const *s, int c);

/*@ requires valid_string_s: valid_read_string(s);
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), c;
    
    behavior found:
      assumes char_found: strchr(s, c) ≢ (0 ≢ 0);
      ensures result_char: (int)*\result ≡ \old(c);
      ensures result_same_base: \base_addr(\result) ≡ \base_addr(\old(s));
      ensures result_valid_string: valid_read_string(\result);
    
    behavior not_found:
      assumes char_not_found: strchr(s, c) ≡ (0 ≢ 0);
      ensures result_null: \result ≡ \null;
    
    behavior default:
      ensures
        result_null_or_same_base:
          \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
 */
char *strrchr(char const *s, int c);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_reject: valid_read_string(reject);
    ensures result_bounded: 0 ≤ \result ≤ strlen(\old(s));
    assigns \result;
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(reject + (0 ..)));
 */
size_t strcspn(char const *s, char const *reject);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_accept: valid_read_string(accept);
    ensures result_bounded: 0 ≤ \result ≤ strlen(\old(s));
    assigns \result, \result;
    assigns \result \from *(s + (0 ..)), *(accept + (0 ..));
    assigns \result
      \from (indirect: *(s + (0 ..))), (indirect: *(accept + (0 ..)));
 */
size_t strspn(char const *s, char const *accept);

/*@ requires valid_string_s: valid_read_string(s);
    requires valid_string_accept: valid_read_string(accept);
    ensures
      result_null_or_same_base:
        \result ≡ \null ∨ \base_addr(\result) ≡ \base_addr(\old(s));
    assigns \result;
    assigns \result \from s, *(s + (0 ..)), *(accept + (0 ..));
 */
char *strpbrk(char const *s, char const *accept);

/*@ requires valid_string_haystack: valid_read_string(haystack);
    requires valid_string_needle: valid_read_string(needle);
    ensures
      result_null_or_in_haystack:
        \result ≡ \null ∨
        (\subset(\result, \old(haystack) + (0 ..)) ∧
         \valid_read(\result) ∧
         memcmp{Pre, Pre}(\result, \old(needle), strlen(\old(needle))) ≡ 0);
    assigns \result;
    assigns \result
      \from haystack, (indirect: *(haystack + (0 ..))),
            (indirect: *(needle + (0 ..)));
 */
char *strstr(char const *haystack, char const *needle);

char *__fc_strtok_ptr;
/*@ requires valid_string_delim: valid_read_string(delim);
    assigns *(s + (0 ..)), *(__fc_strtok_ptr + (0 ..)), \result,
            __fc_strtok_ptr;
    assigns *(s + (0 ..))
      \from *(s + (0 ..)), (indirect: s), (indirect: __fc_strtok_ptr),
            (indirect: *(delim + (0 ..)));
    assigns *(__fc_strtok_ptr + (0 ..))
      \from *(__fc_strtok_ptr + (0 ..)), (indirect: s),
            (indirect: __fc_strtok_ptr), (indirect: *(delim + (0 ..)));
    assigns \result
      \from s, __fc_strtok_ptr, (indirect: *(s + (0 ..))),
            (indirect: *(__fc_strtok_ptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    assigns __fc_strtok_ptr
      \from \old(__fc_strtok_ptr), s,
            (indirect: *(__fc_strtok_ptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    
    behavior new_str:
      assumes s_not_null: s ≢ \null;
      requires
        valid_string_s_or_delim_not_found:
          valid_string(s) ∨
          (valid_read_string(s) ∧
           (∀ int i;
              0 ≤ i < strlen(delim) ⇒
              strchr(s, *(delim + i)) ≡ (0 ≢ 0)));
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(s) + (0 ..));
      ensures ptr_subset: \subset(__fc_strtok_ptr, \old(s) + (0 ..));
      assigns __fc_strtok_ptr, *(s + (0 ..)), \result;
      assigns __fc_strtok_ptr
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
      assigns *(s + (0 ..))
        \from *(s + (0 ..)), (indirect: s), (indirect: *(delim + (0 ..)));
      assigns \result
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
    
    behavior resume_str:
      assumes s_null: s ≡ \null;
      requires not_first_call: __fc_strtok_ptr ≢ \null;
      ensures
        result_subset:
          \result ≡ \null ∨
          \subset(\result, \old(__fc_strtok_ptr) + (0 ..));
      ensures
        ptr_subset: \subset(__fc_strtok_ptr, \old(__fc_strtok_ptr) + (0 ..));
      assigns *(__fc_strtok_ptr + (0 ..)), __fc_strtok_ptr, \result;
      assigns *(__fc_strtok_ptr + (0 ..))
        \from *(__fc_strtok_ptr + (0 ..)), (indirect: __fc_strtok_ptr),
              (indirect: *(delim + (0 ..)));
      assigns __fc_strtok_ptr
        \from \old(__fc_strtok_ptr), (indirect: *(__fc_strtok_ptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
      assigns \result
        \from __fc_strtok_ptr, (indirect: *(__fc_strtok_ptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
    
    complete behaviors resume_str, new_str;
    disjoint behaviors resume_str, new_str;
 */
char *strtok(char *s, char const *delim);

/*@ requires valid_string_delim: valid_read_string(delim);
    requires valid_saveptr: \valid(saveptr);
    assigns *(s + (0 ..)), *(*saveptr + (0 ..)), \result, *saveptr;
    assigns *(s + (0 ..))
      \from *(s + (0 ..)), (indirect: s), (indirect: *saveptr),
            (indirect: *(delim + (0 ..)));
    assigns *(*saveptr + (0 ..))
      \from *(*saveptr + (0 ..)), (indirect: s), (indirect: *saveptr),
            (indirect: *(delim + (0 ..)));
    assigns \result
      \from s, *saveptr, (indirect: *(s + (0 ..))),
            (indirect: *(*saveptr + (0 ..))), (indirect: *(delim + (0 ..)));
    assigns *saveptr
      \from \old(*saveptr), s, (indirect: *(*saveptr + (0 ..))),
            (indirect: *(delim + (0 ..)));
    
    behavior new_str:
      assumes s_not_null: s ≢ \null;
      requires
        valid_string_s_or_delim_not_found:
          valid_string(s) ∨
          (valid_read_string(s) ∧
           (∀ int i;
              0 ≤ i < strlen(delim) ⇒
              strchr(s, *(delim + i)) ≡ (0 ≢ 0)));
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(s) + (0 ..));
      ensures initialization: \initialized(\old(saveptr));
      ensures saveptr_subset: \subset(*\old(saveptr), \old(s) + (0 ..));
      assigns *saveptr, *(s + (0 ..)), \result;
      assigns *saveptr
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
      assigns *(s + (0 ..))
        \from *(s + (0 ..)), (indirect: s), (indirect: *(delim + (0 ..)));
      assigns \result
        \from s, (indirect: *(s + (0 ..))), (indirect: *(delim + (0 ..)));
    
    behavior resume_str:
      assumes s_null: s ≡ \null;
      requires not_first_call: *saveptr ≢ \null;
      requires saveptr: initialization: \initialized(saveptr);
      ensures
        result_subset:
          \result ≡ \null ∨ \subset(\result, \old(*saveptr) + (0 ..));
      ensures
        saveptr_subset: \subset(*\old(saveptr), \old(*saveptr) + (0 ..));
      assigns *(*saveptr + (0 ..)), *saveptr, \result;
      assigns *(*saveptr + (0 ..))
        \from *(*saveptr + (0 ..)), (indirect: *saveptr),
              (indirect: *(delim + (0 ..)));
      assigns *saveptr
        \from \old(*saveptr), (indirect: *(*saveptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
      assigns \result
        \from *saveptr, (indirect: *(*saveptr + (0 ..))),
              (indirect: *(delim + (0 ..)));
    
    complete behaviors resume_str, new_str;
    disjoint behaviors resume_str, new_str;
 */
char *strtok_r(char *s, char const *delim, char **saveptr);

/*@ requires
      valid_string_stringp: \valid(stringp) ∧ valid_string(*stringp);
    requires valid_string_delim: valid_read_string(delim);
    assigns *stringp, \result;
    assigns *stringp \from *(delim + (..)), *(*(stringp + (..)));
    assigns \result \from *(delim + (..)), *(*(stringp + (..)));
 */
char *strsep(char **stringp, char const *delim);

char __fc_strerror[64];
char * const __fc_p_strerror = __fc_strerror;
/*@ ensures result_internal_str: \result ≡ __fc_p_strerror;
    ensures result_nul_terminated: *(\result + 63) ≡ 0;
    ensures result_valid_string: valid_read_string(\result);
    assigns \result;
    assigns \result \from __fc_p_strerror, (indirect: errnum);
 */
char *strerror(int errnum);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_string: \valid(dest + (0 .. strlen(src)));
    requires
      separation:
        \separated(dest + (0 .. strlen(src)), src + (0 .. strlen(src)));
    ensures equal_contents: strcmp(\old(dest), \old(src)) ≡ 0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest + (0 .. strlen{Old}(src))), \result;
    assigns *(dest + (0 .. strlen{Old}(src)))
      \from *(src + (0 .. strlen{Old}(src)));
    assigns \result \from dest;
 */
char *strcpy(char *dest, char const *src);

/*@ requires valid_string_src: valid_read_string(src);
    requires room_nstring: \valid(dest + (0 .. n - 1));
    requires separation: \separated(dest + (0 .. n - 1), src + (0 .. n - 1));
    ensures result_ptr: \result ≡ \old(dest);
    ensures initialization: \initialized(\old(dest) + (0 .. \old(n) - 1));
    assigns *(dest + (0 .. n - 1)), \result;
    assigns *(dest + (0 .. n - 1)) \from *(src + (0 .. n - 1));
    assigns \result \from dest;
    
    behavior complete:
      assumes src_fits: strlen(src) < n;
      ensures equal_after_copy: strcmp(\old(dest), \old(src)) ≡ 0;
    
    behavior partial:
      assumes src_too_long: n ≤ strlen(src);
      ensures
        equal_prefix:
          memcmp{Post, Post}(\old(dest), \old(src), \old(n)) ≡ 0;
 */
char *strncpy(char *dest, char const *src, size_t n);

/*@ requires valid_string_src: valid_read_string(src);
    requires valid_string_dest: valid_string(dest);
    requires room_string: \valid(dest + (0 .. strlen(dest) + strlen(src)));
    ensures
      sum_of_lengths: strlen(\old(dest)) ≡ \old(strlen(dest) + strlen(src));
    ensures
      dest: initialization:
        \initialized(\old(dest) + (0 .. \old(strlen(dest) + strlen(src))));
    ensures
      dest_null_terminated:
        *(\old(dest) + \old(strlen(dest) + strlen(src))) ≡ 0;
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest +
              (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src))),
            \result;
    assigns
    *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src)))
      \from *(src + (0 .. strlen{Old}(src)));
    assigns \result \from dest;
 */
char *strcat(char *dest, char const *src);

/*@ requires valid_nstring_src: valid_read_nstring(src, n);
    requires valid_string_dest: valid_string(dest);
    ensures result_ptr: \result ≡ \old(dest);
    assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n)), \result;
    assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n))
      \from *(src + (0 .. n));
    assigns \result \from dest;
    
    behavior complete:
      assumes
        valid_string_src_fits: valid_read_string(src) ∧ strlen(src) ≤ n;
      requires
        room_string: \valid((dest + strlen(dest)) + (0 .. strlen(src)));
      ensures
        sum_of_lengths:
          strlen(\old(dest)) ≡ \old(strlen(dest) + strlen(src));
      assigns *(dest +
                (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src))),
              \result;
      assigns
      *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + strlen{Old}(src)))
        \from *(src + (0 .. strlen{Old}(src)));
      assigns \result \from dest;
    
    behavior partial:
      assumes
        valid_string_src_too_large:
          ¬(valid_read_string(src) ∧ strlen(src) ≤ n);
      requires room_string: \valid((dest + strlen(dest)) + (0 .. n));
      ensures
        sum_of_bounded_lengths:
          strlen(\old(dest)) ≡ \old(strlen(dest)) + \old(n);
      assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n)),
              \result;
      assigns *(dest + (strlen{Old}(dest) .. strlen{Old}(dest) + n))
        \from *(src + (0 .. strlen{Old}(src)));
      assigns \result \from dest;
 */
char *strncat(char *dest, char const *src, size_t n);

/*@ requires valid_dest: \valid(dest + (0 .. n - 1));
    requires valid_string_src: valid_read_string(src);
    assigns *(dest + (0 .. n - 1)), \result;
    assigns *(dest + (0 .. n - 1))
      \from (indirect: *(src + (0 ..))), (indirect: n);
    assigns \result \from dest;
 */
size_t strxfrm(char *dest, char const *src, size_t n);

/*@ assigns \result;
    assigns \result
      \from (indirect: *(s + (0 .. strlen{Old}(s)))),
            (indirect: __fc_heap_status);
    allocates \nothing;
    
    behavior allocation:
      assumes can_allocate: is_allocable(strlen(s));
      ensures allocation: \fresh{Old, Here}(\result,strlen(\old(s)));
      ensures
        result_valid_string_and_same_contents:
          valid_string(\result) ∧ strcmp(\result, \old(s)) ≡ 0;
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status \from (indirect: s), __fc_heap_status;
      assigns \result
        \from (indirect: *(s + (0 .. strlen{Old}(s)))),
              (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(strlen(s));
      ensures result_null: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
 */
char *strdup(char const *s);

/*@ assigns \result;
    assigns \result
      \from (indirect: *(s + (0 .. strlen{Old}(s)))), (indirect: n),
            (indirect: __fc_heap_status);
    allocates \nothing;
    
    behavior allocation:
      assumes can_allocate: is_allocable(\min(strlen(s), n + 1));
      ensures
        allocation:
          \fresh{Old, Here}(\result,\min(strlen(\old(s)), \old(n) + 1));
      ensures
        result_valid_string_bounded_and_same_prefix:
          \valid(\result + (0 .. \min(strlen(\old(s)), \old(n)))) ∧
          valid_string(\result) ∧ strlen(\result) ≤ \old(n) ∧
          strncmp(\result, \old(s), \old(n)) ≡ 0;
      assigns __fc_heap_status, \result;
      assigns __fc_heap_status
        \from (indirect: s), (indirect: n), __fc_heap_status;
      assigns \result
        \from (indirect: *(s + (0 .. strlen{Old}(s)))), (indirect: n),
              (indirect: __fc_heap_status);
    
    behavior no_allocation:
      assumes cannot_allocate: ¬is_allocable(\min(strlen(s), n + 1));
      ensures result_null: \result ≡ \null;
      assigns \result;
      assigns \result \from \nothing;
 */
char *strndup(char const *s, size_t n);

/*@ requires valid_memory_area: \valid((char *)s + (0 .. n - 1));
    ensures
      zero_initialized: \subset(*((char *)\old(s) + (0 .. \old(n) - 1)), {0});
    assigns *((char *)s + (0 .. n - 1));
    assigns *((char *)s + (0 .. n - 1)) \from \nothing;
 */
void bzero(void *s, size_t n);

/*@ requires valid_string_s1: valid_read_string(s1);
    requires valid_string_s2: valid_read_string(s2);
    assigns \result;
    assigns \result
      \from (indirect: *(s1 + (0 ..))), (indirect: *(s2 + (0 ..)));
 */
int strcasecmp(char const *s1, char const *s2);

/*@ requires valid_string_s1: valid_read_nstring(s1, n);
    requires valid_string_s2: valid_read_nstring(s2, n);
    assigns \result;
    assigns \result
      \from (indirect: n), (indirect: *(s1 + (0 .. n - 1))),
            (indirect: *(s2 + (0 .. n - 1)));
 */
int strncasecmp(char const *s1, char const *s2, size_t n);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void exception::Ctor(struct exception const *this);

/*@ requires \separated(this, exn);
    requires \valid_read(this);
    requires \valid_read(exn);
 */
void exception::Ctor(struct exception const *this,
                     struct exception const *exn);

/*@ requires \valid(this);
    requires \valid_read(exn);
    ensures \valid(\result);
 */
struct exception *operator=(struct exception *this,
                            struct exception const *exn);

/*@ requires \valid_read(this); */
void exception::Dtor(struct exception const *this);

/*@ requires \valid_read(this); */
char const *what(struct exception const *this);

void bad_exception::Dtor(struct bad_exception const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_exception::Ctor(struct bad_exception const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_exception::Ctor(struct bad_exception const *this,
                         struct bad_exception const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_exception *operator=(struct bad_exception *this,
                                struct bad_exception const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
char const *what(struct bad_exception const *this);

/*@ requires \valid_read(this); */
void bad_exception::Dtor(struct bad_exception const *this)
{
  *((struct _frama_c_vmt **)this) = (struct _frama_c_vmt *)(& _frama_c_vmt_header);
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];

/*@ requires \valid_read(this); */
void nested_exception::Ctor(struct nested_exception const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void nested_exception::Ctor(struct nested_exception const *this,
                            struct nested_exception const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct nested_exception *operator=(struct nested_exception *this,
                                   struct nested_exception const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
void nested_exception::Dtor(struct nested_exception const *this);

/*@ requires \valid_read(this); */
void rethrow_nested(struct nested_exception const *this);

/*@ requires \valid_read(this); */
exception_ptr nested_ptr(struct nested_exception const *this);

int _frama_c_find_dynamic_cast_aux(struct _frama_c_rtti_name_info_node *target_info,
                                   struct _frama_c_rtti_name_info_content *concrete_base,
                                   int number_of_bases,
                                   int found_shift_object,
                                   int found_shift_vmt, int last_shift_vmt,
                                   int *shift_object, int *distance)
{
  int result = 0;
  struct _frama_c_rtti_name_info_content *cursor = concrete_base;
  int is_over = 0;
  int base_index = 0;
  while (base_index < number_of_bases) {
    if (cursor->value == target_info) {
      if (*distance < 0) goto _LOR;
      else 
        if (*distance >= 1) {
          _LOR:
          {
            if (found_shift_vmt == cursor->shift_vmt) *distance = 0;
            else *distance = 1;
            *shift_object = found_shift_object - cursor->shift_object;
            result = 1;
          }
        }
    }
    else 
      if (cursor->shift_vmt <= found_shift_vmt) {
        int tmp_5;
        if (base_index < number_of_bases - 1) tmp_5 = (cursor + 1)->shift_vmt > found_shift_vmt;
        else {
          int tmp_4;
          if (last_shift_vmt == -1) tmp_4 = 1;
          else 
            if (found_shift_vmt < last_shift_vmt) tmp_4 = 1; else tmp_4 = 0;
          tmp_5 = tmp_4;
        }
        if (tmp_5) {
          int tmp_0;
          int tmp;
          int local_distance = 0;
          int local_shift_object = 0;
          if (base_index < number_of_bases - 1) tmp = (cursor + 1)->shift_vmt;
          else tmp = last_shift_vmt;
          ;
          ;
          ;
          ;
          ;
          tmp_0 = _frama_c_find_dynamic_cast_aux(target_info,
                                                 (cursor->value)->base_classes,
                                                 (cursor->value)->number_of_base_classes,
                                                 found_shift_object - cursor->shift_object,
                                                 found_shift_vmt - cursor->shift_vmt,
                                                 tmp,& local_shift_object,
                                                 & local_distance);
          int local_result = tmp_0;
          if (local_result != 0) 
            if (local_distance >= 0) 
              if (*distance < 0) goto _LOR_0;
              else 
                if (*distance >= local_distance) {
                  _LOR_0:
                  {
                    result = local_result;
                    *shift_object = local_shift_object - cursor->shift_object;
                    *distance = local_distance;
                  }
                }
          is_over = 1;
        }
        else goto _LAND;
      }
      else {
        _LAND: ;
        if (*distance < 0) goto _LOR_2;
        else 
          if (*distance >= 1) {
            _LOR_2:
            {
              int tmp_2;
              int tmp_1;
              int local_distance_0 = 0;
              int local_shift_object_0 = 0;
              if (base_index < number_of_bases + 1) tmp_1 = (cursor + 1)->shift_vmt;
              else tmp_1 = last_shift_vmt;
              ;
              ;
              ;
              ;
              ;
              tmp_2 = _frama_c_find_dynamic_cast_aux(target_info,
                                                     (cursor->value)->base_classes,
                                                     (cursor->value)->number_of_base_classes,
                                                     found_shift_object - cursor->shift_object,
                                                     found_shift_vmt - cursor->shift_vmt,
                                                     tmp_1,
                                                     & local_shift_object_0,
                                                     & local_distance_0);
              int local_result_0 = tmp_2;
              if (local_result_0 != 0) 
                if (local_distance_0 >= 0) 
                  if (*distance < 0) goto _LOR_1;
                  else {
                    int tmp_3;
                    if (is_over == 0) tmp_3 = local_distance_0;
                    else tmp_3 = local_distance_0 + 1;
                    ;
                    if (*distance > tmp_3) {
                      _LOR_1:
                      {
                        result = local_result_0;
                        *shift_object = local_shift_object_0 - cursor->shift_object;
                        *distance = local_distance_0 + 1;
                      }
                    }
                  }
            }
          }
      }
    cursor ++;
    base_index ++;
  }
  return result;
}

int _frama_c_find_dynamic_cast(struct _frama_c_rtti_name_info_node *declared_info,
                               struct _frama_c_vmt *declared_vmt,
                               struct _frama_c_rtti_name_info_node *target_info,
                               int *shift_object)
{
  int __retres;
  int shift_vmt;
  int elaborated_shift_target;
  struct _frama_c_rtti_name_info_content *cursor;
  int number_of_bases;
  int tmp_0;
  struct _frama_c_rtti_name_info_node *concrete_info =
    declared_vmt->rtti_info;
  int elaborated_shift_vmt = 0;
  int elaborated_shift_object = 0;
  int cursor_index = 0;
  int distance = -1;
  if (concrete_info->pvmt > declared_vmt) {
    __retres = 0;
    goto return_label;
  }
  else 
    if (declared_vmt > concrete_info->pvmt + declared_vmt->table_size) {
      __retres = 0;
      goto return_label;
    }
  shift_vmt = declared_vmt - concrete_info->pvmt;
  if (concrete_info == declared_info) {
    *shift_object = 0;
    __retres = target_info == declared_info;
    goto return_label;
  }
  if (target_info == concrete_info) elaborated_shift_target = 0;
  else elaborated_shift_target = -1;
  cursor = concrete_info->base_classes;
  number_of_bases = concrete_info->number_of_base_classes;
  while (1) {
    while (1) {
      if (cursor_index < number_of_bases) {
        if (! (elaborated_shift_vmt + cursor->shift_vmt < shift_vmt)) 
          break;
      }
      else break;
      {
        struct _frama_c_rtti_name_info_content *tmp;
        if (cursor_index < number_of_bases - 1) tmp = cursor + 1;
        else tmp = (struct _frama_c_rtti_name_info_content *)0;
        struct _frama_c_rtti_name_info_content *next_cursor = tmp;
        if (next_cursor != (struct _frama_c_rtti_name_info_content *)0) 
          if (elaborated_shift_vmt + next_cursor->shift_vmt <= shift_vmt) {
            cursor = next_cursor;
            cursor_index ++;
          }
          else break;
        else break;
      }
    }
    if (cursor_index < number_of_bases) {
      elaborated_shift_vmt += cursor->shift_vmt;
      elaborated_shift_object += cursor->shift_object;
      if (cursor->value == target_info) elaborated_shift_target = elaborated_shift_object;
      if (elaborated_shift_vmt == shift_vmt) 
        if (cursor->value == declared_info) {
          if (elaborated_shift_target >= 0) {
            *shift_object = elaborated_shift_target - elaborated_shift_object;
            __retres = 1;
            goto return_label;
          }
          break;
        }
      cursor = (cursor->value)->base_classes;
      number_of_bases = (cursor->value)->number_of_base_classes;
      cursor_index = 0;
    }
    if (! (cursor_index < number_of_bases)) break;
  }
  if (cursor_index >= number_of_bases) {
    __retres = 0;
    goto return_label;
  }
  tmp_0 = _frama_c_find_dynamic_cast_aux(target_info,
                                         concrete_info->base_classes,
                                         concrete_info->number_of_base_classes,
                                         elaborated_shift_object,shift_vmt,
                                         -1,shift_object,& distance);
  __retres = tmp_0;
  return_label: return __retres;
}

struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& exception::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "exception",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_exception::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_exception *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_exception",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[1] =
  {{.method_ptr = (void (*)())(& nested_exception::Dtor), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "nested_exception",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 1,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];

/*@ requires \valid_read(this); */
void type_info::Dtor(struct type_info const *this);

/*@ requires \valid_read(this); */
void type_info::Ctor(struct type_info const *this,
                     char const *__frama_c_arg_0);

/*@ requires \valid_read(this);
    requires \valid_read(rhs); */
_Bool operator==(struct type_info const *this, struct type_info const *rhs);

/*@ requires \valid_read(this);
    requires \valid_read(rhs); */
_Bool operator!=(struct type_info const *this, struct type_info const *rhs);

/*@ requires \valid_read(this);
    requires \valid_read(rhs); */
_Bool before(struct type_info const *this, struct type_info const *rhs);

/*@ requires \valid_read(this); */
size_t hash_code(struct type_info const *this);

/*@ requires \valid_read(this); */
char const *name(struct type_info const *this);

void bad_cast::Dtor(struct bad_cast const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_cast::Ctor(struct bad_cast const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_cast::Ctor(struct bad_cast const *this,
                    struct bad_cast const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_cast *operator=(struct bad_cast *this,
                           struct bad_cast const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
char const *what(struct bad_cast const *this);

/*@ requires \valid_read(this); */
void bad_cast::Dtor(struct bad_cast const *this)
{
  *((struct _frama_c_vmt **)this) = (struct _frama_c_vmt *)(& _frama_c_vmt_header);
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

void bad_typeid::Dtor(struct bad_typeid const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_typeid::Ctor(struct bad_typeid const *this);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_typeid::Ctor(struct bad_typeid const *this,
                      struct bad_typeid const *__frama_c_arg_0);

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_typeid *operator=(struct bad_typeid *this,
                             struct bad_typeid const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
char const *what(struct bad_typeid const *this);

/*@ requires \valid_read(this); */
void bad_typeid::Dtor(struct bad_typeid const *this)
{
  *((struct _frama_c_vmt **)this) = (struct _frama_c_vmt *)(& _frama_c_vmt_header);
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

struct _frama_c_vmt_content _frama_c_vmt[1] =
  {{.method_ptr = (void (*)())(& type_info::Dtor), .shift_this = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "type_info",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 1,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_cast::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_cast *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_cast",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_typeid::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what), .shift_this = 0}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_typeid *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_typeid",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
void reference_wrapper<int*,<abst>>::Dtor(struct reference_wrapper<int*,<abst>> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid(t); */
void reference_wrapper<int*,<abst>>::Ctor(struct reference_wrapper<int*,<abst>> const *this,
                                          type *t)
{
  this->obj = *t;
  return;
}

/*@ requires \valid_read(this);
    requires \valid_read(t); */
void reference_wrapper<int*,<abst>>::Ctor(struct reference_wrapper<int*,<abst>> const *this,
                                          type const *t);

/*@ requires \separated(this, x);
    requires \valid_read(this);
    requires \valid_read(x);
 */
void reference_wrapper<int*,<abst>>::Ctor(struct reference_wrapper<int*,<abst>> const *this,
                                          struct reference_wrapper<int*,<abst>> const *x)
{
  this->obj = x->obj;
  return;
}

/*@ requires \valid(this);
    requires \valid_read(x);
    ensures \valid(\result); */
struct reference_wrapper<int*,<abst>> *operator=(struct reference_wrapper<int*,<abst>> *this,
                                                 struct reference_wrapper<int*,<abst>> const *x);

/*@ requires \valid_read(this);
    ensures \valid(\result); */
type *type&)(struct reference_wrapper<int*,<abst>> const *this);

/*@ requires \valid_read(this);
    ensures \valid(\result); */
type *get(struct reference_wrapper<int*,<abst>> const *this);

/*@ requires \valid_read(this); */
int operator()(struct reference_wrapper<int*,<abst>> const *this, int arg)
{
  int tmp;
  tmp = (*(this->obj))(arg);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) {
      default: {
                 tmp = 0;
                 goto __ret_label;
               }
    }
  __ret_label: return tmp;
}

/*@ requires \valid_read(this); */
void reference_wrapper<int*,<abst>>::Dtor(struct reference_wrapper<int*,<abst>> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "reference_wrapper",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid(t); */
void reference_wrapper<int>::Ctor(struct reference_wrapper<int> const *this,
                                  int *t);

/*@ requires \separated(this, x);
    requires \valid_read(this);
    requires \valid_read(x);
 */
void reference_wrapper<int>::Ctor(struct reference_wrapper<int> const *this,
                                  struct reference_wrapper<int> const *x);

/*@ requires \valid(this);
    requires \valid_read(x);
    ensures \valid(\result); */
struct reference_wrapper<int> *operator=(struct reference_wrapper<int> *this,
                                         struct reference_wrapper<int> const *x);

/*@ requires \valid_read(this);
    ensures \valid(\result); */
int *conversion(int&)(struct reference_wrapper<int> const *this);

/*@ requires \valid_read(this);
    ensures \valid(\result); */
int *get(struct reference_wrapper<int> const *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "reference_wrapper",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid(t); */
struct reference_wrapper<int*,<abst>> ref<int*,<abst>>(int (**t)(int ))
{
  struct reference_wrapper<int*,<abst>> res;
  reference_wrapper<int*,<abst>>::Ctor(& res,t);
  reference_wrapper<int*,<abst>>::Dtor((struct reference_wrapper<int*,<abst>> const *)(& res));
  return res;
}

void __minus>::Ctor(struct __binop<int,std::__minus> const *this);

void __minus>::Dtor(struct __binop<int,std::__minus> const *this);

void __minus>::Ctor(struct __binop<int,std::__minus> const *this,
                    struct __binop<int,std::__minus> const *__frama_c_arg_0);

void __minus>::Ctor(struct __binop<int,std::__minus> const *this,
                    struct __binop<int,std::__minus> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid_read(y);
    requires \valid_read(x);
 */
int operator()(struct __binop<int,std::__minus> const *this, int const *x,
               int const *y);

__funtype __funtype)(struct __binop<int,std::__minus> *this);

/*@ requires \valid_read(this); */
void __minus>::Ctor(struct __binop<int,std::__minus> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __minus>::Dtor(struct __binop<int,std::__minus> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __minus>::Ctor(struct __binop<int,std::__minus> const *this,
                    struct __binop<int,std::__minus> const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __minus>::Ctor(struct __binop<int,std::__minus> const *this,
                    struct __binop<int,std::__minus> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__binop",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __plus>::Ctor(struct __binop<int,std::__plus> const *this);

void __plus>::Dtor(struct __binop<int,std::__plus> const *this);

void __plus>::Ctor(struct __binop<int,std::__plus> const *this,
                   struct __binop<int,std::__plus> const *__frama_c_arg_0);

void __plus>::Ctor(struct __binop<int,std::__plus> const *this,
                   struct __binop<int,std::__plus> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid_read(y);
    requires \valid_read(x);
 */
int operator()(struct __binop<int,std::__plus> const *this, int const *x,
               int const *y);

__funtype __funtype)(struct __binop<int,std::__plus> *this);

/*@ requires \valid_read(this); */
void __plus>::Ctor(struct __binop<int,std::__plus> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __plus>::Dtor(struct __binop<int,std::__plus> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __plus>::Ctor(struct __binop<int,std::__plus> const *this,
                   struct __binop<int,std::__plus> const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __plus>::Ctor(struct __binop<int,std::__plus> const *this,
                   struct __binop<int,std::__plus> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__binop",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(y);
    requires \valid_read(x); */
int __plus<int>(int const *x, int const *y)
{
  int __retres;
  __retres = *x + *y;
  return __retres;
}

/*@ requires \valid(this); */
__funtype __funtype)(struct __binop<int,std::__plus> *this)
{
  __funtype __retres;
  __retres = & __plus<int>;
  return __retres;
}

void plus<int>::Ctor(struct plus<int> const *this);

void plus<int>::Ctor(struct plus<int> const *this,
                     struct plus<int> const *__frama_c_arg_0);

void plus<int>::Ctor(struct plus<int> const *this,
                     struct plus<int> *__frama_c_arg_0);

void plus<int>::Dtor(struct plus<int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void plus<int>::Ctor(struct plus<int> const *this)
{
  __plus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void plus<int>::Ctor(struct plus<int> const *this,
                     struct plus<int> const *__frama_c_arg_0)
{
  __plus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE,
                & __frama_c_arg_0->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void plus<int>::Ctor(struct plus<int> const *this,
                     struct plus<int> *__frama_c_arg_0)
{
  __plus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE,
                & __frama_c_arg_0->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  return;
}

/*@ requires \valid_read(this); */
void plus<int>::Dtor(struct plus<int> const *this)
{
  __plus>::Dtor(& this->_frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  return;
}

/*@ requires \valid(t);
    ensures \valid(\result); */
struct plus<int> *forward<std::plus<int>>(type *t)
{
  return t;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "plus",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(y);
    requires \valid_read(x); */
int __minus<int>(int const *x, int const *y)
{
  int __retres;
  __retres = *x - *y;
  return __retres;
}

/*@ requires \valid(this); */
__funtype __funtype)(struct __binop<int,std::__minus> *this)
{
  __funtype __retres;
  __retres = & __minus<int>;
  return __retres;
}

void minus<int>::Ctor(struct minus<int> const *this);

void minus<int>::Ctor(struct minus<int> const *this,
                      struct minus<int> const *__frama_c_arg_0);

void minus<int>::Ctor(struct minus<int> const *this,
                      struct minus<int> *__frama_c_arg_0);

void minus<int>::Dtor(struct minus<int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void minus<int>::Ctor(struct minus<int> const *this)
{
  __minus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void minus<int>::Ctor(struct minus<int> const *this,
                      struct minus<int> const *__frama_c_arg_0)
{
  __minus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE,
                 & __frama_c_arg_0->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void minus<int>::Ctor(struct minus<int> const *this,
                      struct minus<int> *__frama_c_arg_0)
{
  __minus>::Ctor(& this->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE,
                 & __frama_c_arg_0->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  return;
}

/*@ requires \valid_read(this); */
void minus<int>::Dtor(struct minus<int> const *this)
{
  __minus>::Dtor(& this->_frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  return;
}

/*@ requires \valid(t);
    ensures \valid(\result); */
struct minus<int> *forward<std::minus<int>>(type *t)
{
  return t;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "minus",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void __less>::Ctor(struct __bool_binop<int,std::__less> const *this);

void __less>::Dtor(struct __bool_binop<int,std::__less> const *this);

void __less>::Ctor(struct __bool_binop<int,std::__less> const *this,
                   struct __bool_binop<int,std::__less> const *__frama_c_arg_0);

void __less>::Ctor(struct __bool_binop<int,std::__less> const *this,
                   struct __bool_binop<int,std::__less> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
_Bool operator()(struct __bool_binop<int,std::__less> const *this,
                 int const *x, int const *y);

/*@ requires \valid(this); */
__funtype __funtype)(struct __bool_binop<int,std::__less> *this);

/*@ requires \valid_read(this); */
void __less>::Ctor(struct __bool_binop<int,std::__less> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void __less>::Dtor(struct __bool_binop<int,std::__less> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void __less>::Ctor(struct __bool_binop<int,std::__less> const *this,
                   struct __bool_binop<int,std::__less> const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void __less>::Ctor(struct __bool_binop<int,std::__less> const *this,
                   struct __bool_binop<int,std::__less> *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "__bool_binop",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(y);
    requires \valid_read(x); */
_Bool __less<int>(int const *x, int const *y)
{
  _Bool __retres;
  __retres = (_Bool)(*x < *y);
  return __retres;
}

/*@ requires \valid_read(this);
    requires \valid_read(y);
    requires \valid_read(x);
 */
_Bool operator()(struct __bool_binop<int,std::__less> const *this,
                 int const *x, int const *y)
{
  _Bool tmp;
  tmp = __less<int>(x,y);
  return tmp;
}

void less<int>::Ctor(struct less<int> const *this);

void less<int>::Ctor(struct less<int> const *this,
                     struct less<int> const *__frama_c_arg_0);

void less<int>::Ctor(struct less<int> const *this,
                     struct less<int> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void less<int>::Ctor(struct less<int> const *this)
{
  __less>::Ctor(& this->_frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void less<int>::Ctor(struct less<int> const *this,
                     struct less<int> const *__frama_c_arg_0)
{
  __less>::Ctor(& this->_frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE,
                & __frama_c_arg_0->_frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void less<int>::Ctor(struct less<int> const *this,
                     struct less<int> *__frama_c_arg_0)
{
  __less>::Ctor(& this->_frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE,
                & __frama_c_arg_0->_frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE);
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "less",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void bad_function_call::Ctor(struct bad_function_call const *this,
                             struct bad_function_call const *__frama_c_arg_0);

void bad_function_call::Ctor(struct bad_function_call const *this,
                             struct bad_function_call *__frama_c_arg_0);

struct bad_function_call *operator=(struct bad_function_call *this,
                                    struct bad_function_call const *__frama_c_arg_0);

struct bad_function_call *operator=(struct bad_function_call *this,
                                    struct bad_function_call *__frama_c_arg_0);

void bad_function_call::Dtor(struct bad_function_call const *this);

struct _frama_c_vmt _frama_c_vmt_header;

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];

struct _frama_c_vmt_content _frama_c_vmt[2];

/*@ requires \valid_read(this); */
void bad_function_call::Ctor(struct bad_function_call const *this)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception);
  *((struct _frama_c_vmt **)this) = & _frama_c_vmt_header;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bad_function_call::Ctor(struct bad_function_call const *this,
                             struct bad_function_call const *__frama_c_arg_0)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception,
                  & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return;
}

void exception::Ctor(struct exception const *this,
                     struct exception *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void bad_function_call::Ctor(struct bad_function_call const *this,
                             struct bad_function_call *__frama_c_arg_0)
{
  exception::Ctor(& this->_frama_c__ZN3stdE9exception,
                  & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return;
}

/*@ requires \valid(this);
    requires \valid_read(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_function_call *operator=(struct bad_function_call *this,
                                    struct bad_function_call const *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE9exception,
            & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return this;
}

struct exception *operator=(struct exception *this,
                            struct exception *__frama_c_arg_0)
{
  this->pvmt = __frama_c_arg_0->pvmt;
  return this;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct bad_function_call *operator=(struct bad_function_call *this,
                                    struct bad_function_call *__frama_c_arg_0)
{
  operator=(& this->_frama_c__ZN3stdE9exception,
            & __frama_c_arg_0->_frama_c__ZN3stdE9exception);
  return this;
}

/*@ requires \valid_read(this); */
void bad_function_call::Dtor(struct bad_function_call const *this)
{
  *((struct _frama_c_vmt **)this) = (struct _frama_c_vmt *)(& _frama_c_vmt_header);
  exception::Dtor(& this->_frama_c__ZN3stdE9exception);
  return;
}

struct _frama_c_vmt_content _frama_c_vmt[2] =
  {{.method_ptr = (void (*)())(& bad_function_call::Dtor), .shift_this = 0},
   {.method_ptr = (void (*)())(& what),
    .shift_this = (char *)(& ((struct bad_function_call *)0)->_frama_c__ZN3stdE9exception) - (char *)(& ((struct bad_function_call *)0)->_frama_c__ZN3stdE9exception)}};
struct _frama_c_rtti_name_info_content _frama_c_base_classes[1] =
  {{.value = & _frama_c_rtti_name_info,
    .shift_object = (char *)0 - (char *)(& ((struct bad_function_call *)0)->_frama_c__ZN3stdE9exception),
    .shift_vmt = 0}};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bad_function_call",
   .base_classes = _frama_c_base_classes,
   .number_of_base_classes = 1,
   .pvmt = & _frama_c_vmt_header};
struct _frama_c_vmt _frama_c_vmt_header =
  {.table = _frama_c_vmt,
   .table_size = 2,
   .rtti_info = & _frama_c_rtti_name_info};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this);

/*@ requires \valid_read(this); */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 nullptr_t null);

/*@ requires \separated(this, other);
    requires \valid_read(this);
    requires \valid_read(other);
 */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 struct function<int*,<abst>> const *other);

/*@ requires \separated(this, other);
    requires \valid_read(this);
    requires \valid(other);
 */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 struct function<int*,<abst>> *other);

/*@ requires \valid_read(this); */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 int (*f)(int const *, int const *))
{
  if (! ((_Bool)(f != 0))) this->_f = (int (*)(int const *, int const *))0;
  else this->_f = f;
  return;
}

/*@ requires \valid_read(this); */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 struct minus<int> f)
{
  __funtype tmp;
  tmp = __funtype)(& f._frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  if ((_Bool)(tmp != 0)) this->_f = __funtype)(& f._frama_c__ZN3stdE7__binopIiN3stdE7__minusE);
  else this->_f = (int (*)(int const *, int const *))0;
  return;
}

/*@ requires \valid_read(this); */
void function<int*,<abst>>::Ctor(struct function<int*,<abst>> const *this,
                                 struct plus<int> f)
{
  __funtype tmp;
  tmp = __funtype)(& f._frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  if ((_Bool)(tmp != 0)) this->_f = __funtype)(& f._frama_c__ZN3stdE7__binopIiN3stdE6__plusE);
  else this->_f = (int (*)(int const *, int const *))0;
  return;
}

/*@ requires \valid(this);
    requires \valid(other); */
void swap(struct function<int*,<abst>> *this,
          struct function<int*,<abst>> *other)
{
  int (*tmp)(int const *, int const *) = this->_f;
  this->_f = other->_f;
  other->_f = tmp;
  return;
}

/*@ requires \valid(this);
    requires \valid_read(f);
    ensures \valid(\result); */
struct function<int*,<abst>> *operator=(struct function<int*,<abst>> *this,
                                        struct function<int*,<abst>> const *f);

/*@ requires \valid(this);
    requires \valid(f);
    ensures \valid(\result); */
struct function<int*,<abst>> *operator=(struct function<int*,<abst>> *this,
                                        struct function<int*,<abst>> *f);

/*@ requires \valid(this);
    ensures \valid(\result); */
struct function<int*,<abst>> *operator=(struct function<int*,<abst>> *this,
                                        nullptr_t null);

/*@ requires \valid(this);
    requires \valid(f);
    ensures \valid(\result); */
struct function<int*,<abst>> *operator=<std::minus<int>,void>(struct function<int*,<abst>> *this,
                                                              struct minus<int> *f)
{
  {
    struct minus<int> *tmp;
    tmp = forward<std::minus<int>>(f);
    struct minus<int> __fc_tmp_4;
    minus<int>::Ctor(& __fc_tmp_4,tmp);
    struct function<int*,<abst>> __fc_tmp_3;
    function<int*,<abst>>::Ctor(& __fc_tmp_3,__fc_tmp_4);
    swap(& __fc_tmp_3,this);
    minus<int>::Dtor((struct minus<int> const *)(& __fc_tmp_4));
  }
  return this;
}

/*@ requires \valid(this);
    requires \valid(f);
    ensures \valid(\result); */
struct function<int*,<abst>> *operator=<std::plus<int>,void>(struct function<int*,<abst>> *this,
                                                             struct plus<int> *f)
{
  {
    struct plus<int> *tmp;
    tmp = forward<std::plus<int>>(f);
    struct plus<int> __fc_tmp_7;
    plus<int>::Ctor(& __fc_tmp_7,tmp);
    struct function<int*,<abst>> __fc_tmp_6;
    function<int*,<abst>>::Ctor(& __fc_tmp_6,__fc_tmp_7);
    swap(& __fc_tmp_6,this);
    plus<int>::Dtor((struct plus<int> const *)(& __fc_tmp_7));
  }
  return this;
}

/*@ requires \valid_read(this); */
void function<int*,<abst>>::Dtor(struct function<int*,<abst>> const *this)
{
  return;
}

/*@ requires \valid_read(this); */
_Bool conversion(bool)(struct function<int*,<abst>> const *this);

/*@ requires \valid(this);
    requires \valid_read(arg2);
    requires \valid_read(arg1);
 */
int operator()(struct function<int*,<abst>> *this, int const *arg1,
               int const *arg2)
{
  int tmp_1;
  int const *tmp;
  int const *tmp_0;
  if (! ((_Bool)(this->_f != 0))) {
    struct bad_function_call __fc_tmp_9;
    bad_function_call::Ctor(& __fc_tmp_9);
    __fc_exn.exn_uncaught = 1;
    __fc_exn.exn_kind = __fc_exn_kind___fc_S_ZN3stdE17bad_function_call;
    __fc_exn.exn_obj.__fc_S_ZN3stdE17bad_function_call = __fc_tmp_9;
    tmp_1 = 0;
    goto __ret_label;
  }
  tmp = forward<int&>((type *)arg2);
  tmp_0 = forward<int&>((type *)arg1);
  tmp_1 = (*(this->_f))(tmp_0,tmp);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) {
      default: {
                 tmp_1 = 0;
                 goto __ret_label;
               }
    }
  __ret_label: return tmp_1;
}

/*@ requires \valid(this);
    ensures \valid_read(\result); */
struct type_info const *target_type(struct function<int*,<abst>> *this);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "function",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
result_type x = 5;
type y = 42;
int f(int x)
{
  return x;
}

int (*pf)(int ) = & f;
struct reference_wrapper<int*,<abst>> wrap_f;
void __fc_init_Z6wrap_f(void) __attribute__((__constructor__));
void __fc_init_Z6wrap_f(void)
{
  struct reference_wrapper<int*,<abst>> __fc_tmp_11 = ref<int*,<abst>>(& pf);
  wrap_f = __fc_tmp_11;
  reference_wrapper<int*,<abst>>::Dtor((struct reference_wrapper<int*,<abst>> const *)(& __fc_tmp_11));
  return;
}

int t;
void __fc_init_Z1t(void) __attribute__((__constructor__));
void __fc_init_Z1t(void)
{
  t = operator()((struct reference_wrapper<int*,<abst>> const *)(& wrap_f),5);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) default: goto __ret_label;
  __ret_label: return;
}

int u;
void __fc_init_Z1u(void) __attribute__((__constructor__));
void __fc_init_Z1u(void)
{
  int *tmp;
  tmp = forward<int>(& x);
  u = operator()((struct reference_wrapper<int*,<abst>> const *)(& wrap_f),
                 *tmp);
  if (__fc_exn.exn_uncaught == 1) 
    switch (__fc_exn.exn_kind) default: goto __ret_label;
  __ret_label: return;
}

/*@ requires \valid_read(y);
    requires \valid_read(x); */
int h(int const *x, int const *y)
{
  int __retres;
  __retres = *x * *y;
  return __retres;
}

int g(int c)
{
  struct function<int*,<abst>> op;
  function<int*,<abst>>::Ctor(& op,& h);
  struct less<int> test;
  less<int>::Ctor(& test);
  {
    _Bool __fc_tmp_13;
    int const __fc_tmp_12 = 0;
    __fc_tmp_13 = operator()((struct __bool_binop<int,std::__less> const *)(& test._frama_c__ZN3stdE12__bool_binopIiN3stdE6__lessE),
                             (int const *)(& c),& __fc_tmp_12);
    if (__fc_tmp_13) {
      struct function<int*,<abst>> *tmp;
      struct minus<int> __fc_tmp_15;
      minus<int>::Ctor(& __fc_tmp_15);
      tmp = operator=<std::minus<int>,void>(& op,& __fc_tmp_15);
      minus<int>::Dtor((struct minus<int> const *)(& __fc_tmp_15));
    }
    else 
      if (c > 0) {
        struct function<int*,<abst>> *tmp_0;
        struct plus<int> __fc_tmp_17;
        plus<int>::Ctor(& __fc_tmp_17);
        tmp_0 = operator=<std::plus<int>,void>(& op,& __fc_tmp_17);
        plus<int>::Dtor((struct plus<int> const *)(& __fc_tmp_17));
      }
  }
  {
    int tmp_1;
    int const __fc_tmp_18 = 5;
    int const __fc_tmp_19 = 4;
    tmp_1 = operator()(& op,& __fc_tmp_18,& __fc_tmp_19);
    if (__fc_exn.exn_uncaught == 1) 
      switch (__fc_exn.exn_kind) {
        default: {
                   tmp_1 = 0;
                   goto __ret_label;
                 }
      }
    __ret_label:
    function<int*,<abst>>::Dtor((struct function<int*,<abst>> const *)(& op));
    return tmp_1;
  }
}


