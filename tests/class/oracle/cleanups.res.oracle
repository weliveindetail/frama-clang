[kernel] Parsing tests/class/cleanups.cc (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function strdup can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function free can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
[kernel] Warning: Assuming declared function print can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct StringRepository;
struct StringRepository {
   char *m_support ;
   int m_shared ;
};
struct String;
struct String {
   struct StringRepository *m_repository ;
};
void *malloc(unsigned int size);

void free(void *ptr);

char *strdup(char const *__frama_c_arg_0);

void StringRepository::Dtor(struct StringRepository const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void StringRepository::Ctor(struct StringRepository const *this,
                            char *support)
{
  this->m_support = support;
  this->m_shared = 0;
  return;
}

/*@ requires \valid(this); */
void incShared(struct StringRepository *this)
{
  (this->m_shared) ++;
  return;
}

/*@ requires \valid(this); */
_Bool decShared(struct StringRepository *this)
{
  _Bool __retres;
  (this->m_shared) --;
  __retres = (_Bool)(this->m_shared <= 0);
  return __retres;
}

/*@ requires \valid_read(this); */
void StringRepository::Dtor(struct StringRepository const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "StringRepository",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void String::Ctor(struct String const *this, char const *support)
{
  struct StringRepository *__fc_tmp_0;
  char *tmp;
  tmp = strdup(support);
  __fc_tmp_0 = (struct StringRepository *)malloc(sizeof(struct StringRepository));
  StringRepository::Ctor((struct StringRepository const *)__fc_tmp_0,tmp);
  this->m_repository = __fc_tmp_0;
  incShared(this->m_repository);
  return;
}

/*@ requires \separated(this, source);
    requires \valid_read(this);
    requires \valid_read(source);
 */
void String::Ctor(struct String const *this, struct String const *source)
{
  this->m_repository = source->m_repository;
  incShared(this->m_repository);
  return;
}

/*@ requires \valid_read(this); */
void String::Dtor(struct String const *this)
{
  _Bool tmp;
  tmp = decShared(this->m_repository);
  if (tmp) {
    StringRepository::Dtor((struct StringRepository const *)this->m_repository);
    free((void *)this->m_repository);
  }
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "String",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(source); */
_Bool print(struct String const *source);

int main(void)
{
  int __retres;
  _Bool x;
  _Bool tmp;
  _Bool tmp_0;
  {
    struct String const __clang_tmp_0;
    String::Ctor(& __clang_tmp_0,"test1");
    print(& __clang_tmp_0);
    String::Dtor(& __clang_tmp_0);
  }
  {
    struct String const __clang_tmp_1;
    String::Ctor(& __clang_tmp_1,"test2");
    print(& __clang_tmp_1);
    String::Dtor(& __clang_tmp_1);
  }
  struct String const __clang_tmp_2;
  String::Ctor(& __clang_tmp_2,"x");
  struct String const __clang_tmp_3;
  String::Ctor(& __clang_tmp_3,"y");
  tmp = print(& __clang_tmp_2);
  tmp_0 = print(& __clang_tmp_3);
  x = (_Bool)((int)tmp + (int)tmp_0 != 0);
  {
    _Bool __fc_tmp_1;
    struct String const __clang_tmp_4;
    String::Ctor(& __clang_tmp_4,"condition");
    __fc_tmp_1 = print(& __clang_tmp_4);
    if (__fc_tmp_1) {
      struct String const __clang_tmp_5;
      String::Ctor(& __clang_tmp_5,"yes");
      print(& __clang_tmp_5);
      String::Dtor(& __clang_tmp_5);
    }
    String::Dtor(& __clang_tmp_4);
  }
  {
    _Bool __fc_tmp_2;
    _Bool tmp_1;
    _Bool tmp_2;
    struct String const __clang_tmp_6;
    String::Ctor(& __clang_tmp_6,"z");
    struct String const __clang_tmp_7;
    String::Ctor(& __clang_tmp_7,"t");
    tmp_1 = print(& __clang_tmp_6);
    tmp_2 = print(& __clang_tmp_7);
    __fc_tmp_2 = (_Bool)((int)tmp_1 + (int)tmp_2 != 0);
    if (__fc_tmp_2) {
      struct String const __clang_tmp_8;
      String::Ctor(& __clang_tmp_8,"yes2");
      print(& __clang_tmp_8);
      String::Dtor(& __clang_tmp_8);
    }
    String::Dtor(& __clang_tmp_7);
    String::Dtor(& __clang_tmp_6);
  }
  {
    _Bool tmp_3;
    struct String const __clang_tmp_9;
    String::Ctor(& __clang_tmp_9,"return");
    tmp_3 = print(& __clang_tmp_9);
    __retres = (int)tmp_3;
    String::Dtor(& __clang_tmp_9);
    String::Dtor(& __clang_tmp_3);
    String::Dtor(& __clang_tmp_2);
    return __retres;
  }
}


