[kernel] Parsing tests/class/simple_classe.cc (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct Point;
struct Point {
   int _x ;
   int _y ;
};
void Point::Ctor(struct Point const *this,
                 struct Point const *__frama_c_arg_0);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

/*@ requires \valid_read(this); */
void Point::Ctor(struct Point const *this)
{
  this->_x = 0;
  this->_y = 0;
  return;
}

void Point::Ctor(struct Point const *this, int x, int y);

void move_x(struct Point *this, int dx);

void move_y(struct Point *this, int dy);

void move(struct Point *this, int dx, int dy);

/*@ requires \valid(this); */
int get_x(struct Point *this)
{
  int __retres;
  __retres = this->_x;
  return __retres;
}

/*@ requires \valid(this); */
int get_y(struct Point *this)
{
  int __retres;
  __retres = this->_y;
  return __retres;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Point::Ctor(struct Point const *this,
                 struct Point const *__frama_c_arg_0)
{
  this->_x = __frama_c_arg_0->_x;
  this->_y = __frama_c_arg_0->_y;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Point",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid_read(this); */
void Point::Ctor(struct Point const *this, int x, int y)
{
  this->_x = x;
  this->_y = y;
  return;
}

/*@ requires \valid(this); */
void move_x(struct Point *this, int dx)
{
  this->_x += dx;
  return;
}

/*@ requires \valid(this); */
void move_y(struct Point *this, int dy)
{
  this->_y += dy;
  return;
}

/*@ requires \valid(this); */
void move(struct Point *this, int dx, int dy)
{
  move_x(this,dx);
  move_y(this,dy);
  return;
}

int main(void)
{
  int __retres;
  struct Point o;
  Point::Ctor(& o);
  struct Point a;
  Point::Ctor(& a,1,1);
  struct Point b;
  Point::Ctor(& b,(struct Point const *)(& a));
  struct Point *c = & a;
  move(& a,1,-1);
  move_x(c,0);
  __retres = 0;
  return __retres;
}


