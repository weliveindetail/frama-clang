[kernel] Parsing tests/class/array_object_bts1739.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct vector;
struct vector {
   
};
void vector::Ctor(struct vector const *this);

void vector::Ctor(struct vector const *this,
                  struct vector const *__frama_c_arg_0);

void vector::Ctor(struct vector const *this, struct vector *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void vector::Ctor(struct vector const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void vector::Ctor(struct vector const *this,
                  struct vector const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void vector::Ctor(struct vector const *this, struct vector *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "vector",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct vector gw[10];
void __fc_init_Z2gw(void) __attribute__((__constructor__));
void __fc_init_Z2gw(void)
{
  unsigned long __fc_idx = 0UL;
  while (__fc_idx < (unsigned long)10) {
    vector::Ctor((struct vector const *)(& gw[__fc_idx]));
    __fc_idx ++;
  }
  return;
}

int main(void)
{
  int __retres;
  struct vector w[2];
  struct vector *__fc_tmp_0 = w;
  {
    int _frama_c_index = 0;
    while (_frama_c_index < 2) {
      vector::Ctor((struct vector const *)(__fc_tmp_0 + _frama_c_index));
      _frama_c_index ++;
    }
  }
  __retres = 0;
  return __retres;
}


