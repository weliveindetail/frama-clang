[kernel] Parsing tests/class/ostream_bts1752.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function operator<< can't throw any exception
[kernel] Warning: Assuming declared function operator<< can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct ostream;
struct ostream {
   
};
void ostream::Ctor(struct ostream const *this);

void ostream::Dtor(struct ostream const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid(this); */
struct ostream operator<<(struct ostream *this, char const *__frama_c_arg_0);

/*@ requires \valid_read(this); */
void ostream::Ctor(struct ostream const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void ostream::Dtor(struct ostream const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ostream",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct ostream cout;
void __fc_init_Z4cout(void) __attribute__((__constructor__));
void __fc_init_Z4cout(void)
{
  ostream::Ctor((struct ostream const *)(& cout));
  return;
}

int main(void)
{
  int __retres;
  struct ostream __fc_tmp_0 = operator<<(& cout,"bar");
  struct ostream __fc_tmp_1 = operator<<(& __fc_tmp_0,"foo");
  __retres = 0;
  ostream::Dtor((struct ostream const *)(& __fc_tmp_1));
  ostream::Dtor((struct ostream const *)(& __fc_tmp_0));
  return __retres;
}


