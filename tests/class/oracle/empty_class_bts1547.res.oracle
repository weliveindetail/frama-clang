[kernel] Parsing tests/class/empty_class_bts1547.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct allocator;
struct allocator {
   
};
struct vector;
struct vector {
   struct allocator alloc ;
};
void allocator::Ctor(struct allocator const *this);

void allocator::Dtor(struct allocator const *this);

void allocator::Ctor(struct allocator const *this,
                     struct allocator const *__frama_c_arg_0);

void allocator::Ctor(struct allocator const *this,
                     struct allocator *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void allocator::Ctor(struct allocator const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void allocator::Dtor(struct allocator const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void allocator::Ctor(struct allocator const *this,
                     struct allocator const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void allocator::Ctor(struct allocator const *this,
                     struct allocator *__frama_c_arg_0)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "allocator",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void vector::Ctor(struct vector const *this);

void vector::Ctor(struct vector const *this,
                  struct vector const *__frama_c_arg_0);

void vector::Ctor(struct vector const *this, struct vector *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
void foo(struct vector *this);

/*@ requires \valid_read(this); */
void vector::Ctor(struct vector const *this)
{
  allocator::Ctor(& this->alloc);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void vector::Ctor(struct vector const *this,
                  struct vector const *__frama_c_arg_0)
{
  allocator::Ctor(& this->alloc,& __frama_c_arg_0->alloc);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void vector::Ctor(struct vector const *this, struct vector *__frama_c_arg_0)
{
  allocator::Ctor(& this->alloc,& __frama_c_arg_0->alloc);
  return;
}

/*@ requires \valid(this); */
void foo(struct vector *this)
{
  struct vector tmp;
  vector::Ctor(& tmp);
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "vector",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};

