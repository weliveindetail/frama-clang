[kernel] Parsing tests/class/rt_val.cc (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct Foo;
struct Foo {
   int x ;
};
void Foo::Ctor(struct Foo const *this, struct Foo const *__frama_c_arg_0);

void Foo::Ctor(struct Foo const *this, struct Foo *__frama_c_arg_0);

void Foo::Dtor(struct Foo const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void Foo::Ctor(struct Foo const *this, int _x)
{
  this->x = _x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Foo::Ctor(struct Foo const *this, struct Foo const *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void Foo::Ctor(struct Foo const *this, struct Foo *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \valid_read(this); */
void Foo::Dtor(struct Foo const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Foo",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct Foo f(int y)
{
  struct Foo __fc_tmp_0;
  Foo::Ctor(& __fc_tmp_0,y + y);
  return __fc_tmp_0;
}

int g(void)
{
  int __retres;
  struct Foo z;
  struct Foo __fc_tmp_1 = f(1);
  z = __fc_tmp_1;
  __retres = z.x;
  Foo::Dtor((struct Foo const *)(& __fc_tmp_1));
  Foo::Dtor((struct Foo const *)(& z));
  return __retres;
}


