[kernel] Parsing tests/template/namespace.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct bar<int> {
   int x ;
};
struct baz;
struct baz {
   int y ;
};
void bar<int>::Ctor(struct bar<int> const *this);

void bar<int>::Ctor(struct bar<int> const *this,
                    struct bar<int> const *__frama_c_arg_0);

void bar<int>::Ctor(struct bar<int> const *this,
                    struct bar<int> *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void bar<int>::Ctor(struct bar<int> const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void bar<int>::Ctor(struct bar<int> const *this,
                    struct bar<int> const *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void bar<int>::Ctor(struct bar<int> const *this,
                    struct bar<int> *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bar",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void baz::Ctor(struct baz const *this);

void baz::Ctor(struct baz const *this, struct baz const *__frama_c_arg_0);

void baz::Ctor(struct baz const *this, struct baz *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void baz::Ctor(struct baz const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void baz::Ctor(struct baz const *this, struct baz const *__frama_c_arg_0)
{
  this->y = __frama_c_arg_0->y;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void baz::Ctor(struct baz const *this, struct baz *__frama_c_arg_0)
{
  this->y = __frama_c_arg_0->y;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "baz",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int main(void)
{
  int __retres;
  struct bar<int> a;
  bar<int>::Ctor(& a);
  struct baz b;
  baz::Ctor(& b);
  __retres = a.x + b.y;
  return __retres;
}


