[kernel] Parsing tests/template/class_in_template.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function __ostream_insert<char> can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct ios_base;
struct basic_ostream<char>;
struct ios_base {
   
};
struct basic_ios<char> {
   struct ios_base _frama_c__ZN3stdE8ios_base ;
   struct basic_ostream<char> *_M_tie ;
};
typedef struct basic_ostream<char> ostream;
struct sentry;
struct sentry {
   struct basic_ostream<char> *_M_os ;
};
struct basic_ostream<char> {
   struct basic_ios<char> _frama_c__ZN3stdE9basic_iosIcE ;
};
void ios_base::Ctor(struct ios_base const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
int const bad_bit = 1;
/*@ requires \valid_read(this); */
void ios_base::Ctor(struct ios_base const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "ios_base",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void basic_ios<char>::Ctor(struct basic_ios<char> const *this)
{
  ios_base::Ctor(& this->_frama_c__ZN3stdE8ios_base);
  this->_M_tie = (struct basic_ostream<char> *)0;
  return;
}

/*@ requires \valid(this); */
void setstate(struct basic_ios<char> *this, int state);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "basic_ios",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid(__out);
    ensures \valid(\result); */
struct basic_ostream<char> *__ostream_insert<char>(struct basic_ostream<char> *__out,
                                                   char const *__s);

/*@ requires \valid(__os);
    ensures \valid(\result); */
struct basic_ostream<char> *operator<<<char>(struct basic_ostream<char> *__os,
                                             char const *__s);

/*@ requires \valid(__out);
    ensures \valid(\result); */
struct basic_ostream<char> *operator<<<char>(struct basic_ostream<char> *__out,
                                             char __c)
{
  struct basic_ostream<char> *tmp;
  tmp = __ostream_insert<char>(__out,(char const *)(& __c));
  return tmp;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "sentry",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void basic_ostream<char>::Ctor(struct basic_ostream<char> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid(__os); */
void sentry::Ctor(struct sentry const *this, struct basic_ostream<char> *__os);

/*@ requires \valid_read(this); */
void sentry::Dtor(struct sentry const *this);

/*@ requires \valid_read(this); */
void basic_ostream<char>::Ctor(struct basic_ostream<char> const *this)
{
  basic_ios<char>::Ctor(& this->_frama_c__ZN3stdE9basic_iosIcE);
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "basic_ostream",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int main(void)
{
  int __retres;
  struct basic_ostream<char> *tmp;
  ostream out;
  basic_ostream<char>::Ctor(& out);
  tmp = operator<<<char>(& out,(char)99);
  __retres = 0;
  return __retres;
}


