[kernel] Parsing tests/template/fwd_decl2.cc (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct bar;
struct foo<bar> {
   struct bar *x ;
};
struct bar {
   int y ;
   int z ;
};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

/*@ requires \valid_read(this); */
void foo<bar>::Ctor(struct foo<bar> const *this, struct bar *_x)
{
  this->x = _x;
  return;
}

/*@ requires \valid(this); */
struct bar *get_x(struct foo<bar> *this)
{
  struct bar *__retres;
  __retres = this->x;
  return __retres;
}

/*@ requires \valid(this); */
void set_x(struct foo<bar> *this, struct bar *_x);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "foo",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

/*@ requires \valid_read(this); */
void bar::Ctor(struct bar const *this)
{
  this->y = 0;
  this->z = 0;
  return;
}

/*@ requires \valid(this); */
int get_y(struct bar *this)
{
  int __retres;
  __retres = this->y;
  return __retres;
}

/*@ requires \valid(this); */
void incr(struct bar *this)
{
  (this->y) ++;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "bar",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int main(void)
{
  int __retres;
  struct bar *tmp;
  struct bar b;
  bar::Ctor(& b);
  struct foo<bar> f;
  foo<bar>::Ctor(& f,& b);
  tmp = get_x(& f);
  int z = tmp->z;
  __retres = 0;
  return __retres;
}


