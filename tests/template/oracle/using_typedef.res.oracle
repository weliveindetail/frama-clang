[kernel] Parsing tests/template/using_typedef.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct Foo<int> {
   int x ;
};
void Foo<int>::Ctor(struct Foo<int> const *this,
                    struct Foo<int> const *__frama_c_arg_0);

void Foo<int>::Ctor(struct Foo<int> const *this,
                    struct Foo<int> *__frama_c_arg_0);

void Foo<int>::Dtor(struct Foo<int> const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void Foo<int>::Ctor(struct Foo<int> const *this, int _x)
{
  this->x = _x;
  return;
}

/*@ requires \valid(this); */
int get(struct Foo<int> *this);

/*@ requires \valid(this); */
void set(struct Foo<int> *this, int i);

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Foo<int>::Ctor(struct Foo<int> const *this,
                    struct Foo<int> const *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void Foo<int>::Ctor(struct Foo<int> const *this,
                    struct Foo<int> *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \valid_read(this); */
void Foo<int>::Dtor(struct Foo<int> const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Foo",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct Foo<int> b;
void __fc_init_Z1b(void) __attribute__((__constructor__));
void __fc_init_Z1b(void)
{
  struct Foo<int> __fc_tmp_0;
  Foo<int>::Ctor(& __fc_tmp_0,1);
  b = __fc_tmp_0;
  Foo<int>::Dtor((struct Foo<int> const *)(& __fc_tmp_0));
  return;
}


