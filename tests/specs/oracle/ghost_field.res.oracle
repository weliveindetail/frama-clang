[kernel] warning: ignoring status of type invariant `_ZN1A5modelE'
/* Generated by Frama-C */
struct _Z1A;
typedef struct A _Z1A;
struct A {
   int _ZN1A1vE ;
   int _ZN1A1wE ;
   int _ZN1A1xE ;
   int _ZN1A1yE ;
};
__inline void A::Ctor(struct A *this);
__inline void A::Ctor(struct A *this, int x);
__inline struct A *incr(struct A *this);
__inline void A::Ctor(struct A *this, struct A *__other);
__inline struct A *operator=(struct A *this, struct A *__other);
__inline void A::Dtor(struct A *this);
/*@ type invariant model(A *this) = this->x ≡ this->y;
 */
/*@ predicate __inv{L}(A *this) = this->x ≡ this->y;
 */
/*@ requires \valid(this);
    ensures \old(this)->x ≡ \old(this)->y; */
__inline void A::Ctor(struct A *this)
{
  this->v = 0;
  /*@ ghost this->w = 0; */
  this->x = 0;
  /*@ ghost this->y = 0; */
  return;
}

/*@ requires \valid(this);
    ensures \old(this)->x ≡ \old(this)->y; */
__inline void A::Ctor(struct A *this, int x)
{
  this->v = 0;
  /*@ ghost this->w = 0; */
  this->x = x;
  /*@ ghost this->y = 0; */
  return;
}

/*@ requires \valid(this);
    requires this->x ≡ this->y;
    ensures \old(this)->x ≡ \old(this)->y;
    ensures \valid(\result) ⇒ __inv(\result);
 */
__inline struct A *incr(struct A *this)
{
  struct A *__res;
  (this->x) ++;
  /*@ ghost (this->y) ++; */
  __res = this;
  return __res;
}

/*@ requires \valid(this);
    requires __other ≡ \null ∨ (\valid(__other) ∧ __inv(__other));
    requires \valid(__other);
    ensures \old(this)->x ≡ \old(this)->y;
 */
__inline void A::Ctor(struct A *this, struct A *__other)
{
  this->v = __other->v;
  this->w = __other->w;
  this->x = __other->x;
  this->y = __other->y;
  return;
}

/*@ requires \valid(this);
    requires this->x ≡ this->y;
    requires __other ≡ \null ∨ (\valid(__other) ∧ __inv(__other));
    requires \valid(__other);
    ensures \old(this)->x ≡ \old(this)->y;
    ensures \valid(\result) ⇒ __inv(\result);
 */
__inline struct A *operator=(struct A *this, struct A *__other)
{
  struct A *__res;
  this->v = __other->v;
  this->w = __other->w;
  this->x = __other->x;
  this->y = __other->y;
  __res = this;
  return __res;
}

/*@ requires \valid(this);
    requires this->x ≡ this->y; */
__inline void A::Dtor(struct A *this)
{
  return;
}

int main(void)
{
  struct A a;
  struct A *tmp_1;
  struct A *tmp_0;
  struct A *tmp;
  int __res;
  A::Ctor(& a);
  tmp = incr(& a);
  tmp_0 = incr(tmp);
  tmp_1 = incr(tmp_0);
  __res = 0;
  return __res;
}


