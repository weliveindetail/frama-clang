[kernel] Parsing tests/specs/behaviors.cc (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function Frama_C_nondet can't throw any exception
/* Generated by Frama-C */
typedef unsigned int size_t;
int volatile Frama_C_entropy_source;
/*@ requires valid_p: \valid(p + (0 .. l - 1));
    ensures initialization: \initialized(\old(p) + (0 .. \old(l) - 1));
    assigns *(p + (0 .. l - 1)), Frama_C_entropy_source;
    assigns *(p + (0 .. l - 1)) \from Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
void Frama_C_make_unknown(char *p, size_t l);

/*@ ensures result_a_or_b: \result ≡ \old(a) ∨ \result ≡ \old(b);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from a, b, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int Frama_C_nondet(int a, int b);

/*@ ensures result_a_or_b: \result ≡ \old(a) ∨ \result ≡ \old(b);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from a, b, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
void *Frama_C_nondet_ptr(void *a, void *b);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int Frama_C_interval(int min, int max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int Frama_C_interval_split(int min, int max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
unsigned char Frama_C_unsigned_char_interval(unsigned char min,
                                             unsigned char max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
char Frama_C_char_interval(char min, char max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
unsigned short Frama_C_unsigned_short_interval(unsigned short min,
                                               unsigned short max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
short Frama_C_short_interval(short min, short max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
unsigned int Frama_C_unsigned_int_interval(unsigned int min, unsigned int max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int Frama_C_int_interval(int min, int max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
unsigned long Frama_C_unsigned_long_interval(unsigned long min,
                                             unsigned long max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
long Frama_C_long_interval(long min, long max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
unsigned long long Frama_C_unsigned_long_long_interval(unsigned long long min,
                                                       unsigned long long max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
long long Frama_C_long_long_interval(long long min, long long max);

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
size_t Frama_C_size_t_interval(size_t min, size_t max);

/*@ requires finite: \is_finite(min) ∧ \is_finite(max);
    requires order: min ≤ max;
    ensures
      result_bounded:
        \is_finite(\result) ∧ \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
float Frama_C_float_interval(float min, float max);

/*@ requires finite: \is_finite(min) ∧ \is_finite(max);
    requires order: min ≤ max;
    ensures
      result_bounded:
        \is_finite(\result) ∧ \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
double Frama_C_double_interval(double min, double max);

/*@ requires finite: \is_finite(min) ∧ \is_finite(max);
    requires order: min ≤ max;
    ensures
      result_bounded:
        \is_finite(\result) ∧ \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
double Frama_C_real_interval_as_double(double min, double max);

/*@ terminates \false;
    ensures never_terminates: \false;
    assigns \nothing; */
void Frama_C_abort(void);

/*@ assigns \result;
    assigns \result \from p; */
size_t Frama_C_offset(void const *p);

/*@ assigns \result;
    assigns \result \from i; */
long long Frama_C_abstract_cardinal(long long i);

/*@ assigns \result;
    assigns \result \from i; */
long long Frama_C_abstract_max(long long i);

/*@ assigns \result;
    assigns \result \from i; */
long long Frama_C_abstract_min(long long i);

/*@ requires x > 0;
    
    behavior small:
      assumes x ≤ 10;
      ensures \result ≤ 10;
    
    behavior big:
      assumes x ≥ 10;
      ensures \result ≥ 10;
 */
int f(int x)
{
  int __retres;
  if (x < 10) {
    __retres = x + 1;
    goto return_label;
  }
  else {
    __retres = x;
    goto return_label;
  }
  return_label: return __retres;
}

int main(void)
{
  int __retres;
  int y = Frama_C_nondet(0,1);
  f(1);
  f(10);
  f(15);
  if (! ((_Bool)(y != 0))) f(y);
  __retres = 0;
  return __retres;
}


