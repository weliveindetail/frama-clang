[kernel] Parsing tests/basic/vla.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function __fc_vla_alloc can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef long Paddr;
struct A {
   
};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
void m_fn1(struct A const *this, Paddr __frama_c_arg_0,
           unsigned int __frama_c_arg_1);

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "A",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ assigns \nothing;
    frees p; */
 __attribute__((__FC_BUILTIN__)) void __fc_vla_free(void *p);

/*@ assigns \result;
    assigns \result \from \nothing;
    allocates \result; */
 __attribute__((__FC_BUILTIN__)) void *__fc_vla_alloc(unsigned int size);

/*@ requires \valid_read(this); */
void m_fn1(struct A const *this, Paddr __frama_c_arg_0,
           unsigned int __frama_c_arg_1)
{
  long count;
  unsigned int __lengthof_table;
  /*@ assert alloca_bounds: 0 < sizeof(Paddr) * count â‰¤ 4294967295; */ ;
  __lengthof_table = (unsigned int)count;
  Paddr *table = __fc_vla_alloc(sizeof(Paddr) * __lengthof_table);
  __fc_vla_free((void *)table);
  return;
}


