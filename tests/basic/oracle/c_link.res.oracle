[kernel] Parsing tests/basic/c_link.cc (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function f can't throw any exception
[kernel] Warning: Assuming declared function f can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct Foo;
struct Foo {
   int x ;
};
struct Bar;
struct Bar {
   int y ;
   int z ;
};
void Foo::Ctor(struct Foo const *this);

void Foo::Dtor(struct Foo const *this);

struct Foo *operator=(struct Foo *this, struct Foo *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void Foo::Ctor(struct Foo const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void Foo::Dtor(struct Foo const *this)
{
  return;
}

/*@ requires \valid(this);
    requires \valid(__frama_c_arg_0);
    ensures \valid(\result);
 */
struct Foo *operator=(struct Foo *this, struct Foo *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return this;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Foo",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void Bar::Ctor(struct Bar const *this);

void Bar::Ctor(struct Bar const *this, struct Bar const *__frama_c_arg_0);

void Bar::Dtor(struct Bar const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void Bar::Ctor(struct Bar const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Bar::Ctor(struct Bar const *this, struct Bar const *__frama_c_arg_0)
{
  this->y = __frama_c_arg_0->y;
  this->z = __frama_c_arg_0->z;
  return;
}

/*@ requires \valid_read(this); */
void Bar::Dtor(struct Bar const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Bar",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct Foo f(struct Bar __frama_c_arg_0);

int main(void)
{
  int __retres;
  struct Foo x;
  struct Foo g;
  Foo::Ctor(& g);
  struct Bar b;
  Bar::Ctor(& b);
  struct Bar __fc_tmp_0;
  Bar::Ctor(& __fc_tmp_0,(struct Bar const *)(& b));
  struct Foo __fc_tmp_1 = f(__fc_tmp_0);
  x = __fc_tmp_1;
  {
    struct Foo *tmp_1;
    struct Bar __fc_tmp_2;
    Bar::Ctor(& __fc_tmp_2,(struct Bar const *)(& b));
    struct Foo __fc_tmp_3 = f(__fc_tmp_2);
    tmp_1 = operator=(& g,& __fc_tmp_3);
    Foo::Dtor((struct Foo const *)(& __fc_tmp_3));
    Bar::Dtor((struct Bar const *)(& __fc_tmp_2));
  }
  __retres = 0;
  Foo::Dtor((struct Foo const *)(& __fc_tmp_1));
  Bar::Dtor((struct Bar const *)(& __fc_tmp_0));
  Foo::Dtor((struct Foo const *)(& x));
  Bar::Dtor((struct Bar const *)(& b));
  Foo::Dtor((struct Foo const *)(& g));
  return __retres;
}


