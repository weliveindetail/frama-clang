[kernel] Parsing tests/basic/union_packed.cc (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function Frama_C_memcpy can't throw any exception
[kernel] Warning: Assuming declared function Frama_C_memcpy can't throw any exception
[kernel] Warning: Assuming declared function Frama_C_memcpy can't throw any exception
[kernel] Warning: Assuming declared function Frama_C_memcpy can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
typedef unsigned short u16_t;
struct A;
struct anonymous_class_3;
union anonymous_union_2;
struct anonymous_class_3 {
   u16_t prec : 10 ;
   u16_t main : 5 ;
   u16_t type : 1 ;
};
union anonymous_union_2 {
   u16_t raw ;
   struct anonymous_class_3 str ;
};
struct A {
   union anonymous_union_2 anonymous_1 ;
};
void *Frama_C_memcpy(void *dest, void const *src, unsigned int size);

void A::Ctor(struct A const *this);

void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0);

void A::Ctor(struct A const *this, struct A *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
struct A nil(void);

struct A one(void);

void set_raw(struct A *this, u16_t raw);

_Bool is_zero(struct A *this);

void anonymous_union_2::Ctor(union anonymous_union_2 const *this,
                             union anonymous_union_2 const *__frama_c_arg_0);

void anonymous_union_2::Ctor(union anonymous_union_2 const *this,
                             union anonymous_union_2 *__frama_c_arg_0);

void anonymous_union_2::Ctor(union anonymous_union_2 const *this);

void anonymous_class_3::Ctor(struct anonymous_class_3 const *this);

void anonymous_class_3::Dtor(struct anonymous_class_3 const *this);

void anonymous_class_3::Ctor(struct anonymous_class_3 const *this,
                             struct anonymous_class_3 const *__frama_c_arg_0);

void anonymous_class_3::Ctor(struct anonymous_class_3 const *this,
                             struct anonymous_class_3 *__frama_c_arg_0);

/*@ requires \valid_read(this); */
void anonymous_class_3::Ctor(struct anonymous_class_3 const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void anonymous_class_3::Dtor(struct anonymous_class_3 const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void anonymous_class_3::Ctor(struct anonymous_class_3 const *this,
                             struct anonymous_class_3 const *__frama_c_arg_0)
{
  this->prec = __frama_c_arg_0->prec;
  this->main = __frama_c_arg_0->main;
  this->type = __frama_c_arg_0->type;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void anonymous_class_3::Ctor(struct anonymous_class_3 const *this,
                             struct anonymous_class_3 *__frama_c_arg_0)
{
  this->prec = __frama_c_arg_0->prec;
  this->main = __frama_c_arg_0->main;
  this->type = __frama_c_arg_0->type;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void anonymous_union_2::Ctor(union anonymous_union_2 const *this,
                             union anonymous_union_2 const *__frama_c_arg_0)
{
  Frama_C_memcpy((void *)this,(void const *)__frama_c_arg_0,
                 sizeof(union anonymous_union_2));
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void anonymous_union_2::Ctor(union anonymous_union_2 const *this,
                             union anonymous_union_2 *__frama_c_arg_0)
{
  Frama_C_memcpy((void *)this,(void const *)__frama_c_arg_0,
                 sizeof(union anonymous_union_2));
  return;
}

/*@ requires \valid_read(this); */
void anonymous_union_2::Ctor(union anonymous_union_2 const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void A::Ctor(struct A const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0)
{
  Frama_C_memcpy((void *)(& this->anonymous_1),
                 (void const *)(& __frama_c_arg_0->anonymous_1),
                 sizeof(union anonymous_union_2));
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A *__frama_c_arg_0)
{
  Frama_C_memcpy((void *)(& this->anonymous_1),
                 (void const *)(& __frama_c_arg_0->anonymous_1),
                 sizeof(union anonymous_union_2));
  return;
}

/*@ requires \valid(this); */
void set_raw(struct A *this, u16_t raw)
{
  this->anonymous_1.raw = raw;
  return;
}

/*@ requires \valid(this); */
_Bool is_zero(struct A *this)
{
  _Bool __retres;
  __retres = (_Bool)((int)this->anonymous_1.str.type == 0);
  return __retres;
}

struct A nil(void)
{
  struct A ret;
  A::Ctor(& ret);
  ret.anonymous_1.raw = (unsigned short)0;
  return ret;
}

struct A one(void)
{
  struct A ret;
  A::Ctor(& ret);
  ret.anonymous_1.str.prec = (unsigned short)((unsigned short)0);
  ret.anonymous_1.str.main = (unsigned short)((unsigned short)1);
  ret.anonymous_1.str.type = (unsigned short)((unsigned short)0);
  return ret;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "A",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};

