[kernel] Parsing tests/basic/ref_field.cpp (external front-end)
Now output intermediate result
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct S;
struct S {
   int *i ;
};
struct T;
struct T {
   int j ;
};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid(r); */
void S::Ctor(struct S const *this, int *r)
{
  this->i = r;
  return;
}

/*@ requires \valid_read(this); */
void S::Ctor(struct S const *this, int *p)
{
  this->i = p;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "S",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this);
    requires \valid(r); */
void T::Ctor(struct T const *this, int *r)
{
  this->j = *r;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "T",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
/*@ requires \valid(x); */
void f(int *x)
{
  (*x) ++;
  return;
}

int main(void)
{
  int __retres;
  int x = 0;
  struct T t;
  T::Ctor(& t,& x);
  int *y = & x;
  struct S s;
  S::Ctor(& s,y);
  int *z = s.i;
  *z = *y;
  struct T t1;
  T::Ctor(& t1,& t.j);
  struct S s1;
  S::Ctor(& s1,s.i);
  f(& x);
  f(& t.j);
  if (*(s1.i) == t1.j + 1) {
    __retres = 0;
    goto return_label;
  }
  else {
    __retres = 1;
    goto return_label;
  }
  return_label: return __retres;
}


