[kernel] Parsing tests/basic/new.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function A::new can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct Base;
struct Base {
   int _x ;
};
struct A;
struct A {
   struct Base _frama_c__Z4Base ;
};
struct B;
struct B {
   
};
void *malloc(unsigned int size);

int glob(void)
{
  int __retres;
  int *ii;
  int *__fc_tmp_0 = malloc(sizeof(int));
  *__fc_tmp_0 = 10;
  ii = __fc_tmp_0;
  __retres = *ii;
  return __retres;
}

void Base::Ctor(struct Base const *this);

void Base::Dtor(struct Base const *this);

void Base::Ctor(struct Base const *this, struct Base const *__frama_c_arg_0);

void Base::Ctor(struct Base const *this, struct Base *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void Base::Ctor(struct Base const *this)
{
  return;
}

/*@ requires \valid_read(this); */
void Base::Dtor(struct Base const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void Base::Ctor(struct Base const *this, struct Base const *__frama_c_arg_0)
{
  this->_x = __frama_c_arg_0->_x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void Base::Ctor(struct Base const *this, struct Base *__frama_c_arg_0)
{
  this->_x = __frama_c_arg_0->_x;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "Base",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void A::Ctor(struct A const *this);

void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0);

void A::Ctor(struct A const *this, struct A *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_rtti_name_info_content _frama_c_base_classes[1];
struct _frama_c_vmt_content _frama_c_vmt[1];
void *A::new(unsigned int size);

void m_fn2(struct A *this);

/*@ requires \valid_read(this); */
void A::Ctor(struct A const *this)
{
  Base::Ctor(& this->_frama_c__Z4Base);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0)
{
  Base::Ctor(& this->_frama_c__Z4Base,& __frama_c_arg_0->_frama_c__Z4Base);
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A *__frama_c_arg_0)
{
  Base::Ctor(& this->_frama_c__Z4Base,& __frama_c_arg_0->_frama_c__Z4Base);
  return;
}

/*@ requires \valid(this); */
void m_fn2(struct A *this)
{
  struct Base *a;
  struct A *__fc_tmp_1;
  __fc_tmp_1 = (struct A *)A::new(sizeof(struct A));
  A::Ctor((struct A const *)__fc_tmp_1);
  a = & __fc_tmp_1->_frama_c__Z4Base;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "A",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
void B::Ctor(struct B const *this);

void B::Ctor(struct B const *this, struct B const *__frama_c_arg_0);

void B::Ctor(struct B const *this, struct B *__frama_c_arg_0);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
void *B::new(unsigned int size)
{
  void *__retres;
  __retres = (void *)(size + (unsigned int)1);
  return __retres;
}

_Bool nnnope(_Bool arg)
{
  _Bool __retres;
  __retres = (_Bool)(! arg);
  return __retres;
}

/*@ requires \valid(this); */
_Bool eeeyup(struct B *this, _Bool arg)
{
  _Bool __retres;
  __retres = (_Bool)(! arg);
  return __retres;
}

void bbb(struct B *this);

/*@ requires \valid_read(this); */
void B::Ctor(struct B const *this)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void B::Ctor(struct B const *this, struct B const *__frama_c_arg_0)
{
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void B::Ctor(struct B const *this, struct B *__frama_c_arg_0)
{
  return;
}

/*@ requires \valid(this); */
void bbb(struct B *this)
{
  struct B *bb;
  struct B *__fc_tmp_2;
  __fc_tmp_2 = (struct B *)B::new(sizeof(struct B));
  B::Ctor((struct B const *)__fc_tmp_2);
  bb = __fc_tmp_2;
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "B",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};

