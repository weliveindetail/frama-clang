[kernel] Parsing tests/basic/new_all_kind.cpp (external front-end)
Now output intermediate result
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
[kernel] Warning: Assuming declared function malloc can't throw any exception
/* Generated by Frama-C */
struct _frama_c_vmt_content {
   void (*method_ptr)() ;
   int shift_this ;
};
struct _frama_c_rtti_name_info_node;
struct _frama_c_vmt {
   struct _frama_c_vmt_content *table ;
   int table_size ;
   struct _frama_c_rtti_name_info_node *rtti_info ;
};
struct _frama_c_rtti_name_info_content {
   struct _frama_c_rtti_name_info_node *value ;
   int shift_object ;
   int shift_vmt ;
};
struct _frama_c_rtti_name_info_node {
   char const *name ;
   struct _frama_c_rtti_name_info_content *base_classes ;
   int number_of_base_classes ;
   struct _frama_c_vmt *pvmt ;
};
struct A;
struct A {
   int x ;
};
void *malloc(unsigned int size);

void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0);

void A::Ctor(struct A const *this, struct A *__frama_c_arg_0);

void A::Dtor(struct A const *this);

struct _frama_c_vmt _frama_c_vmt_header;
struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info;

struct _frama_c_vmt_content _frama_c_vmt[1];
/*@ requires \valid_read(this); */
void A::Ctor(struct A const *this)
{
  this->x = 42;
  return;
}

/*@ requires \valid_read(this); */
void A::Ctor(struct A const *this, int x_)
{
  this->x = x_;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid_read(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A const *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \separated(this, __frama_c_arg_0);
    requires \valid_read(this);
    requires \valid(__frama_c_arg_0);
 */
void A::Ctor(struct A const *this, struct A *__frama_c_arg_0)
{
  this->x = __frama_c_arg_0->x;
  return;
}

/*@ requires \valid_read(this); */
void A::Dtor(struct A const *this)
{
  return;
}

struct _frama_c_rtti_name_info_node _frama_c_rtti_name_info =
  {.name = "A",
   .base_classes = (struct _frama_c_rtti_name_info_content *)0,
   .number_of_base_classes = 0,
   .pvmt = (struct _frama_c_vmt *)0};
int main(void)
{
  int __retres;
  struct A *tmp;
  struct A *t1;
  struct A *__fc_tmp_2;
  struct A *t2;
  struct A *__fc_tmp_3;
  struct A *t3;
  struct A *__fc_tmp_4;
  struct A *tmp_0;
  {
    struct A *__fc_tmp_0;
    __fc_tmp_0 = (struct A *)malloc(sizeof(struct A) * (unsigned int)26);
    {
      unsigned long long __fc_tmp_1 = 0ULL;
      while (__fc_tmp_1 < (unsigned long long)26) {
        A::Ctor((struct A const *)(__fc_tmp_0 + __fc_tmp_1));
        __fc_tmp_1 ++;
      }
    }
    tmp = __fc_tmp_0;
  }
  struct A *t = tmp;
  __fc_tmp_2 = (struct A *)malloc(sizeof(struct A));
  A::Ctor((struct A const *)__fc_tmp_2);
  t1 = __fc_tmp_2;
  __fc_tmp_3 = (struct A *)malloc(sizeof(struct A));
  A::Ctor((struct A const *)__fc_tmp_3);
  t2 = __fc_tmp_3;
  __fc_tmp_4 = (struct A *)malloc(sizeof(struct A));
  A::Ctor((struct A const *)__fc_tmp_4,5);
  t3 = __fc_tmp_4;
  {
    struct A *__fc_tmp_5;
    __fc_tmp_5 = (struct A *)malloc(sizeof(struct A) * (unsigned int)5);
    {
      unsigned long long __fc_tmp_6 = 0ULL;
      while (__fc_tmp_6 < (unsigned long long)5) {
        A::Ctor((struct A const *)(__fc_tmp_5 + __fc_tmp_6));
        __fc_tmp_6 ++;
      }
    }
    tmp_0 = __fc_tmp_5;
  }
  struct A *t4 = tmp_0;
  __retres = 0;
  return __retres;
}


